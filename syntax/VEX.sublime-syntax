%YAML 1.2

name: VEX
file_extensions:
  - vfl
  - h
scope: source.vex

variables:
  type: 'int|string|float|vector2|vector|vector4|matrix2|matrix3|matrix|bsdf|light|material|dict'
  context: 'chop|cop2|cvex|displace|fog|image3d|light|shadow|sop|surface'
  function: 'Du|Dv|Dw|__uniform_mul|__uniform_premul|abs|abspath|accessframe|acos|addattrib|addattribute|adddetailattrib|addgroup|addpoint|addpointattrib|addprim|addprimattrib|addvariablename|addvertex|addvertexattrib|addvisualizer|agentaddclip|agentchannelnames|agentchannelvalue|agentchannelvalues|agentclipcatalog|agentclipchannel|agentclipchannelnames|agentcliplength|agentclipnames|agentclipsample|agentclipsamplelocal|agentclipsamplerate|agentclipsampleworld|agentclipstarttime|agentcliptimes|agentcliptransformgroups|agentclipweights|agentcollisionlayer|agentcurrentlayer|agentfindtransformgroup|agentlayerbindings|agentlayers|agentlayershapes|agentlocaltransform|agentlocaltransforms|agentrigchildren|agentrigfind|agentrigfindchannel|agentrigparent|agentsolvefbik|agenttransformcount|agenttransformgroupmember|agenttransformgroupmemberchannel|agenttransformgroups|agenttransformgroupweight|agenttransformnames|agenttransformtolocal|agenttransformtoworld|agentworldtransform|agentworldtransforms|albedo|alphaname|ambient|anoise|append|area|argsort|array|ashikhmin|asin|assert_enabled|assign|atan|atan2|atof|atoi|atten|attrib|attribclass|attribdataid|attribsize|attribtype|attribtypeinfo|avg|binput|blackbody|blinn|blinnBRDF|bouncelabel|bouncemask|bumpmap|bumpmapA|bumpmapB|bumpmapG|bumpmapL|bumpmapR|bumpname|cbrt|ceil|ch|ch2|ch3|ch4|chadd|chattr|chattrnames|chdict|chend|chendf|chendt|chexpr|chexprf|chexprt|chf|chi|chid|chindex|chinput|chinputlimits|chname|chnames|chnumchan|chop|choplocal|choplocalt|chopt|chp|chr|chramp|chrampderiv|chrate|chreadbuf|chremove|chremoveattr|chrename|chresizebuf|chs|chsetattr|chsetlength|chsetrate|chsetstart|chsop|chsraw|chstart|chstartf|chstartt|chu|chv|chwritebuf|cinput|ckspline|clamp|clip|colormap|colorname|combinelocaltransform|computenormal|concat|cone|cos|cosh|cracktransform|create_cdf|create_pdf|cregioncapturetransform|cregiondeformtransform|cregionoverridetransform|cross|cspline|ctransform|curlnoise|curlnoise2d|curlxnoise|curlxnoise2d|curvearclen|cvex_bsdf|cwnoise|decode|decodeattrib|decodeparm|degrees|depthmap|depthname|detail|detailattrib|detailattribsize|detailattribtype|detailattribtypeinfo|detailintrinsic|determinant|diagonalizesymmetric|diffuse|diffuseBRDF|dihedral|dimport|distance|distance2|dot|dsmpixel|efit|eigenvalues|encode|encodeattrib|encodeparm|endswith|environment|erf|erf_inv|erfc|error|eulertoquaternion|eval_bsdf|exp|expand_udim|expandedgegroup|expandpointgroup|expandprimgroup|expandvertexgroup|extractlocaltransform|fastshadow|filamentsample|file_stat|filter_remap|filtershadow|filterstep|find|findattribval|findattribvalcount|finput|fit|fit01|fit10|fit11|floor|flownoise|flowpnoise|frac|fresnel|fromNDC|frontface|fuzzify|fuzzy_and|fuzzy_defuzz_centroid|fuzzy_nand|fuzzy_nor|fuzzy_not|fuzzy_nxor|fuzzy_or|fuzzy_xor|geoself|geounwrap|getattrib|getattribute|getbbox|getbbox_center|getbbox_max|getbbox_min|getbbox_size|getblurP|getbounces|getbounds|getcomp|getcomponents|getderiv|getfogname|getglobalraylevel|getgroupid|getlight|getlightid|getlightname|getlights|getlightscope|getlocalcurvature|getmaterial|getmaterialid|getobjectid|getobjectname|getpackedtransform|getphotonlight|getpointbbox|getpointbbox_center|getpointbbox_max|getpointbbox_min|getpointbbox_size|getprimid|getptextureid|getraylevel|getrayweight|getsamplestore|getscope|getsmoothP|getspace|getuvtangents|ggx|gradient|hair|has_udim|hasattrib|hasdetailattrib|haslight|hasmetadata|hasplane|haspointattrib|hasprimattrib|hasvertexattrib|hedge_dstpoint|hedge_dstvertex|hedge_equivcount|hedge_isequiv|hedge_isprimary|hedge_isvalid|hedge_next|hedge_nextequiv|hedge_postdstpoint|hedge_postdstvertex|hedge_presrcpoint|hedge_presrcvertex|hedge_prev|hedge_prim|hedge_primary|hedge_srcpoint|hedge_srcvertex|henyeygreenstein|hscript_noise|hscript_rand|hscript_snoise|hscript_sturb|hscript_turb|hsvtorgb|iaspect|ichname|ident|idtopoint|idtoprim|iend|iendtime|ihasplane|import|importance_remap|inedgegroup|ingroup|inpointgroup|inprimgroup|insert|instance|interpolate|intersect|intersect_all|intersect_lights|inumplanes|invert|invertexgroup|invlerp|iplaneindex|iplanename|iplanesize|irate|irradiance|isalpha|isbound|isconnected|isdigit|isfinite|isfogray|isframes|islpeactive|isnan|isotropic|israytracing|issamples|isseconds|isshadingRHS|isshadowray|istart|istarttime|isuvrendering|isvalidindex|isvarying|itoa|ixres|iyres|join|json_dumps|json_loads|keys|kspline|len|length|length2|lerp|lightbounces|lightid|lightstate|limit_sample_space|limport|lkspline|log|log10|lookat|lspline|lstrip|luminance|lumname|makebasis|maketransform|mask_bsdf|maskname|match|matchvex_blinn|matchvex_specular|mattrib|max|mdensity|metadata|metaimport|metamarch|metanext|metastart|metaweight|min|minpos|mspace|mwnoise|nametopoint|nametoprim|nbouncetypes|ndcdepth|nearpoint|nearpoints|nedgesgroup|neighbour|neighbourcount|neighbours|newgroup|newsampler|nextsample|ninput|ninputs|noise|noised|normal_bsdf|normalize|normalname|npoints|npointsgroup|nprimitives|nprimitivesgroup|nrandom|ntransform|nuniqueval|nvertices|nverticesgroup|objectstate|occlusion|ocean_sample|ocio_activedisplays|ocio_activeviews|ocio_import|ocio_parsecolorspace|ocio_roles|ocio_spaces|ocio_transform|onoise|opdigits|opend|opfullpath|opid|opparentbonetransform|opparenttransform|opparmtransform|oppreconstrainttransform|oppreparmtransform|opprerawparmtransform|oppretransform|oprawparmtransform|opstart|optransform|ord|orthographic|osd_facecount|osd_firstpatch|osd_limitsurface|osd_limitsurfacevertex|osd_lookupface|osd_lookuppatch|osd_patchcount|osd_patches|outerproduct|ow_nspace|ow_space|ow_vspace|pack_inttosafefloat|packedtransform|pathtrace|pcclose|pccone|pccone_radius|pcconvex|pcexport|pcfarthest|pcfilter|pcfind|pcfind_radius|pcgenerate|pcimport|pcimportbyidx3|pcimportbyidx4|pcimportbyidxf|pcimportbyidxi|pcimportbyidxp|pcimportbyidxs|pcimportbyidxv|pciterate|pcline|pcline_radius|pcnumfound|pcopen|pcopenlod|pcsampleleaf|pcsegment|pcsegment_radius|pcsize|pcunshaded|pcwrite|perspective|pgfind|phong|phongBRDF|phonglobe|photonmap|planeindex|planename|planepointdistance|planesize|planesphereintersect|pluralize|pnoise|point|pointattrib|pointattribsize|pointattribtype|pointattribtypeinfo|pointedge|pointhedge|pointhedgenext|pointlocaltransforms|pointname|pointprims|pointtransform|pointtransformrigid|pointtransforms|pointtransformsrigid|pointvertex|pointvertices|polardecomp|polyneighbours|pop|pow|predicate_incircle|predicate_insphere|predicate_orient2d|predicate_orient3d|premul|prerotate|prescale|pretranslate|prim|prim_attribute|prim_normal|primarclen|primattrib|primattribsize|primattribtype|primattribtypeinfo|primduv|primfind|primhedge|primintrinsic|primpoint|primpoints|primuv|primuvconvert|primvertex|primvertexcount|primvertices|print_once|printf|product|ptexture|ptlined|ptransform|push|pxnoise|pxnoised|qconvert|qdistance|qinvert|qmultiply|qrotate|quaternion|quaterniontoeuler|radians|ramp_lookup|ramp_unpack|rand|random|random_brj|random_fhash|random_ihash|random_poisson|random_shash|random_sobol|rawbumpmap|rawbumpmapA|rawbumpmapB|rawbumpmapG|rawbumpmapL|rawbumpmapR|rawcolormap|rayhittest|rayimport|re_find|re_findall|re_match|re_replace|re_split|reflect|reflectlight|refract|refractlight|relativepath|relbbox|relpath|relpointbbox|removegroup|removeindex|removepoint|removeprim|removevalue|removevertex|renderstate|reorder|resample_linear|resize|resolvemissedray|reverse|rgbtohsv|rgbtoxyz|rint|rotate|rotate_x_to|rstrip|sample_bsdf|sample_cauchy|sample_cdf|sample_circle_arc|sample_circle_edge_uniform|sample_circle_ring_uniform|sample_circle_slice|sample_circle_uniform|sample_direction_cone|sample_direction_uniform|sample_discrete|sample_exponential|sample_geometry|sample_hemisphere|sample_hypersphere_cone|sample_hypersphere_uniform|sample_light|sample_lognormal|sample_lognormal_by_median|sample_normal|sample_orientation_cone|sample_orientation_uniform|sample_photon|sample_sphere_cone|sample_sphere_shell_uniform|sample_sphere_uniform|sampledisk|scale|scatter|select|sensor_panorama_create|sensor_panorama_getcolor|sensor_panorama_getcone|sensor_panorama_getdepth|sensor_save|serialize|set|setagentchannelvalue|setagentchannelvalues|setagentclipnames|setagentclips|setagentcliptimes|setagentclipweights|setagentcollisionlayer|setagentcurrentlayer|setagentlocaltransform|setagentlocaltransforms|setagentworldtransform|setagentworldtransforms|setattrib|setattribtypeinfo|setcomp|setcurrentlight|setdetailattrib|setdetailintrinsic|setedgegroup|setpackedtransform|setpointattrib|setpointgroup|setpointlocaltransforms|setpointtransform|setpointtransforms|setprimattrib|setprimgroup|setprimintrinsic|setprimvertex|setsamplestore|setvertexattrib|setvertexgroup|setvertexpoint|shadow|shadow_light|shadowmap|shimport|shl|shr|shrz|sign|simport|sin|sinh|sleep|slerp|slice|slideframe|smooth|smoothrotation|snoise|solid_angle|solveconstraint|solvecubic|solvecurve|solvefbik|solveik|solvephysfbik|solvepoly|solvequadratic|solvetriangleSSS|sort|specular|specularBRDF|spline|spline_cdf|split|split_bsdf|splitpath|sprintf|sqrt|sssapprox|startswith|storelightexport|strip|strlen|sum|surfacedist|svddecomp|switch|swizzle|tan|tanh|tet_adjacent|tet_faceindex|teximport|texprintf|texture|texture3d|texture3dBox|titlecase|toNDC|tolower|toupper|trace|translate|translucent|transpose|trunc|tw_nspace|tw_space|tw_vspace|uniqueval|uniquevals|unpack_intfromsafefloat|unserialize|upush|usd_addattrib|usd_addcollectionexclude|usd_addcollectioninclude|usd_addinversetotransformorder|usd_addorient|usd_addprim|usd_addprimvar|usd_addrelationshiptarget|usd_addrotate|usd_addscale|usd_addtotransformorder|usd_addtransform|usd_addtranslate|usd_attrib|usd_attribelement|usd_attriblen|usd_attribnames|usd_attribsize|usd_attribtimesamples|usd_attribtypename|usd_blockattrib|usd_blockprimvar|usd_blockprimvarindices|usd_blockrelationship|usd_boundmaterialpath|usd_clearmetadata|usd_cleartransformorder|usd_collectioncomputedpaths|usd_collectioncontains|usd_collectionexcludes|usd_collectionexpansionrule|usd_collectionincludes|usd_drawmode|usd_findtransformname|usd_flattenedprimvar|usd_flattenedprimvarelement|usd_getbbox|usd_getbbox_center|usd_getbbox_max|usd_getbbox_min|usd_getbbox_size|usd_getbounds|usd_getpointinstancebounds|usd_hasapi|usd_haspayload|usd_isactive|usd_isarray|usd_isarraymetadata|usd_isarrayprimvar|usd_isattrib|usd_iscollection|usd_iscollectionpath|usd_isindexedprimvar|usd_isinstance|usd_iskind|usd_ismetadata|usd_isprim|usd_isprimvar|usd_isrelationship|usd_isstage|usd_istransformreset|usd_istype|usd_isvisible|usd_kind|usd_localtransform|usd_makeattribpath|usd_makecollectionpath|usd_makepropertypath|usd_makerelationshippath|usd_metadata|usd_metadataelement|usd_metadatalen|usd_metadatanames|usd_name|usd_parentpath|usd_pointinstance_getbbox|usd_pointinstance_getbbox_center|usd_pointinstance_getbbox_max|usd_pointinstance_getbbox_min|usd_pointinstance_getbbox_size|usd_pointinstance_relbbox|usd_pointinstancetransform|usd_primvar|usd_primvarattribname|usd_primvarelement|usd_primvarelementsize|usd_primvarindices|usd_primvarinterpolation|usd_primvarlen|usd_primvarnames|usd_primvarsize|usd_primvartimesamples|usd_primvartypename|usd_purpose|usd_relationshipforwardedtargets|usd_relationshipnames|usd_relationshiptargets|usd_relbbox|usd_removerelationshiptarget|usd_setactive|usd_setattrib|usd_setattribelement|usd_setcollectionexcludes|usd_setcollectionexpansionrule|usd_setcollectionincludes|usd_setdrawmode|usd_setkind|usd_setmetadata|usd_setmetadataelement|usd_setprimvar|usd_setprimvarelement|usd_setprimvarelementsize|usd_setprimvarindices|usd_setprimvarinterpolation|usd_setpurpose|usd_setrelationshiptargets|usd_settransformorder|usd_settransformreset|usd_setvariantselection|usd_setvisible|usd_transformname|usd_transformorder|usd_transformsuffix|usd_transformtype|usd_typename|usd_uniquetransformname|usd_variants|usd_variantselection|usd_variantsets|usd_worldtransform|uvdist|uvintersect|uvsample|uvunwrap|variance|velocityname|vertex|vertexattrib|vertexattribsize|vertexattribtype|vertexattribtypeinfo|vertexhedge|vertexindex|vertexnext|vertexpoint|vertexprev|vertexprim|vertexprimindex|vnoise|volume|volumegradient|volumeindex|volumeindexactive|volumeindexorigin|volumeindextopos|volumeindexv|volumepostoindex|volumeres|volumesample|volumesamplev|volumevoxeldiameter|vtransform|warning|wireblinn|wirediffuse|wnoise|wo_nspace|wo_space|wo_vspace|writepixel|wt_nspace|wt_space|wt_vspace|xnoise|xnoised|xyzdist|xyztorgb'

contexts:
  main:
    - include: backticks
    - include: comment
    - include: string
    - include: function
    - include: include
    - include: define
    - include: if
    - include: pragma

    # Operators.
    - match: \b(break|continue|do|else|foreach|forpoints|for|function|gather|if|illuminance|import(?!\s*\()|return|while)\b
      scope: keyword.control.vex
    - match: (\-|\+|\*|\/|%|&|\||\^)?=
      scope: keyword.operator.assignment.vex
    - match: (==|!=|<=|>=|<|>)
      scope: keyword.operator.comparison.vex
    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.vex
    - match: (\-|\+|\*|\/|%)
      scope: keyword.operator.arithmetic.vex
    - match: (!|&&|\|\|)
      scope: keyword.operator.logical.vex
    - match: (~|&|\||\^)
      scope: keyword.operator.bitwise.vex
    - match: '@'
      scope: keyword.operator.attribute.vex
    - match: '\?|:'
      scope: keyword.operator.ternary.vex

    # Punctuation
    - match: '{'
      scope: punctuation.braces.begin.vex
    - match: '}'
      scope: punctuation.braces.end.vex
    - match: \[
      scope: punctuation.brackets.begin.vex
    - match: \]
      scope: punctuation.brackets.end.vex
    - match: \(
      scope: punctuation.parens.begin.vex
    - match: \)
      scope: punctuation.parens.end.vex
    - match: ;|,
      scope: punctuation.separator.vex
    - match: (\.)(?=[A-Za-z_]\w*)
      scope: punctuation.accessor.vex

    # Types and functions.
    - match: \b({{function}})\b(?=\s*\()
      scope: support.function.lib.vex
    - match: \b(const|export)\b
      scope: storage.modifier.vex
    - match: \b(void|{{type}}|{{context}}|struct)\b
      scope: storage.type.vex
    - match: \b([ifuvp234s](?:\[\])?)?(?=@)
      scope: storage.type.attribute.vex
    - match: \b(\w+)\b(?=\s*\()
      scope: variable.function.vex

    # Numeric constants.
    - match: (?<!\w|\.)((\.[0-9][0-9_]*|[0-9][0-9_]*\.|([0-9]+|[0-9][0-9_]*[0-9])\.[0-9][0-9_]*)f?|([1-9]|0_)[0-9_]*|0)([eE][\+-]?[0-9]+)?(?!\w|\.)
      scope: constant.numeric.dec.vex
    - match: \b(0b[01][01_]*)\b
      scope: constant.numeric.bin.vex
    - match: \b(0+[0-7][0-7_]*)\b
      scope: constant.numeric.oct.vex
    - match: \b(0[xX][0-9a-fA-F][0-9a-fA-F_]*)\b
      scope: constant.numeric.hex.vex

    # Other useful words.
    - match: \b(false|true)\b
      scope: constant.language.vex
    - match: \b(__vex|__vex_major|__vex_minor|__vex_build|__vex_patch|__LINE__|__FILE__|__DATE__|__TIME__)\b
      scope: support.constant.vex


  backticks:
    - match: '`'
      scope: keyword.other.backticks.vex
      push: HScript.sublime-syntax
      with_prototype:
        - match: '`'
          scope: keyword.other.backticks.vex
          pop: true


  continuation:
    - match: (\\)(\s*)$\n
      scope: meta.continuation.vex
      captures:
        1: punctuation.separator.continuation.vex
        2: invalid.illegal.continuation-space.vex


  comment-block:
    - match: /\*
      scope: punctuation.definition.comment.begin.vex
      push:
        - meta_scope: comment.block.vex
        - match: \*/
          scope: punctuation.definition.comment.end.vex
          pop: true
        - match: \b(TODO)\b
          scope: invalid.illegal.todo.vex
        - include: backticks

  comment:
    - include: comment-block
    - match: //
      scope: punctuation.definition.comment.vex
      push:
        - meta_scope: comment.line.vex
        - match: (?<=^|[^\\])\s*\n
          pop: true
        - match: \b(TODO)\b
          scope: invalid.illegal.todo.vex
        - include: continuation
        - include: backticks

  comment-define:
    - include: comment-block

    # Line comment without continuation capabilities.
    - match: //
      scope: punctuation.definition.comment.vex
      push:
        - meta_scope: comment.line.vex
        - match: (?=\n)
          pop: true
        - match: \b(TODO)\b
          scope: invalid.illegal.todo.vex
        - include: backticks


  string:
    - match: (\bR)("(\w+)?\()
      captures:
        1: storage.type.string.raw.vex
        2: punctuation.definition.string.begin.vex
        3: variable.parameter.cppstring-delimiter.vex
      push:
        - meta_scope: string.quoted.vex
        - match: '(\)(\3)")'
          captures:
            1: punctuation.definition.string.end.vex
            2: variable.parameter.cppstring-delimiter.vex
          pop: true

    - match: (\br)?("|')
      captures:
        1: storage.type.string.raw.vex
        2: punctuation.definition.string.begin.vex
      push:
        - meta_scope: string.quoted.vex
        - include: backticks
        - include: continuation
        - match: \\(\d+|[nrt\\"]|x[a-fA-F0-9]{1,8}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
          scope: constant.character.escape.vex
        - match: \%(\%|[\d+]?[cdfgpsx])
          scope: constant.other.placeholder.vex
        - match: '(?<!\\)(\n)'
          scope: invalid.illegal.misquot.vex
          pop: true
        - match: (\2)
          scope: punctuation.definition.string.end.vex
          pop: true


  function:
    - match: \b(?!for(?:each)?)(\w+)\b(?=\s*\(\s*(const|export|{{type}}|\w+)\s+\w)
      scope: entity.name.function.definition.vex

    - match: \b(\w+)\s*(?:\[\])?\s*\b(\w+)\b(?=\s*\(\s*$)
      captures:
        1: storage.type.vex
        2: entity.name.function.definition.vex

    - match: \b(\w+)(?<!return|else)\s*(?:\[\])?\s*\b(\w+)\b(?=\s*\((?:\s*\w+\s+\w+)?)
      captures:
        1: storage.type.vex
        2: entity.name.function.definition.vex


  include:
    - match: ^\s*(#include)\b
      scope: keyword.control.import.vex
      push:
        - meta_scope: meta.preprocessor.include.vex
        - match: '<'
          scope: punctuation.definition.string.begin.vex
          push:
          - meta_scope: string.unquoted.vex
          - match: '>'
            scope: punctuation.definition.string.end.vex
            pop: true
        - match: '"'
          scope: punctuation.definition.string.begin.vex
          push:
          - meta_scope: string.quoted.other.vex
          - match: '"'
            scope: punctuation.definition.string.end.vex
            pop: true
        - match: '$'
          pop: true


  define:
    - match: ^\s*(#define)\b
      scope: keyword.control.import.vex
      push:
        - meta_scope: meta.preprocessor.define.vex
        - match: '(?<=#define)\s+([A-Za-z_]\w*)'
          captures:
            1: entity.name.macro.vex
        - match: '\('
          scope: punctuation.section.group.begin.vex
          push:
          - meta_content_scope: meta.preprocessor.macro.parameters.vex
          - match: '[A-Za-z_]\w*'
            scope: variable.parameter.vex
          - match: ','
            scope: punctuation.separator.vex
          - match: '\)'
            scope: punctuation.section.group.end.vex
            pop: true
        - match: '.'
          push:
            - meta_content_scope: string.unquoted.token-string.vex
            - include: backticks
            - include: comment-define
            - include: continuation
            - match: '##'
              scope: variable.parameter.concat.vex
            - match: '$(?=\n)'
              pop: true
        - match: '(?<!\\)$(?=\n)'
          pop: true
        - include: continuation

    - match: ^\s*(#undef)\s+(\w*)\b
      scope: meta.preprocessor.undef.vex
      captures:
        1: keyword.control.import.vex
        2: entity.name.macro.vex


  # Beginning of "if" group (for clarity).
  if:
    - match: ^\s*(#if)\b
      captures:
        1: keyword.control.import.vex
      push:
        - meta_scope: meta.preprocessor.if.vex
        - match: (?<=#if)\s+(0+)\b
          scope: constant.numeric.vex
          push: if0
        - match: '#endif'
          scope: keyword.control.import.vex
          pop: true
        - match: \b(defined|environment|access|access|strcmp)\b
          scope: support.function.preprocessor.vex
        - include: elif
        - include: else
        - include: main

    - match: ^\s*(#ifn?def)\s+(\w*)\s*$
      captures:
        1: keyword.control.import.vex
        2: entity.name.macro.vex
      push:
        - meta_scope: meta.preprocessor.ifdef.vex
        - match: '#endif'
          scope: keyword.control.import.vex
          pop: true
        - include: main
        - include: elif
        - include: else

  if0:
    - meta_content_scope: comment.disabled.vex
    - match: (?=#elif|#else|#endif)
      pop: true
    - include: if0-recursion

  # Recursively disable nested #ifs and #ifdefs.
  if0-recursion:
    - match: ^\s*#if(?:n?def)?\b.*$
      push:
        - match: ^\s*#endif\b.*$
          pop: true
        - include: if0-recursion

  elif:
    - match: (#elif)\b
      scope: keyword.control.import.vex
      push:
        - meta_scope: meta.preprocessor.elif.vex
        - match: (?<=#elif)\s+(0+)\b
          scope: constant.numeric.vex
          push: if0
        - match: (?=#elif|#else|#endif)
          pop: true
        - match: \b(defined|environment|access|access|strcmp)\b
          scope: support.function.preprocessor.vex
        - include: main

  else:
    - match: (#else)\b
      scope: keyword.control.import.vex
      push:
        - meta_scope: meta.preprocessor.else.vex
        - match: (?=#endif)
          pop: true
        - include: main

  # End of "if" group.


  pragma:
    - match: ^\s*(#pragma)\b
      scope: keyword.control.import.vex
      push:
        - meta_scope: meta.preprocessor.pragma.vex
        - match: '(?<=#pragma)\s+\b(\S+)\b'
          captures:
            1: entity.name.pragma.vex
        - include: main
        - include: continuation
        - match: '(?<=^|[^\\])(?=\n)'
          pop: true
    - match: \b(_Pragma)\b(?=\()
      scope: support.function.pragma.vex
