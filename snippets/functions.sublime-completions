{
    "scope": "source.vex -string -comment -source.hscript",
    "completions": [
        {
            "trigger": "abs(n)",
            "contents": "abs(${1:n})"
        },
        {
            "trigger": "abs(v)",
            "contents": "abs(${1:v})"
        },
        {
            "trigger": "abspath(relpath)",
            "contents": "abspath(${1:relpath})"
        },
        {
            "trigger": "accessframe(frame)",
            "contents": "accessframe(${1:frame})"
        },
        {
            "trigger": "acos(v)",
            "contents": "acos(${1:v})"
        },
        {
            "trigger": "addattrib(geohandle, attribclass, name, defvalue)",
            "contents": "addattrib(${1:geohandle}, ${2:attribclass}, ${3:name}, ${4:defvalue})"
        },
        {
            "trigger": "adddetailattrib(geohandle, name, defvalue)",
            "contents": "adddetailattrib(${1:geohandle}, ${2:name}, ${3:defvalue})"
        },
        {
            "trigger": "adddetailattrib(geohandle, name, defvalue, typeinfo)",
            "contents": "adddetailattrib(${1:geohandle}, ${2:name}, ${3:defvalue}, ${4:typeinfo})"
        },
        {
            "trigger": "addpoint(geohandle, point_number)",
            "contents": "addpoint(${1:geohandle}, ${2:point_number})"
        },
        {
            "trigger": "addpoint(geohandle, pos)",
            "contents": "addpoint(${1:geohandle}, ${2:pos})"
        },
        {
            "trigger": "addpointattrib(geohandle, name, defvalue)",
            "contents": "addpointattrib(${1:geohandle}, ${2:name}, ${3:defvalue})"
        },
        {
            "trigger": "addpointattrib(geohandle, name, defvalue, typeinfo)",
            "contents": "addpointattrib(${1:geohandle}, ${2:name}, ${3:defvalue}, ${4:typeinfo})"
        },
        {
            "trigger": "addprim(geohandle, type)",
            "contents": "addprim(${1:geohandle}, ${2:type})"
        },
        {
            "trigger": "addprim(geohandle, type, pt0)",
            "contents": "addprim(${1:geohandle}, ${2:type}, ${3:pt0})"
        },
        {
            "trigger": "addprim(geohandle, type, pt0, pt1)",
            "contents": "addprim(${1:geohandle}, ${2:type}, ${3:pt0}, ${4:pt1})"
        },
        {
            "trigger": "addprim(geohandle, type, pt0, pt1, pt2)",
            "contents": "addprim(${1:geohandle}, ${2:type}, ${3:pt0}, ${4:pt1}, ${5:pt2})"
        },
        {
            "trigger": "addprim(geohandle, type, pt0, pt1, pt2, pt3)",
            "contents": "addprim(${1:geohandle}, ${2:type}, ${3:pt0}, ${4:pt1}, ${5:pt2}, ${6:pt3})"
        },
        {
            "trigger": "addprim(geohandle, type, points)",
            "contents": "addprim(${1:geohandle}, ${2:type}, ${3:points})"
        },
        {
            "trigger": "addprim(prim_num, geohandle, type, pt0, vertices)",
            "contents": "addprim(${1:prim_num}, ${2:geohandle}, ${3:type}, ${4:pt0}, ${5:vertices})"
        },
        {
            "trigger": "addprim(prim_num, geohandle, type, pt0, pt1, vertices)",
            "contents": "addprim(${1:prim_num}, ${2:geohandle}, ${3:type}, ${4:pt0}, ${5:pt1}, ${6:vertices})"
        },
        {
            "trigger": "addprim(prim_num, geohandle, type, pt0, pt1, pt2, vertices)",
            "contents": "addprim(${1:prim_num}, ${2:geohandle}, ${3:type}, ${4:pt0}, ${5:pt1}, ${6:pt2}, ${7:vertices})"
        },
        {
            "trigger": "addprim(prim_num, geohandle, type, pt0, pt1, pt2, pt3, vertices)",
            "contents": "addprim(${1:prim_num}, ${2:geohandle}, ${3:type}, ${4:pt0}, ${5:pt1}, ${6:pt2}, ${7:pt3}, ${8:vertices})"
        },
        {
            "trigger": "addprim(prim_num, geohandle, type, points, vertices)",
            "contents": "addprim(${1:prim_num}, ${2:geohandle}, ${3:type}, ${4:points}, ${5:vertices})"
        },
        {
            "trigger": "addprimattrib(geohandle, name, defvalue)",
            "contents": "addprimattrib(${1:geohandle}, ${2:name}, ${3:defvalue})"
        },
        {
            "trigger": "addprimattrib(geohandle, name, defvalue, typeinfo)",
            "contents": "addprimattrib(${1:geohandle}, ${2:name}, ${3:defvalue}, ${4:typeinfo})"
        },
        {
            "trigger": "addvariablename(aname, vname)",
            "contents": "addvariablename(${1:aname}, ${2:vname})"
        },
        {
            "trigger": "addvariablename(geohandle, aname, vname)",
            "contents": "addvariablename(${1:geohandle}, ${2:aname}, ${3:vname})"
        },
        {
            "trigger": "addvertex(geohandle, prim_num, point_num)",
            "contents": "addvertex(${1:geohandle}, ${2:prim_num}, ${3:point_num})"
        },
        {
            "trigger": "addvertexattrib(geohandle, name, defvalue)",
            "contents": "addvertexattrib(${1:geohandle}, ${2:name}, ${3:defvalue})"
        },
        {
            "trigger": "addvertexattrib(geohandle, name, defvalue, typeinfo)",
            "contents": "addvertexattrib(${1:geohandle}, ${2:name}, ${3:defvalue}, ${4:typeinfo})"
        },
        {
            "trigger": "addvisualizer(geohandle, op_url)",
            "contents": "addvisualizer(${1:geohandle}, ${2:op_url})"
        },
        {
            "trigger": "agentaddclip(geohandle, prim, clipname, clippath, keepref)",
            "contents": "agentaddclip(${1:geohandle}, ${2:prim}, ${3:clipname}, ${4:clippath}, ${5:keepref})"
        },
        {
            "trigger": "agentchannelnames(geometry, prim)",
            "contents": "agentchannelnames(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentchannelvalue(geometry, prim, channel)",
            "contents": "agentchannelvalue(${1:geometry}, ${2:prim}, ${3:channel})"
        },
        {
            "trigger": "agentchannelvalues(geometry, prim)",
            "contents": "agentchannelvalues(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentclipcatalog(geometry, prim)",
            "contents": "agentclipcatalog(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentclipchannel(geometry, prim, clipname, channel)",
            "contents": "agentclipchannel(${1:geometry}, ${2:prim}, ${3:clipname}, ${4:channel})"
        },
        {
            "trigger": "agentclipchannelnames(geometry, prim, clipname)",
            "contents": "agentclipchannelnames(${1:geometry}, ${2:prim}, ${3:clipname})"
        },
        {
            "trigger": "agentcliplength(geometry, prim, clipname)",
            "contents": "agentcliplength(${1:geometry}, ${2:prim}, ${3:clipname})"
        },
        {
            "trigger": "agentclipnames(geometry, prim)",
            "contents": "agentclipnames(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentclipsample(geometry, prim, clipname, time, channel_index)",
            "contents": "agentclipsample(${1:geometry}, ${2:prim}, ${3:clipname}, ${4:time}, ${5:channel_index})"
        },
        {
            "trigger": "agentclipsample(geometry, prim, clipname, time, channel)",
            "contents": "agentclipsample(${1:geometry}, ${2:prim}, ${3:clipname}, ${4:time}, ${5:channel})"
        },
        {
            "trigger": "agentclipsamplelocal(geometry, prim, clipname, time)",
            "contents": "agentclipsamplelocal(${1:geometry}, ${2:prim}, ${3:clipname}, ${4:time})"
        },
        {
            "trigger": "agentclipsamplelocal(geometry, prim, clipname, time, transform)",
            "contents": "agentclipsamplelocal(${1:geometry}, ${2:prim}, ${3:clipname}, ${4:time}, ${5:transform})"
        },
        {
            "trigger": "agentclipsamplerate(geometry, prim, clipname)",
            "contents": "agentclipsamplerate(${1:geometry}, ${2:prim}, ${3:clipname})"
        },
        {
            "trigger": "agentclipsampleworld(geometry, prim, clipname, time)",
            "contents": "agentclipsampleworld(${1:geometry}, ${2:prim}, ${3:clipname}, ${4:time})"
        },
        {
            "trigger": "agentclipsampleworld(geometry, prim, clipname, time, transform)",
            "contents": "agentclipsampleworld(${1:geometry}, ${2:prim}, ${3:clipname}, ${4:time}, ${5:transform})"
        },
        {
            "trigger": "agentclipstarttime(geometry, prim, clipname)",
            "contents": "agentclipstarttime(${1:geometry}, ${2:prim}, ${3:clipname})"
        },
        {
            "trigger": "agentcliptimes(geometry, prim)",
            "contents": "agentcliptimes(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentcliptransformgroups(geometry, prim)",
            "contents": "agentcliptransformgroups(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentclipweights(geometry, prim)",
            "contents": "agentclipweights(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentcollisionlayer(geometry, prim)",
            "contents": "agentcollisionlayer(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentcurrentlayer(geometry, prim)",
            "contents": "agentcurrentlayer(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentfindtransformgroup(geometry, prim, transformgroup)",
            "contents": "agentfindtransformgroup(${1:geometry}, ${2:prim}, ${3:transformgroup})"
        },
        {
            "trigger": "agentlayerbindings(geometry, prim, layername, shapetype)",
            "contents": "agentlayerbindings(${1:geometry}, ${2:prim}, ${3:layername}, ${4:shapetype})"
        },
        {
            "trigger": "agentlayers(geometry, prim)",
            "contents": "agentlayers(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentlayershapes(geometry, prim, layername, shapetype)",
            "contents": "agentlayershapes(${1:geometry}, ${2:prim}, ${3:layername}, ${4:shapetype})"
        },
        {
            "trigger": "agentlayershapes(geometry, prim, layername, transform)",
            "contents": "agentlayershapes(${1:geometry}, ${2:prim}, ${3:layername}, ${4:transform})"
        },
        {
            "trigger": "agentlocaltransform(geometry, prim, transform)",
            "contents": "agentlocaltransform(${1:geometry}, ${2:prim}, ${3:transform})"
        },
        {
            "trigger": "agentlocaltransforms(geometry, prim)",
            "contents": "agentlocaltransforms(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agentrigchildren(geometry, prim, transform)",
            "contents": "agentrigchildren(${1:geometry}, ${2:prim}, ${3:transform})"
        },
        {
            "trigger": "agentrigfind(geometry, prim, transformname)",
            "contents": "agentrigfind(${1:geometry}, ${2:prim}, ${3:transformname})"
        },
        {
            "trigger": "agentrigfindchannel(geometry, prim, channelname)",
            "contents": "agentrigfindchannel(${1:geometry}, ${2:prim}, ${3:channelname})"
        },
        {
            "trigger": "agentrigparent(geometry, prim, transform)",
            "contents": "agentrigparent(${1:geometry}, ${2:prim}, ${3:transform})"
        },
        {
            "trigger": "agentsolvefbik(geometry, outgeo, prim, targets, targetxforms, xformgroup, iters)",
            "contents": "agentsolvefbik(${1:geometry}, ${2:outgeo}, ${3:prim}, ${4:targets}, ${5:targetxforms}, ${6:xformgroup}, ${7:iters})"
        },
        {
            "trigger": "agentsolvefbik(geometry, outgeo, prim, targets, targetxforms, xformgroup, iters, tolerance, pinroot)",
            "contents": "agentsolvefbik(${1:geometry}, ${2:outgeo}, ${3:prim}, ${4:targets}, ${5:targetxforms}, ${6:xformgroup}, ${7:iters}, ${8:tolerance}, ${9:pinroot})"
        },
        {
            "trigger": "agentsolvefbik(geometry, outgeo, prim, targets, targetxforms, xformgroup, iters, tolerance, pinroot, targetweights, targetpriorities, targetdepths)",
            "contents": "agentsolvefbik(${1:geometry}, ${2:outgeo}, ${3:prim}, ${4:targets}, ${5:targetxforms}, ${6:xformgroup}, ${7:iters}, ${8:tolerance}, ${9:pinroot}, ${10:targetweights}, ${11:targetpriorities}, ${12:targetdepths})"
        },
        {
            "trigger": "agentsolvefbik(geometry, outgeo, prim, targets, targetxforms, xformgroup, iters, tolerance, pinroot, targetweights, targetpriorities, targetdepths, targettypes, targetoffsets)",
            "contents": "agentsolvefbik(${1:geometry}, ${2:outgeo}, ${3:prim}, ${4:targets}, ${5:targetxforms}, ${6:xformgroup}, ${7:iters}, ${8:tolerance}, ${9:pinroot}, ${10:targetweights}, ${11:targetpriorities}, ${12:targetdepths}, ${13:targettypes}, ${14:targetoffsets})"
        },
        {
            "trigger": "agentsolvefbik(geometry, outgeo, prim, targets, targetxforms, xformgroup, iters, tolerance, pinroot, targetweights, targetpriorities, targetdepths, goalxformattrib, constrainedxformattrib, jointlimitsattrib)",
            "contents": "agentsolvefbik(${1:geometry}, ${2:outgeo}, ${3:prim}, ${4:targets}, ${5:targetxforms}, ${6:xformgroup}, ${7:iters}, ${8:tolerance}, ${9:pinroot}, ${10:targetweights}, ${11:targetpriorities}, ${12:targetdepths}, ${13:goalxformattrib}, ${14:constrainedxformattrib}, ${15:jointlimitsattrib})"
        },
        {
            "trigger": "agentsolvefbik(geometry, outgeo, prim, targets, targetxforms, xformgroup, iters, tolerance, pinroot, targetweights, targetpriorities, targetdepths, targettypes, targetoffsets, goalxformattrib, constrainedxformattrib, jointlimitsattrib)",
            "contents": "agentsolvefbik(${1:geometry}, ${2:outgeo}, ${3:prim}, ${4:targets}, ${5:targetxforms}, ${6:xformgroup}, ${7:iters}, ${8:tolerance}, ${9:pinroot}, ${10:targetweights}, ${11:targetpriorities}, ${12:targetdepths}, ${13:targettypes}, ${14:targetoffsets}, ${15:goalxformattrib}, ${16:constrainedxformattrib}, ${17:jointlimitsattrib})"
        },
        {
            "trigger": "agenttransformcount(geometry, prim)",
            "contents": "agenttransformcount(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agenttransformgroupmember(geometry, prim, transformgroup, transform)",
            "contents": "agenttransformgroupmember(${1:geometry}, ${2:prim}, ${3:transformgroup}, ${4:transform})"
        },
        {
            "trigger": "agenttransformgroupmember(geometry, prim, transformgroupidx, transform)",
            "contents": "agenttransformgroupmember(${1:geometry}, ${2:prim}, ${3:transformgroupidx}, ${4:transform})"
        },
        {
            "trigger": "agenttransformgroupmemberchannel(geometry, prim, transformgroupidx, channel)",
            "contents": "agenttransformgroupmemberchannel(${1:geometry}, ${2:prim}, ${3:transformgroupidx}, ${4:channel})"
        },
        {
            "trigger": "agenttransformgroups(geometry, prim)",
            "contents": "agenttransformgroups(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agenttransformgroupweight(geometry, prim, transformgroup, transform)",
            "contents": "agenttransformgroupweight(${1:geometry}, ${2:prim}, ${3:transformgroup}, ${4:transform})"
        },
        {
            "trigger": "agenttransformnames(geometry, prim)",
            "contents": "agenttransformnames(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "agenttransformtolocal(geometry, prim, transforms)",
            "contents": "agenttransformtolocal(${1:geometry}, ${2:prim}, ${3:transforms})"
        },
        {
            "trigger": "agenttransformtoworld(geometry, prim, transforms)",
            "contents": "agenttransformtoworld(${1:geometry}, ${2:prim}, ${3:transforms})"
        },
        {
            "trigger": "agentworldtransform(geometry, prim, transform)",
            "contents": "agentworldtransform(${1:geometry}, ${2:prim}, ${3:transform})"
        },
        {
            "trigger": "agentworldtransforms(geometry, prim)",
            "contents": "agentworldtransforms(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "albedo(b, ...)",
            "contents": "albedo(${1:b}, ${2:...})"
        },
        {
            "trigger": "albedo(b, mask, ...)",
            "contents": "albedo(${1:b}, ${2:mask}, ${3:...})"
        },
        {
            "trigger": "albedo(b, viewer, ...)",
            "contents": "albedo(${1:b}, ${2:viewer}, ${3:...})"
        },
        {
            "trigger": "albedo(b, viewer, mask, ...)",
            "contents": "albedo(${1:b}, ${2:viewer}, ${3:mask}, ${4:...})"
        },
        {
            "trigger": "alphaname()",
            "contents": "alphaname()"
        },
        {
            "trigger": "ambient(...)",
            "contents": "ambient(${1:...})"
        },
        {
            "trigger": "anoise(pos)",
            "contents": "anoise(${1:pos})"
        },
        {
            "trigger": "anoise(pos, turbulence, rough, atten)",
            "contents": "anoise(${1:pos}, ${2:turbulence}, ${3:rough}, ${4:atten})"
        },
        {
            "trigger": "anoise(pos, periodX, periodY, periodZ)",
            "contents": "anoise(${1:pos}, ${2:periodX}, ${3:periodY}, ${4:periodZ})"
        },
        {
            "trigger": "anoise(pos, periodX, periodY, periodZ, turbulence, rough, atten)",
            "contents": "anoise(${1:pos}, ${2:periodX}, ${3:periodY}, ${4:periodZ}, ${5:turbulence}, ${6:rough}, ${7:atten})"
        },
        {
            "trigger": "append(array, value)",
            "contents": "append(${1:array}, ${2:value})"
        },
        {
            "trigger": "append(array, values)",
            "contents": "append(${1:array}, ${2:values})"
        },
        {
            "trigger": "area(p, ...)",
            "contents": "area(${1:p}, ${2:...})"
        },
        {
            "trigger": "argsort(value)",
            "contents": "argsort(${1:value})"
        },
        {
            "trigger": "array(...)",
            "contents": "array(${1:...})"
        },
        {
            "trigger": "ashikhmin(exponentx, exponenty, framex, framey, ...)",
            "contents": "ashikhmin(${1:exponentx}, ${2:exponenty}, ${3:framex}, ${4:framey}, ${5:...})"
        },
        {
            "trigger": "ashikhmin(nml, exponentx, exponenty, framex, framey, ...)",
            "contents": "ashikhmin(${1:nml}, ${2:exponentx}, ${3:exponenty}, ${4:framex}, ${5:framey}, ${6:...})"
        },
        {
            "trigger": "asin(n)",
            "contents": "asin(${1:n})"
        },
        {
            "trigger": "assert_enabled()",
            "contents": "assert_enabled()"
        },
        {
            "trigger": "assign(c1, c2, source)",
            "contents": "assign(${1:c1}, ${2:c2}, ${3:source})"
        },
        {
            "trigger": "assign(c1, c2, c3, source)",
            "contents": "assign(${1:c1}, ${2:c2}, ${3:c3}, ${4:source})"
        },
        {
            "trigger": "assign(c1, c2, c3, c4, source)",
            "contents": "assign(${1:c1}, ${2:c2}, ${3:c3}, ${4:c4}, ${5:source})"
        },
        {
            "trigger": "assign(c1, c2, c3, c4, c5, c6, c7, c8, c9, source)",
            "contents": "assign(${1:c1}, ${2:c2}, ${3:c3}, ${4:c4}, ${5:c5}, ${6:c6}, ${7:c7}, ${8:c8}, ${9:c9}, ${10:source})"
        },
        {
            "trigger": "assign(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, source)",
            "contents": "assign(${1:c1}, ${2:c2}, ${3:c3}, ${4:c4}, ${5:c5}, ${6:c6}, ${7:c7}, ${8:c8}, ${9:c9}, ${10:c10}, ${11:c11}, ${12:c12}, ${13:c13}, ${14:c14}, ${15:c15}, ${16:c16}, ${17:source})"
        },
        {
            "trigger": "atan(n)",
            "contents": "atan(${1:n})"
        },
        {
            "trigger": "atan(y, x)",
            "contents": "atan(${1:y}, ${2:x})"
        },
        {
            "trigger": "atan(v)",
            "contents": "atan(${1:v})"
        },
        {
            "trigger": "atan2(y, x)",
            "contents": "atan2(${1:y}, ${2:x})"
        },
        {
            "trigger": "atof(str)",
            "contents": "atof(${1:str})"
        },
        {
            "trigger": "atoi(str)",
            "contents": "atoi(${1:str})"
        },
        {
            "trigger": "atoi(str, base)",
            "contents": "atoi(${1:str}, ${2:base})"
        },
        {
            "trigger": "atten(attenuation, distance)",
            "contents": "atten(${1:attenuation}, ${2:distance})"
        },
        {
            "trigger": "attrib(geometry, attribclass, name, elemnum)",
            "contents": "attrib(${1:geometry}, ${2:attribclass}, ${3:name}, ${4:elemnum})"
        },
        {
            "trigger": "attribclass(geometry, attribute_name)",
            "contents": "attribclass(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "attribdataid(geometry, attribclass, attribute_name)",
            "contents": "attribdataid(${1:geometry}, ${2:attribclass}, ${3:attribute_name})"
        },
        {
            "trigger": "attribsize(geometry, attribclass, attribute_name)",
            "contents": "attribsize(${1:geometry}, ${2:attribclass}, ${3:attribute_name})"
        },
        {
            "trigger": "attribtype(geometry, attribclass, attribute_name)",
            "contents": "attribtype(${1:geometry}, ${2:attribclass}, ${3:attribute_name})"
        },
        {
            "trigger": "attribtypeinfo(geometry, attribclass, attribute_name)",
            "contents": "attribtypeinfo(${1:geometry}, ${2:attribclass}, ${3:attribute_name})"
        },
        {
            "trigger": "avg(a)",
            "contents": "avg(${1:a})"
        },
        {
            "trigger": "avg(a, b, ...)",
            "contents": "avg(${1:a}, ${2:b}, ${3:...})"
        },
        {
            "trigger": "avg(v)",
            "contents": "avg(${1:v})"
        },
        {
            "trigger": "avg(arr)",
            "contents": "avg(${1:arr})"
        },
        {
            "trigger": "binput(u, v, ...)",
            "contents": "binput(${1:u}, ${2:v}, ${3:...})"
        },
        {
            "trigger": "binput(comp, u, v, ...)",
            "contents": "binput(${1:comp}, ${2:u}, ${3:v}, ${4:...})"
        },
        {
            "trigger": "binput(opinput, plane, u, v, ...)",
            "contents": "binput(${1:opinput}, ${2:plane}, ${3:u}, ${4:v}, ${5:...})"
        },
        {
            "trigger": "binput(opinput, plane, comp, u, v, ...)",
            "contents": "binput(${1:opinput}, ${2:plane}, ${3:comp}, ${4:u}, ${5:v}, ${6:...})"
        },
        {
            "trigger": "binput(opinput, plane, array_index, comp, u, v, frame, ...)",
            "contents": "binput(${1:opinput}, ${2:plane}, ${3:array_index}, ${4:comp}, ${5:u}, ${6:v}, ${7:frame}, ${8:...})"
        },
        {
            "trigger": "binput(opinput, plane, array_index, u, v, frame, ...)",
            "contents": "binput(${1:opinput}, ${2:plane}, ${3:array_index}, ${4:u}, ${5:v}, ${6:frame}, ${7:...})"
        },
        {
            "trigger": "blackbody(temperature, luminance)",
            "contents": "blackbody(${1:temperature}, ${2:luminance})"
        },
        {
            "trigger": "blinn(exponent, ...)",
            "contents": "blinn(${1:exponent}, ${2:...})"
        },
        {
            "trigger": "blinn(nml, exponent, ...)",
            "contents": "blinn(${1:nml}, ${2:exponent}, ${3:...})"
        },
        {
            "trigger": "blinn(nml, V, roughness, ...)",
            "contents": "blinn(${1:nml}, ${2:V}, ${3:roughness}, ${4:...})"
        },
        {
            "trigger": "blinnBRDF(L, N, V, rough)",
            "contents": "blinnBRDF(${1:L}, ${2:N}, ${3:V}, ${4:rough})"
        },
        {
            "trigger": "bouncelabel(mask)",
            "contents": "bouncelabel(${1:mask})"
        },
        {
            "trigger": "bouncemask(labels)",
            "contents": "bouncemask(${1:labels})"
        },
        {
            "trigger": "bumpname()",
            "contents": "bumpname()"
        },
        {
            "trigger": "cbrt(n)",
            "contents": "cbrt(${1:n})"
        },
        {
            "trigger": "cbrt(v)",
            "contents": "cbrt(${1:v})"
        },
        {
            "trigger": "ceil(n)",
            "contents": "ceil(${1:n})"
        },
        {
            "trigger": "ceil(v)",
            "contents": "ceil(${1:v})"
        },
        {
            "trigger": "ch(channel)",
            "contents": "ch(${1:channel})"
        },
        {
            "trigger": "ch(channel, time_in_sec)",
            "contents": "ch(${1:channel}, ${2:time_in_sec})"
        },
        {
            "trigger": "ch(op_id, parm_index, vector_index)",
            "contents": "ch(${1:op_id}, ${2:parm_index}, ${3:vector_index})"
        },
        {
            "trigger": "ch(op_id, parm_index, vector_index, time_in_sec)",
            "contents": "ch(${1:op_id}, ${2:parm_index}, ${3:vector_index}, ${4:time_in_sec})"
        },
        {
            "trigger": "ch2(channel)",
            "contents": "ch2(${1:channel})"
        },
        {
            "trigger": "ch2(channel, time)",
            "contents": "ch2(${1:channel}, ${2:time})"
        },
        {
            "trigger": "ch3(channel)",
            "contents": "ch3(${1:channel})"
        },
        {
            "trigger": "ch3(channel, time)",
            "contents": "ch3(${1:channel}, ${2:time})"
        },
        {
            "trigger": "ch4(channel)",
            "contents": "ch4(${1:channel})"
        },
        {
            "trigger": "ch4(channel, time)",
            "contents": "ch4(${1:channel}, ${2:time})"
        },
        {
            "trigger": "chadd(channel_names)",
            "contents": "chadd(${1:channel_names})"
        },
        {
            "trigger": "chattr(attrname, success)",
            "contents": "chattr(${1:attrname}, ${2:success})"
        },
        {
            "trigger": "chattr(opinput, attrname, success)",
            "contents": "chattr(${1:opinput}, ${2:attrname}, ${3:success})"
        },
        {
            "trigger": "chattr(attrname, channel, success)",
            "contents": "chattr(${1:attrname}, ${2:channel}, ${3:success})"
        },
        {
            "trigger": "chattr(opinput, attrname, channel, success)",
            "contents": "chattr(${1:opinput}, ${2:attrname}, ${3:channel}, ${4:success})"
        },
        {
            "trigger": "chattr(attrname, channel, sample, success)",
            "contents": "chattr(${1:attrname}, ${2:channel}, ${3:sample}, ${4:success})"
        },
        {
            "trigger": "chattr(opinput, attrname, channel, sample, success)",
            "contents": "chattr(${1:opinput}, ${2:attrname}, ${3:channel}, ${4:sample}, ${5:success})"
        },
        {
            "trigger": "chattr(attrclass, attrname, channel, sample, success)",
            "contents": "chattr(${1:attrclass}, ${2:attrname}, ${3:channel}, ${4:sample}, ${5:success})"
        },
        {
            "trigger": "chattr(opinput, attribclass, attrname, channel, sample, success)",
            "contents": "chattr(${1:opinput}, ${2:attribclass}, ${3:attrname}, ${4:channel}, ${5:sample}, ${6:success})"
        },
        {
            "trigger": "chattrnames(opinput, attribclass)",
            "contents": "chattrnames(${1:opinput}, ${2:attribclass})"
        },
        {
            "trigger": "chattrnames(attrclass)",
            "contents": "chattrnames(${1:attrclass})"
        },
        {
            "trigger": "chdict(channel)",
            "contents": "chdict(${1:channel})"
        },
        {
            "trigger": "chend(opinput)",
            "contents": "chend(${1:opinput})"
        },
        {
            "trigger": "chendf(opinput)",
            "contents": "chendf(${1:opinput})"
        },
        {
            "trigger": "chendt(opinput)",
            "contents": "chendt(${1:opinput})"
        },
        {
            "trigger": "chexpr(channel, new_expr_function)",
            "contents": "chexpr(${1:channel}, ${2:new_expr_function})"
        },
        {
            "trigger": "chexprf(channel, new_expr_function, frame)",
            "contents": "chexprf(${1:channel}, ${2:new_expr_function}, ${3:frame})"
        },
        {
            "trigger": "chexprt(channel, new_expr_function, time_in_seconds)",
            "contents": "chexprt(${1:channel}, ${2:new_expr_function}, ${3:time_in_seconds})"
        },
        {
            "trigger": "chf(channel)",
            "contents": "chf(${1:channel})"
        },
        {
            "trigger": "chf(channel, time_in_sec)",
            "contents": "chf(${1:channel}, ${2:time_in_sec})"
        },
        {
            "trigger": "chf(op_id, parm_index, vector_index)",
            "contents": "chf(${1:op_id}, ${2:parm_index}, ${3:vector_index})"
        },
        {
            "trigger": "chf(op_id, parm_index, vector_index, time_in_sec)",
            "contents": "chf(${1:op_id}, ${2:parm_index}, ${3:vector_index}, ${4:time_in_sec})"
        },
        {
            "trigger": "chi(channel)",
            "contents": "chi(${1:channel})"
        },
        {
            "trigger": "chi(channel, time)",
            "contents": "chi(${1:channel}, ${2:time})"
        },
        {
            "trigger": "chid(channel_path, op_id, parm_index, vector_index)",
            "contents": "chid(${1:channel_path}, ${2:op_id}, ${3:parm_index}, ${4:vector_index})"
        },
        {
            "trigger": "chid(op_path, channel_name, op_id, parm_index, vector_index)",
            "contents": "chid(${1:op_path}, ${2:channel_name}, ${3:op_id}, ${4:parm_index}, ${5:vector_index})"
        },
        {
            "trigger": "chid(op_id, parm_index, vector_index)",
            "contents": "chid(${1:op_id}, ${2:parm_index}, ${3:vector_index})"
        },
        {
            "trigger": "chindex(opinput, name)",
            "contents": "chindex(${1:opinput}, ${2:name})"
        },
        {
            "trigger": "chindex(name)",
            "contents": "chindex(${1:name})"
        },
        {
            "trigger": "chindex(names)",
            "contents": "chindex(${1:names})"
        },
        {
            "trigger": "chinput(channel_index, sample)",
            "contents": "chinput(${1:channel_index}, ${2:sample})"
        },
        {
            "trigger": "chinput(opinput, channel_index, sample)",
            "contents": "chinput(${1:opinput}, ${2:channel_index}, ${3:sample})"
        },
        {
            "trigger": "chinput(channel_name, sample)",
            "contents": "chinput(${1:channel_name}, ${2:sample})"
        },
        {
            "trigger": "chinput(opinput, channel_name, sample)",
            "contents": "chinput(${1:opinput}, ${2:channel_name}, ${3:sample})"
        },
        {
            "trigger": "chinput(channel_index, sample, t, r, s)",
            "contents": "chinput(${1:channel_index}, ${2:sample}, ${3:t}, ${4:r}, ${5:s})"
        },
        {
            "trigger": "chinput(opinput, channel_index, sample, t, r, s)",
            "contents": "chinput(${1:opinput}, ${2:channel_index}, ${3:sample}, ${4:t}, ${5:r}, ${6:s})"
        },
        {
            "trigger": "chinput(channel_name, sample, t, r, s)",
            "contents": "chinput(${1:channel_name}, ${2:sample}, ${3:t}, ${4:r}, ${5:s})"
        },
        {
            "trigger": "chinput(opinput, channel_name, sample, t, r, s)",
            "contents": "chinput(${1:opinput}, ${2:channel_name}, ${3:sample}, ${4:t}, ${5:r}, ${6:s})"
        },
        {
            "trigger": "chinputlimits(opinput, channel, channel_min, channel_max)",
            "contents": "chinputlimits(${1:opinput}, ${2:channel}, ${3:channel_min}, ${4:channel_max})"
        },
        {
            "trigger": "chname(plane_index, chindex)",
            "contents": "chname(${1:plane_index}, ${2:chindex})"
        },
        {
            "trigger": "chname(channel_index)",
            "contents": "chname(${1:channel_index})"
        },
        {
            "trigger": "chname(opinput, channel_index)",
            "contents": "chname(${1:opinput}, ${2:channel_index})"
        },
        {
            "trigger": "chnames()",
            "contents": "chnames()"
        },
        {
            "trigger": "chnames(opinput)",
            "contents": "chnames(${1:opinput})"
        },
        {
            "trigger": "chnumchan()",
            "contents": "chnumchan()"
        },
        {
            "trigger": "chnumchan(opinput)",
            "contents": "chnumchan(${1:opinput})"
        },
        {
            "trigger": "chop(filename, channel, sample)",
            "contents": "chop(${1:filename}, ${2:channel}, ${3:sample})"
        },
        {
            "trigger": "choplocal(filename, channel, sample)",
            "contents": "choplocal(${1:filename}, ${2:channel}, ${3:sample})"
        },
        {
            "trigger": "choplocalt(filename, channel, sample, time)",
            "contents": "choplocalt(${1:filename}, ${2:channel}, ${3:sample}, ${4:time})"
        },
        {
            "trigger": "chopt(filename, channel, sample, time)",
            "contents": "chopt(${1:filename}, ${2:channel}, ${3:sample}, ${4:time})"
        },
        {
            "trigger": "chp(channel)",
            "contents": "chp(${1:channel})"
        },
        {
            "trigger": "chp(channel, time)",
            "contents": "chp(${1:channel}, ${2:time})"
        },
        {
            "trigger": "chr(value)",
            "contents": "chr(${1:value})"
        },
        {
            "trigger": "chramp(channel, ramppos)",
            "contents": "chramp(${1:channel}, ${2:ramppos})"
        },
        {
            "trigger": "chramp(channel, ramppos, time)",
            "contents": "chramp(${1:channel}, ${2:ramppos}, ${3:time})"
        },
        {
            "trigger": "chrampderiv(channel, ramppos)",
            "contents": "chrampderiv(${1:channel}, ${2:ramppos})"
        },
        {
            "trigger": "chrampderiv(channel, ramppos, time)",
            "contents": "chrampderiv(${1:channel}, ${2:ramppos}, ${3:time})"
        },
        {
            "trigger": "chrate()",
            "contents": "chrate()"
        },
        {
            "trigger": "chrate(opinput)",
            "contents": "chrate(${1:opinput})"
        },
        {
            "trigger": "chreadbuf(index)",
            "contents": "chreadbuf(${1:index})"
        },
        {
            "trigger": "chremove(channel_index)",
            "contents": "chremove(${1:channel_index})"
        },
        {
            "trigger": "chremove(channel_indices)",
            "contents": "chremove(${1:channel_indices})"
        },
        {
            "trigger": "chremove(channel_name)",
            "contents": "chremove(${1:channel_name})"
        },
        {
            "trigger": "chremove(channel_names)",
            "contents": "chremove(${1:channel_names})"
        },
        {
            "trigger": "chremoveattr(attrclass, attrname)",
            "contents": "chremoveattr(${1:attrclass}, ${2:attrname})"
        },
        {
            "trigger": "chremoveattr(attrclass, attrnames)",
            "contents": "chremoveattr(${1:attrclass}, ${2:attrnames})"
        },
        {
            "trigger": "chremoveattr(attrname)",
            "contents": "chremoveattr(${1:attrname})"
        },
        {
            "trigger": "chremoveattr(attrnames)",
            "contents": "chremoveattr(${1:attrnames})"
        },
        {
            "trigger": "chrename(channel_index, new_name)",
            "contents": "chrename(${1:channel_index}, ${2:new_name})"
        },
        {
            "trigger": "chrename(channel_name, new_name)",
            "contents": "chrename(${1:channel_name}, ${2:new_name})"
        },
        {
            "trigger": "chresizebuf(size)",
            "contents": "chresizebuf(${1:size})"
        },
        {
            "trigger": "chs(channel)",
            "contents": "chs(${1:channel})"
        },
        {
            "trigger": "chs(channel, time)",
            "contents": "chs(${1:channel}, ${2:time})"
        },
        {
            "trigger": "chsetattr(attrclass, attrname, channel, sample, value)",
            "contents": "chsetattr(${1:attrclass}, ${2:attrname}, ${3:channel}, ${4:sample}, ${5:value})"
        },
        {
            "trigger": "chsetattr(attrname, channel, sample, value)",
            "contents": "chsetattr(${1:attrname}, ${2:channel}, ${3:sample}, ${4:value})"
        },
        {
            "trigger": "chsetlength(clip_length)",
            "contents": "chsetlength(${1:clip_length})"
        },
        {
            "trigger": "chsetrate(clip_rate)",
            "contents": "chsetrate(${1:clip_rate})"
        },
        {
            "trigger": "chsetstart(start)",
            "contents": "chsetstart(${1:start})"
        },
        {
            "trigger": "chsop(channel)",
            "contents": "chsop(${1:channel})"
        },
        {
            "trigger": "chsop(channel, time)",
            "contents": "chsop(${1:channel}, ${2:time})"
        },
        {
            "trigger": "chsraw(channel)",
            "contents": "chsraw(${1:channel})"
        },
        {
            "trigger": "chstart()",
            "contents": "chstart()"
        },
        {
            "trigger": "chstart(opinput)",
            "contents": "chstart(${1:opinput})"
        },
        {
            "trigger": "chstartf()",
            "contents": "chstartf()"
        },
        {
            "trigger": "chstartf(opinput)",
            "contents": "chstartf(${1:opinput})"
        },
        {
            "trigger": "chstartt()",
            "contents": "chstartt()"
        },
        {
            "trigger": "chstartt(opinput)",
            "contents": "chstartt(${1:opinput})"
        },
        {
            "trigger": "chu(channel)",
            "contents": "chu(${1:channel})"
        },
        {
            "trigger": "chu(channel, time)",
            "contents": "chu(${1:channel}, ${2:time})"
        },
        {
            "trigger": "chv(channel)",
            "contents": "chv(${1:channel})"
        },
        {
            "trigger": "chv(channel, time)",
            "contents": "chv(${1:channel}, ${2:time})"
        },
        {
            "trigger": "chv(opid, pid)",
            "contents": "chv(${1:opid}, ${2:pid})"
        },
        {
            "trigger": "chv(opid, pid, time)",
            "contents": "chv(${1:opid}, ${2:pid}, ${3:time})"
        },
        {
            "trigger": "chwritebuf(index, value)",
            "contents": "chwritebuf(${1:index}, ${2:value})"
        },
        {
            "trigger": "chwritebuf(index, t, r, s)",
            "contents": "chwritebuf(${1:index}, ${2:t}, ${3:r}, ${4:s})"
        },
        {
            "trigger": "cinput(u, v, ...)",
            "contents": "cinput(${1:u}, ${2:v}, ${3:...})"
        },
        {
            "trigger": "cinput(component, u, v, ...)",
            "contents": "cinput(${1:component}, ${2:u}, ${3:v}, ${4:...})"
        },
        {
            "trigger": "cinput(opinput, planeindex, u, v, ...)",
            "contents": "cinput(${1:opinput}, ${2:planeindex}, ${3:u}, ${4:v}, ${5:...})"
        },
        {
            "trigger": "cinput(opinput, planeindex, component, u, v, ...)",
            "contents": "cinput(${1:opinput}, ${2:planeindex}, ${3:component}, ${4:u}, ${5:v}, ${6:...})"
        },
        {
            "trigger": "cinput(opinput, planeindex, arrayindex, u, v, frame, ...)",
            "contents": "cinput(${1:opinput}, ${2:planeindex}, ${3:arrayindex}, ${4:u}, ${5:v}, ${6:frame}, ${7:...})"
        },
        {
            "trigger": "cinput(opinput, planeindex, arrayindex, component, u, v, frame, ...)",
            "contents": "cinput(${1:opinput}, ${2:planeindex}, ${3:arrayindex}, ${4:component}, ${5:u}, ${6:v}, ${7:frame}, ${8:...})"
        },
        {
            "trigger": "ckspline(t, value, pos, ...)",
            "contents": "ckspline(${1:t}, ${2:value}, ${3:pos}, ${4:...})"
        },
        {
            "trigger": "clamp(value, min, max)",
            "contents": "clamp(${1:value}, ${2:min}, ${3:max})"
        },
        {
            "trigger": "clip(result, p0, p1, plane)",
            "contents": "clip(${1:result}, ${2:p0}, ${3:p1}, ${4:plane})"
        },
        {
            "trigger": "clip(result, p0, p1, min, max)",
            "contents": "clip(${1:result}, ${2:p0}, ${3:p1}, ${4:min}, ${5:max})"
        },
        {
            "trigger": "colormap(filename, uvw, ...)",
            "contents": "colormap(${1:filename}, ${2:uvw}, ${3:...})"
        },
        {
            "trigger": "colormap(filename, u, v, ...)",
            "contents": "colormap(${1:filename}, ${2:u}, ${3:v}, ${4:...})"
        },
        {
            "trigger": "colormap(filename, uv, du, dv, samples, ...)",
            "contents": "colormap(${1:filename}, ${2:uv}, ${3:du}, ${4:dv}, ${5:samples}, ${6:...})"
        },
        {
            "trigger": "colormap(filename, uv0, uv1, uv2, uv3, ...)",
            "contents": "colormap(${1:filename}, ${2:uv0}, ${3:uv1}, ${4:uv2}, ${5:uv3}, ${6:...})"
        },
        {
            "trigger": "colormap(filename, uv0, uv1, uv2, uv3, samples, ...)",
            "contents": "colormap(${1:filename}, ${2:uv0}, ${3:uv1}, ${4:uv2}, ${5:uv3}, ${6:samples}, ${7:...})"
        },
        {
            "trigger": "colormap(filename, u0, v0, u1, v1, u2, v2, u3, v3, samples, ...)",
            "contents": "colormap(${1:filename}, ${2:u0}, ${3:v0}, ${4:u1}, ${5:v1}, ${6:u2}, ${7:v2}, ${8:u3}, ${9:v3}, ${10:samples}, ${11:...})"
        },
        {
            "trigger": "colorname()",
            "contents": "colorname()"
        },
        {
            "trigger": "combinelocaltransform(local, parent_world, parent_local, scale_inherit_mode)",
            "contents": "combinelocaltransform(${1:local}, ${2:parent_world}, ${3:parent_local}, ${4:scale_inherit_mode})"
        },
        {
            "trigger": "combinelocaltransform(local, parent_world, parent_local, scale_inherit_mode, effective_local_transform)",
            "contents": "combinelocaltransform(${1:local}, ${2:parent_world}, ${3:parent_local}, ${4:scale_inherit_mode}, ${5:effective_local_transform})"
        },
        {
            "trigger": "computenormal(P, ...)",
            "contents": "computenormal(${1:P}, ${2:...})"
        },
        {
            "trigger": "computenormal(P, N, Ng, ...)",
            "contents": "computenormal(${1:P}, ${2:N}, ${3:Ng}, ${4:...})"
        },
        {
            "trigger": "computenormal(i)",
            "contents": "computenormal(${1:i})"
        },
        {
            "trigger": "concat(s1, s2, ...)",
            "contents": "concat(${1:s1}, ${2:s2}, ${3:...})"
        },
        {
            "trigger": "cone(normal, dir, angle, ...)",
            "contents": "cone(${1:normal}, ${2:dir}, ${3:angle}, ${4:...})"
        },
        {
            "trigger": "cone(dir, angle, ...)",
            "contents": "cone(${1:dir}, ${2:angle}, ${3:...})"
        },
        {
            "trigger": "cos(n)",
            "contents": "cos(${1:n})"
        },
        {
            "trigger": "cosh(n)",
            "contents": "cosh(${1:n})"
        },
        {
            "trigger": "cosh(v)",
            "contents": "cosh(${1:v})"
        },
        {
            "trigger": "cracktransform(trs, xyz, c, pivot, pivot_rotate, xform)",
            "contents": "cracktransform(${1:trs}, ${2:xyz}, ${3:c}, ${4:pivot}, ${5:pivot_rotate}, ${6:xform})"
        },
        {
            "trigger": "cracktransform(trs, xyz, c, pivot, xform)",
            "contents": "cracktransform(${1:trs}, ${2:xyz}, ${3:c}, ${4:pivot}, ${5:xform})"
        },
        {
            "trigger": "cracktransform(trs, xyz, pivot, pivot_rotate, xform, t, r, s, shears)",
            "contents": "cracktransform(${1:trs}, ${2:xyz}, ${3:pivot}, ${4:pivot_rotate}, ${5:xform}, ${6:t}, ${7:r}, ${8:s}, ${9:shears})"
        },
        {
            "trigger": "cracktransform(trs, xyz, pivot, xform, t, r, s)",
            "contents": "cracktransform(${1:trs}, ${2:xyz}, ${3:pivot}, ${4:xform}, ${5:t}, ${6:r}, ${7:s})"
        },
        {
            "trigger": "create_cdf(pdf)",
            "contents": "create_cdf(${1:pdf})"
        },
        {
            "trigger": "create_pdf(values)",
            "contents": "create_pdf(${1:values})"
        },
        {
            "trigger": "cregioncapturetransform(path)",
            "contents": "cregioncapturetransform(${1:path})"
        },
        {
            "trigger": "cregioncapturetransform(path, time)",
            "contents": "cregioncapturetransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "cregioncapturetransform(op_id)",
            "contents": "cregioncapturetransform(${1:op_id})"
        },
        {
            "trigger": "cregioncapturetransform(op_id, time)",
            "contents": "cregioncapturetransform(${1:op_id}, ${2:time})"
        },
        {
            "trigger": "cregiondeformtransform(path)",
            "contents": "cregiondeformtransform(${1:path})"
        },
        {
            "trigger": "cregiondeformtransform(path, time)",
            "contents": "cregiondeformtransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "cregiondeformtransform(op_id)",
            "contents": "cregiondeformtransform(${1:op_id})"
        },
        {
            "trigger": "cregiondeformtransform(op_id, time)",
            "contents": "cregiondeformtransform(${1:op_id}, ${2:time})"
        },
        {
            "trigger": "cregionoverridetransform(path)",
            "contents": "cregionoverridetransform(${1:path})"
        },
        {
            "trigger": "cregionoverridetransform(path, time)",
            "contents": "cregionoverridetransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "cregionoverridetransform(op_id)",
            "contents": "cregionoverridetransform(${1:op_id})"
        },
        {
            "trigger": "cregionoverridetransform(op_id, time)",
            "contents": "cregionoverridetransform(${1:op_id}, ${2:time})"
        },
        {
            "trigger": "cross(a, b)",
            "contents": "cross(${1:a}, ${2:b})"
        },
        {
            "trigger": "cspline(t, val1, ...)",
            "contents": "cspline(${1:t}, ${2:val1}, ${3:...})"
        },
        {
            "trigger": "ctransform(fromspace, tospace, clr)",
            "contents": "ctransform(${1:fromspace}, ${2:tospace}, ${3:clr})"
        },
        {
            "trigger": "ctransform(tospace, clr)",
            "contents": "ctransform(${1:tospace}, ${2:clr})"
        },
        {
            "trigger": "curlnoise(xyz)",
            "contents": "curlnoise(${1:xyz})"
        },
        {
            "trigger": "curlnoise(xyzt)",
            "contents": "curlnoise(${1:xyzt})"
        },
        {
            "trigger": "curlnoise2d(x, y)",
            "contents": "curlnoise2d(${1:x}, ${2:y})"
        },
        {
            "trigger": "curlnoise2d(xyt)",
            "contents": "curlnoise2d(${1:xyt})"
        },
        {
            "trigger": "curlxnoise(xyz)",
            "contents": "curlxnoise(${1:xyz})"
        },
        {
            "trigger": "curlxnoise(xyzt)",
            "contents": "curlxnoise(${1:xyzt})"
        },
        {
            "trigger": "curlxnoise2d(x, y)",
            "contents": "curlxnoise2d(${1:x}, ${2:y})"
        },
        {
            "trigger": "curlxnoise2d(xyt)",
            "contents": "curlxnoise2d(${1:xyt})"
        },
        {
            "trigger": "curvearclen(positions, uv1, uv2, closedflag, fmt, order)",
            "contents": "curvearclen(${1:positions}, ${2:uv1}, ${3:uv2}, ${4:closedflag}, ${5:fmt}, ${6:order})"
        },
        {
            "trigger": "curvearclen(positions, uv1, uv2, closedflag, fmt, order, divs)",
            "contents": "curvearclen(${1:positions}, ${2:uv1}, ${3:uv2}, ${4:closedflag}, ${5:fmt}, ${6:order}, ${7:divs})"
        },
        {
            "trigger": "curvearclen(positions, uv1, uv2, closedflag, fmt, order, divs, primuvmode)",
            "contents": "curvearclen(${1:positions}, ${2:uv1}, ${3:uv2}, ${4:closedflag}, ${5:fmt}, ${6:order}, ${7:divs}, ${8:primuvmode})"
        },
        {
            "trigger": "curvearclen(positions, uv1, uv2, closedflag, fmt, order, divs, primuvmode, primuvtol)",
            "contents": "curvearclen(${1:positions}, ${2:uv1}, ${3:uv2}, ${4:closedflag}, ${5:fmt}, ${6:order}, ${7:divs}, ${8:primuvmode}, ${9:primuvtol})"
        },
        {
            "trigger": "cvex_bsdf(eval_cvex_shader, sampler_cvex_shader, ...)",
            "contents": "cvex_bsdf(${1:eval_cvex_shader}, ${2:sampler_cvex_shader}, ${3:...})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2, f3, f4)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2, peiod)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:peiod})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2, f4, f4, period)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f4}, ${6:f4}, ${7:period})"
        },
        {
            "trigger": "cwnoise(posx, posy, seed, f1, f2)",
            "contents": "cwnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2})"
        },
        {
            "trigger": "cwnoise(posx, posy, seed, f1, f2, f3, f4)",
            "contents": "cwnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:f3}, ${7:f4})"
        },
        {
            "trigger": "cwnoise(posx, posy, seed, f1, f2, periodx, periody)",
            "contents": "cwnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:periodx}, ${7:periody})"
        },
        {
            "trigger": "cwnoise(posx, posy, seed, f1, f2, f3, f4, periodx, periody)",
            "contents": "cwnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:f3}, ${7:f4}, ${8:periodx}, ${9:periody})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2, periodx, periody)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:periodx}, ${6:periody})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2, f3, f4, periodx, periody)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4}, ${7:periodx}, ${8:periody})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2, periodx, periody, periodx)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:periodx}, ${6:periody}, ${7:periodx})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2, f3, f4, periodx, periody, periodz)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4}, ${7:periodx}, ${8:periody}, ${9:periodz})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2, periodx, periody, periodz, periodw)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:periodx}, ${6:periody}, ${7:periodz}, ${8:periodw})"
        },
        {
            "trigger": "cwnoise(position, seed, f1, f2, f3, f4, periodx, periody, periodz, periodw)",
            "contents": "cwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4}, ${7:periodx}, ${8:periody}, ${9:periodz}, ${10:periodw})"
        },
        {
            "trigger": "decode(str)",
            "contents": "decode(${1:str})"
        },
        {
            "trigger": "decodeattrib(str)",
            "contents": "decodeattrib(${1:str})"
        },
        {
            "trigger": "decodeparm(str)",
            "contents": "decodeparm(${1:str})"
        },
        {
            "trigger": "degrees(num_in_rads)",
            "contents": "degrees(${1:num_in_rads})"
        },
        {
            "trigger": "degrees(nums_in_rads)",
            "contents": "degrees(${1:nums_in_rads})"
        },
        {
            "trigger": "depthmap(filename, uvw)",
            "contents": "depthmap(${1:filename}, ${2:uvw})"
        },
        {
            "trigger": "depthmap(filename, u, v)",
            "contents": "depthmap(${1:filename}, ${2:u}, ${3:v})"
        },
        {
            "trigger": "depthname()",
            "contents": "depthname()"
        },
        {
            "trigger": "detail(geometry, attribute_name, ignored)",
            "contents": "detail(${1:geometry}, ${2:attribute_name}, ${3:ignored})"
        },
        {
            "trigger": "detailattrib(geometry, attribute_name, ignored, success)",
            "contents": "detailattrib(${1:geometry}, ${2:attribute_name}, ${3:ignored}, ${4:success})"
        },
        {
            "trigger": "detailattribsize(geometry, attribute_name)",
            "contents": "detailattribsize(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "detailattribtype(geometry, attribute_name)",
            "contents": "detailattribtype(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "detailattribtypeinfo(geometry, attribute_name)",
            "contents": "detailattribtypeinfo(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "detailintrinsic(geometry, intrinsic_name)",
            "contents": "detailintrinsic(${1:geometry}, ${2:intrinsic_name})"
        },
        {
            "trigger": "determinant(m)",
            "contents": "determinant(${1:m})"
        },
        {
            "trigger": "diagonalizesymmetric(symmat, diag)",
            "contents": "diagonalizesymmetric(${1:symmat}, ${2:diag})"
        },
        {
            "trigger": "diffuse(...)",
            "contents": "diffuse(${1:...})"
        },
        {
            "trigger": "diffuse(roughness, ...)",
            "contents": "diffuse(${1:roughness}, ${2:...})"
        },
        {
            "trigger": "diffuse(nml, ...)",
            "contents": "diffuse(${1:nml}, ${2:...})"
        },
        {
            "trigger": "diffuse(nml, roughness, ...)",
            "contents": "diffuse(${1:nml}, ${2:roughness}, ${3:...})"
        },
        {
            "trigger": "diffuse(nml, geo_normal, ...)",
            "contents": "diffuse(${1:nml}, ${2:geo_normal}, ${3:...})"
        },
        {
            "trigger": "diffuse(nml, geo_normal, roughness, ...)",
            "contents": "diffuse(${1:nml}, ${2:geo_normal}, ${3:roughness}, ${4:...})"
        },
        {
            "trigger": "diffuse(nml, V, roughness, ...)",
            "contents": "diffuse(${1:nml}, ${2:V}, ${3:roughness}, ${4:...})"
        },
        {
            "trigger": "diffuseBRDF(L, N)",
            "contents": "diffuseBRDF(${1:L}, ${2:N})"
        },
        {
            "trigger": "diffuseBRDF(L, N, V, rough)",
            "contents": "diffuseBRDF(${1:L}, ${2:N}, ${3:V}, ${4:rough})"
        },
        {
            "trigger": "dihedral(a, b)",
            "contents": "dihedral(${1:a}, ${2:b})"
        },
        {
            "trigger": "dimport(name, out)",
            "contents": "dimport(${1:name}, ${2:out})"
        },
        {
            "trigger": "distance(a, b)",
            "contents": "distance(${1:a}, ${2:b})"
        },
        {
            "trigger": "distance2(a, b)",
            "contents": "distance2(${1:a}, ${2:b})"
        },
        {
            "trigger": "dot(a, b)",
            "contents": "dot(${1:a}, ${2:b})"
        },
        {
            "trigger": "dsmpixel(map, channel, x, y, values)",
            "contents": "dsmpixel(${1:map}, ${2:channel}, ${3:x}, ${4:y}, ${5:values})"
        },
        {
            "trigger": "Du(n, ...)",
            "contents": "Du(${1:n}, ${2:...})"
        },
        {
            "trigger": "Dv(n, ...)",
            "contents": "Dv(${1:n}, ${2:...})"
        },
        {
            "trigger": "Dw(p, ...)",
            "contents": "Dw(${1:p}, ${2:...})"
        },
        {
            "trigger": "efit(value, omin, omax, nmin, nmax)",
            "contents": "efit(${1:value}, ${2:omin}, ${3:omax}, ${4:nmin}, ${5:nmax})"
        },
        {
            "trigger": "eigenvalues(nroot, mat, real, imaginary)",
            "contents": "eigenvalues(${1:nroot}, ${2:mat}, ${3:real}, ${4:imaginary})"
        },
        {
            "trigger": "encode(str)",
            "contents": "encode(${1:str})"
        },
        {
            "trigger": "encodeattrib(str)",
            "contents": "encodeattrib(${1:str})"
        },
        {
            "trigger": "encodeparm(str)",
            "contents": "encodeparm(${1:str})"
        },
        {
            "trigger": "endswith(haystack, needle)",
            "contents": "endswith(${1:haystack}, ${2:needle})"
        },
        {
            "trigger": "environment(texture_filename, reflect_dir, ...)",
            "contents": "environment(${1:texture_filename}, ${2:reflect_dir}, ${3:...})"
        },
        {
            "trigger": "environment(texture_filename, reflect_dir0, reflect_dir1, reflect_dir2, reflect_dir3, ...)",
            "contents": "environment(${1:texture_filename}, ${2:reflect_dir0}, ${3:reflect_dir1}, ${4:reflect_dir2}, ${5:reflect_dir3}, ${6:...})"
        },
        {
            "trigger": "environment(texture_filename, reflect_dir, filter_angle, ...)",
            "contents": "environment(${1:texture_filename}, ${2:reflect_dir}, ${3:filter_angle}, ${4:...})"
        },
        {
            "trigger": "erf(v)",
            "contents": "erf(${1:v})"
        },
        {
            "trigger": "erfc(v)",
            "contents": "erfc(${1:v})"
        },
        {
            "trigger": "erf_inv(v)",
            "contents": "erf_inv(${1:v})"
        },
        {
            "trigger": "error(format, ...)",
            "contents": "error(${1:format}, ${2:...})"
        },
        {
            "trigger": "eulertoquaternion(rotations, order)",
            "contents": "eulertoquaternion(${1:rotations}, ${2:order})"
        },
        {
            "trigger": "eval_bsdf(b, viewer, light, ...)",
            "contents": "eval_bsdf(${1:b}, ${2:viewer}, ${3:light}, ${4:...})"
        },
        {
            "trigger": "eval_bsdf(b, viewer, light, mask, ...)",
            "contents": "eval_bsdf(${1:b}, ${2:viewer}, ${3:light}, ${4:mask}, ${5:...})"
        },
        {
            "trigger": "eval_bsdf(b, viewer, light, pdf, mask, ...)",
            "contents": "eval_bsdf(${1:b}, ${2:viewer}, ${3:light}, ${4:pdf}, ${5:mask}, ${6:...})"
        },
        {
            "trigger": "eval_bsdf(b, viewer, light, normal, ...)",
            "contents": "eval_bsdf(${1:b}, ${2:viewer}, ${3:light}, ${4:normal}, ${5:...})"
        },
        {
            "trigger": "eval_bsdf(b, viewer, light, normal, mask, ...)",
            "contents": "eval_bsdf(${1:b}, ${2:viewer}, ${3:light}, ${4:normal}, ${5:mask}, ${6:...})"
        },
        {
            "trigger": "eval_bsdf(b, viewer, light, normal, pdf, mask, ...)",
            "contents": "eval_bsdf(${1:b}, ${2:viewer}, ${3:light}, ${4:normal}, ${5:pdf}, ${6:mask}, ${7:...})"
        },
        {
            "trigger": "exp(n)",
            "contents": "exp(${1:n})"
        },
        {
            "trigger": "expandedgegroup(geometry, groupname)",
            "contents": "expandedgegroup(${1:geometry}, ${2:groupname})"
        },
        {
            "trigger": "expandedgegroup(geometry, groupname, mode)",
            "contents": "expandedgegroup(${1:geometry}, ${2:groupname}, ${3:mode})"
        },
        {
            "trigger": "expandpointgroup(geometry, groupname)",
            "contents": "expandpointgroup(${1:geometry}, ${2:groupname})"
        },
        {
            "trigger": "expandpointgroup(geometry, groupname, mode)",
            "contents": "expandpointgroup(${1:geometry}, ${2:groupname}, ${3:mode})"
        },
        {
            "trigger": "expandprimgroup(geometry, groupname)",
            "contents": "expandprimgroup(${1:geometry}, ${2:groupname})"
        },
        {
            "trigger": "expandprimgroup(geometry, groupname, mode)",
            "contents": "expandprimgroup(${1:geometry}, ${2:groupname}, ${3:mode})"
        },
        {
            "trigger": "expandvertexgroup(geometry, groupname)",
            "contents": "expandvertexgroup(${1:geometry}, ${2:groupname})"
        },
        {
            "trigger": "expandvertexgroup(geometry, groupname, mode)",
            "contents": "expandvertexgroup(${1:geometry}, ${2:groupname}, ${3:mode})"
        },
        {
            "trigger": "expand_udim(u, v, path, ...)",
            "contents": "expand_udim(${1:u}, ${2:v}, ${3:path}, ${4:...})"
        },
        {
            "trigger": "extractlocaltransform(world, parent_world, parent_local, scale_inherit_mode)",
            "contents": "extractlocaltransform(${1:world}, ${2:parent_world}, ${3:parent_local}, ${4:scale_inherit_mode})"
        },
        {
            "trigger": "extractlocaltransform(world, parent_world, parent_local, mode, effective_local_transform)",
            "contents": "extractlocaltransform(${1:world}, ${2:parent_world}, ${3:parent_local}, ${4:mode}, ${5:effective_local_transform})"
        },
        {
            "trigger": "fastshadow(P, D, bias, ...)",
            "contents": "fastshadow(${1:P}, ${2:D}, ${3:bias}, ${4:...})"
        },
        {
            "trigger": "filamentsample(geometry, position)",
            "contents": "filamentsample(${1:geometry}, ${2:position})"
        },
        {
            "trigger": "file_stat(filename, stat_data, ...)",
            "contents": "file_stat(${1:filename}, ${2:stat_data}, ${3:...})"
        },
        {
            "trigger": "filtershadow(P, D, bias, ...)",
            "contents": "filtershadow(${1:P}, ${2:D}, ${3:bias}, ${4:...})"
        },
        {
            "trigger": "filterstep(edge, x, ...)",
            "contents": "filterstep(${1:edge}, ${2:x}, ${3:...})"
        },
        {
            "trigger": "filterstep(edge, x0, x1, ...)",
            "contents": "filterstep(${1:edge}, ${2:x0}, ${3:x1}, ${4:...})"
        },
        {
            "trigger": "filter_remap(uv, filter, width, ...)",
            "contents": "filter_remap(${1:uv}, ${2:filter}, ${3:width}, ${4:...})"
        },
        {
            "trigger": "find(haystack, needle)",
            "contents": "find(${1:haystack}, ${2:needle})"
        },
        {
            "trigger": "find(haystack, needle, start)",
            "contents": "find(${1:haystack}, ${2:needle}, ${3:start})"
        },
        {
            "trigger": "find(haystack, needle, start, end)",
            "contents": "find(${1:haystack}, ${2:needle}, ${3:start}, ${4:end})"
        },
        {
            "trigger": "find(array, target)",
            "contents": "find(${1:array}, ${2:target})"
        },
        {
            "trigger": "find(array, target, start)",
            "contents": "find(${1:array}, ${2:target}, ${3:start})"
        },
        {
            "trigger": "find(array, target, start, end)",
            "contents": "find(${1:array}, ${2:target}, ${3:start}, ${4:end})"
        },
        {
            "trigger": "findattribval(geometry, attribclass, attribute_name, value, which)",
            "contents": "findattribval(${1:geometry}, ${2:attribclass}, ${3:attribute_name}, ${4:value}, ${5:which})"
        },
        {
            "trigger": "findattribval(geometry, attribclass, attribute_name, value)",
            "contents": "findattribval(${1:geometry}, ${2:attribclass}, ${3:attribute_name}, ${4:value})"
        },
        {
            "trigger": "findattribvalcount(geometry, attribclass, attribute_name, value)",
            "contents": "findattribvalcount(${1:geometry}, ${2:attribclass}, ${3:attribute_name}, ${4:value})"
        },
        {
            "trigger": "finput(u, v, ...)",
            "contents": "finput(${1:u}, ${2:v}, ${3:...})"
        },
        {
            "trigger": "finput(component, u, v, ...)",
            "contents": "finput(${1:component}, ${2:u}, ${3:v}, ${4:...})"
        },
        {
            "trigger": "finput(opinput, planeindex, u, v, ...)",
            "contents": "finput(${1:opinput}, ${2:planeindex}, ${3:u}, ${4:v}, ${5:...})"
        },
        {
            "trigger": "finput(opinput, planeindex, component, u, v, ...)",
            "contents": "finput(${1:opinput}, ${2:planeindex}, ${3:component}, ${4:u}, ${5:v}, ${6:...})"
        },
        {
            "trigger": "finput(opinput, planeindex, arrayindex, u, v, frame, ...)",
            "contents": "finput(${1:opinput}, ${2:planeindex}, ${3:arrayindex}, ${4:u}, ${5:v}, ${6:frame}, ${7:...})"
        },
        {
            "trigger": "finput(opinput, planeindex, arrayindex, component, u, v, frame, ...)",
            "contents": "finput(${1:opinput}, ${2:planeindex}, ${3:arrayindex}, ${4:component}, ${5:u}, ${6:v}, ${7:frame}, ${8:...})"
        },
        {
            "trigger": "fit(value, omin, omax, nmin, nmax)",
            "contents": "fit(${1:value}, ${2:omin}, ${3:omax}, ${4:nmin}, ${5:nmax})"
        },
        {
            "trigger": "fit01(value, nmin, nmax)",
            "contents": "fit01(${1:value}, ${2:nmin}, ${3:nmax})"
        },
        {
            "trigger": "fit10(value, nmin, nmax)",
            "contents": "fit10(${1:value}, ${2:nmin}, ${3:nmax})"
        },
        {
            "trigger": "fit11(value, nmin, nmax)",
            "contents": "fit11(${1:value}, ${2:nmin}, ${3:nmax})"
        },
        {
            "trigger": "floor(n)",
            "contents": "floor(${1:n})"
        },
        {
            "trigger": "floor(v)",
            "contents": "floor(${1:v})"
        },
        {
            "trigger": "flownoise(xyz, flow)",
            "contents": "flownoise(${1:xyz}, ${2:flow})"
        },
        {
            "trigger": "flownoise(xyzt, flow)",
            "contents": "flownoise(${1:xyzt}, ${2:flow})"
        },
        {
            "trigger": "flownoise(x, y, flow)",
            "contents": "flownoise(${1:x}, ${2:y}, ${3:flow})"
        },
        {
            "trigger": "flowpnoise(xyz, p, flow)",
            "contents": "flowpnoise(${1:xyz}, ${2:p}, ${3:flow})"
        },
        {
            "trigger": "flowpnoise(xyzt, p, flow)",
            "contents": "flowpnoise(${1:xyzt}, ${2:p}, ${3:flow})"
        },
        {
            "trigger": "flowpnoise(x, y, px, py, flow)",
            "contents": "flowpnoise(${1:x}, ${2:y}, ${3:px}, ${4:py}, ${5:flow})"
        },
        {
            "trigger": "flowpnoise(xyz, px, py, pz, flow)",
            "contents": "flowpnoise(${1:xyz}, ${2:px}, ${3:py}, ${4:pz}, ${5:flow})"
        },
        {
            "trigger": "flowpnoise(xyzt, px, py, pz, pt, flow)",
            "contents": "flowpnoise(${1:xyzt}, ${2:px}, ${3:py}, ${4:pz}, ${5:pt}, ${6:flow})"
        },
        {
            "trigger": "frac(n)",
            "contents": "frac(${1:n})"
        },
        {
            "trigger": "frac(v)",
            "contents": "frac(${1:v})"
        },
        {
            "trigger": "fresnel(i, n, eta, kr, kt)",
            "contents": "fresnel(${1:i}, ${2:n}, ${3:eta}, ${4:kr}, ${5:kt})"
        },
        {
            "trigger": "fresnel(i, n, eta, kr, kt, R, T)",
            "contents": "fresnel(${1:i}, ${2:n}, ${3:eta}, ${4:kr}, ${5:kt}, ${6:R}, ${7:T})"
        },
        {
            "trigger": "fromNDC(v)",
            "contents": "fromNDC(${1:v})"
        },
        {
            "trigger": "fromNDC(space, v)",
            "contents": "fromNDC(${1:space}, ${2:v})"
        },
        {
            "trigger": "frontface(N, I)",
            "contents": "frontface(${1:N}, ${2:I})"
        },
        {
            "trigger": "frontface(N, I, Nref)",
            "contents": "frontface(${1:N}, ${2:I}, ${3:Nref})"
        },
        {
            "trigger": "fuzzify(ramp_basis, ramp_values, ramp_positions, crisp_value, min_value, max_value)",
            "contents": "fuzzify(${1:ramp_basis}, ${2:ramp_values}, ${3:ramp_positions}, ${4:crisp_value}, ${5:min_value}, ${6:max_value})"
        },
        {
            "trigger": "fuzzy_and(a, b, ...)",
            "contents": "fuzzy_and(${1:a}, ${2:b}, ${3:...})"
        },
        {
            "trigger": "fuzzy_defuzz_centroid(aggregated_membership, min_value, max_value)",
            "contents": "fuzzy_defuzz_centroid(${1:aggregated_membership}, ${2:min_value}, ${3:max_value})"
        },
        {
            "trigger": "fuzzy_nand(a, b, ...)",
            "contents": "fuzzy_nand(${1:a}, ${2:b}, ${3:...})"
        },
        {
            "trigger": "fuzzy_nor(a, b, ...)",
            "contents": "fuzzy_nor(${1:a}, ${2:b}, ${3:...})"
        },
        {
            "trigger": "fuzzy_not(n)",
            "contents": "fuzzy_not(${1:n})"
        },
        {
            "trigger": "fuzzy_nxor(a, b, ...)",
            "contents": "fuzzy_nxor(${1:a}, ${2:b}, ${3:...})"
        },
        {
            "trigger": "fuzzy_or(a, b, ...)",
            "contents": "fuzzy_or(${1:a}, ${2:b}, ${3:...})"
        },
        {
            "trigger": "fuzzy_xor(a, b, ...)",
            "contents": "fuzzy_xor(${1:a}, ${2:b}, ${3:...})"
        },
        {
            "trigger": "geoself()",
            "contents": "geoself()"
        },
        {
            "trigger": "geounwrap(geometry, unwrap_attribute)",
            "contents": "geounwrap(${1:geometry}, ${2:unwrap_attribute})"
        },
        {
            "trigger": "getattrib(geometry, attribclass, attribute_name, elemnum, success)",
            "contents": "getattrib(${1:geometry}, ${2:attribclass}, ${3:attribute_name}, ${4:elemnum}, ${5:success})"
        },
        {
            "trigger": "getattribute(geometry, value, attribclass, attribute_name, element_number, vertex_number)",
            "contents": "getattribute(${1:geometry}, ${2:value}, ${3:attribclass}, ${4:attribute_name}, ${5:element_number}, ${6:vertex_number})"
        },
        {
            "trigger": "getbbox(geometry, min, max)",
            "contents": "getbbox(${1:geometry}, ${2:min}, ${3:max})"
        },
        {
            "trigger": "getbbox(geometry, primgroup, min, max)",
            "contents": "getbbox(${1:geometry}, ${2:primgroup}, ${3:min}, ${4:max})"
        },
        {
            "trigger": "getbbox(min, max)",
            "contents": "getbbox(${1:min}, ${2:max})"
        },
        {
            "trigger": "getbbox_center(geometry)",
            "contents": "getbbox_center(${1:geometry})"
        },
        {
            "trigger": "getbbox_center(geometry, primgroup)",
            "contents": "getbbox_center(${1:geometry}, ${2:primgroup})"
        },
        {
            "trigger": "getbbox_max(geometry)",
            "contents": "getbbox_max(${1:geometry})"
        },
        {
            "trigger": "getbbox_max(geometry, primgroup)",
            "contents": "getbbox_max(${1:geometry}, ${2:primgroup})"
        },
        {
            "trigger": "getbbox_min(geometry)",
            "contents": "getbbox_min(${1:geometry})"
        },
        {
            "trigger": "getbbox_min(geometry, primgroup)",
            "contents": "getbbox_min(${1:geometry}, ${2:primgroup})"
        },
        {
            "trigger": "getbbox_size(geometry)",
            "contents": "getbbox_size(${1:geometry})"
        },
        {
            "trigger": "getbbox_size(geometry, primgroup)",
            "contents": "getbbox_size(${1:geometry}, ${2:primgroup})"
        },
        {
            "trigger": "getblurP(delta)",
            "contents": "getblurP(${1:delta})"
        },
        {
            "trigger": "getbounces(b)",
            "contents": "getbounces(${1:b})"
        },
        {
            "trigger": "getbounds(filename, min, max)",
            "contents": "getbounds(${1:filename}, ${2:min}, ${3:max})"
        },
        {
            "trigger": "getbounds(filename, group, min, max)",
            "contents": "getbounds(${1:filename}, ${2:group}, ${3:min}, ${4:max})"
        },
        {
            "trigger": "getcomp(v, index)",
            "contents": "getcomp(${1:v}, ${2:index})"
        },
        {
            "trigger": "getcomp(m, row, column)",
            "contents": "getcomp(${1:m}, ${2:row}, ${3:column})"
        },
        {
            "trigger": "getcomp(array, index)",
            "contents": "getcomp(${1:array}, ${2:index})"
        },
        {
            "trigger": "getcomp(d, index)",
            "contents": "getcomp(${1:d}, ${2:index})"
        },
        {
            "trigger": "getcomp(d, index, defvalue)",
            "contents": "getcomp(${1:d}, ${2:index}, ${3:defvalue})"
        },
        {
            "trigger": "getcomp(value, index)",
            "contents": "getcomp(${1:value}, ${2:index})"
        },
        {
            "trigger": "getcomponents()",
            "contents": "getcomponents()"
        },
        {
            "trigger": "getderiv(attr, attrName, isVertexAttr, s, t, du, dv, ...)",
            "contents": "getderiv(${1:attr}, ${2:attrName}, ${3:isVertexAttr}, ${4:s}, ${5:t}, ${6:du}, ${7:dv}, ${8:...})"
        },
        {
            "trigger": "getfogname()",
            "contents": "getfogname()"
        },
        {
            "trigger": "getglobalraylevel()",
            "contents": "getglobalraylevel()"
        },
        {
            "trigger": "getgroupid()",
            "contents": "getgroupid()"
        },
        {
            "trigger": "getlight(lid)",
            "contents": "getlight(${1:lid})"
        },
        {
            "trigger": "getlightid(lightname)",
            "contents": "getlightid(${1:lightname})"
        },
        {
            "trigger": "getlightname()",
            "contents": "getlightname()"
        },
        {
            "trigger": "getlightname(lightid)",
            "contents": "getlightname(${1:lightid})"
        },
        {
            "trigger": "getlights(...)",
            "contents": "getlights(${1:...})"
        },
        {
            "trigger": "getlights(P, ...)",
            "contents": "getlights(${1:P}, ${2:...})"
        },
        {
            "trigger": "getlights(mat, P, ...)",
            "contents": "getlights(${1:mat}, ${2:P}, ${3:...})"
        },
        {
            "trigger": "getlightscope(mat, scope, categories)",
            "contents": "getlightscope(${1:mat}, ${2:scope}, ${3:categories})"
        },
        {
            "trigger": "getlocalcurvature(s, t)",
            "contents": "getlocalcurvature(${1:s}, ${2:t})"
        },
        {
            "trigger": "getmaterial()",
            "contents": "getmaterial()"
        },
        {
            "trigger": "getmaterialid()",
            "contents": "getmaterialid()"
        },
        {
            "trigger": "getobjectid()",
            "contents": "getobjectid()"
        },
        {
            "trigger": "getobjectname()",
            "contents": "getobjectname()"
        },
        {
            "trigger": "getpackedtransform(input, primnum)",
            "contents": "getpackedtransform(${1:input}, ${2:primnum})"
        },
        {
            "trigger": "getphotonlight()",
            "contents": "getphotonlight()"
        },
        {
            "trigger": "getpointbbox(geometry, min, max)",
            "contents": "getpointbbox(${1:geometry}, ${2:min}, ${3:max})"
        },
        {
            "trigger": "getpointbbox(geometry, pointgroup, min, max)",
            "contents": "getpointbbox(${1:geometry}, ${2:pointgroup}, ${3:min}, ${4:max})"
        },
        {
            "trigger": "getpointbbox_center(geometry)",
            "contents": "getpointbbox_center(${1:geometry})"
        },
        {
            "trigger": "getpointbbox_center(geometry, pointgroup)",
            "contents": "getpointbbox_center(${1:geometry}, ${2:pointgroup})"
        },
        {
            "trigger": "getpointbbox_max(geometry)",
            "contents": "getpointbbox_max(${1:geometry})"
        },
        {
            "trigger": "getpointbbox_max(geometry, pointgroup)",
            "contents": "getpointbbox_max(${1:geometry}, ${2:pointgroup})"
        },
        {
            "trigger": "getpointbbox_min(geometry)",
            "contents": "getpointbbox_min(${1:geometry})"
        },
        {
            "trigger": "getpointbbox_min(geometry, pointgroup)",
            "contents": "getpointbbox_min(${1:geometry}, ${2:pointgroup})"
        },
        {
            "trigger": "getpointbbox_size(geometry)",
            "contents": "getpointbbox_size(${1:geometry})"
        },
        {
            "trigger": "getpointbbox_size(geometry, pointgroup)",
            "contents": "getpointbbox_size(${1:geometry}, ${2:pointgroup})"
        },
        {
            "trigger": "getprimid()",
            "contents": "getprimid()"
        },
        {
            "trigger": "getptextureid()",
            "contents": "getptextureid()"
        },
        {
            "trigger": "getraylevel()",
            "contents": "getraylevel()"
        },
        {
            "trigger": "getrayweight()",
            "contents": "getrayweight()"
        },
        {
            "trigger": "getsamplestore(channel, P, value)",
            "contents": "getsamplestore(${1:channel}, ${2:P}, ${3:value})"
        },
        {
            "trigger": "getscope(mat, raystyle, scope, categories)",
            "contents": "getscope(${1:mat}, ${2:raystyle}, ${3:scope}, ${4:categories})"
        },
        {
            "trigger": "getsmoothP(smoothP, ray_origin, ...)",
            "contents": "getsmoothP(${1:smoothP}, ${2:ray_origin}, ${3:...})"
        },
        {
            "trigger": "getsmoothP(...)",
            "contents": "getsmoothP(${1:...})"
        },
        {
            "trigger": "getspace(fromspace, tospace)",
            "contents": "getspace(${1:fromspace}, ${2:tospace})"
        },
        {
            "trigger": "getuvtangents(objName, P, dir, Tu, Tv)",
            "contents": "getuvtangents(${1:objName}, ${2:P}, ${3:dir}, ${4:Tu}, ${5:Tv})"
        },
        {
            "trigger": "getuvtangents(objName, P, dir, Tu, Tv, Tn)",
            "contents": "getuvtangents(${1:objName}, ${2:P}, ${3:dir}, ${4:Tu}, ${5:Tv}, ${6:Tn})"
        },
        {
            "trigger": "ggx(ng, nn, xg, yg, F0, F90, alphax, alphay, masking, fresblend, eta, reflect, refract, reflectmask, refractmask, dispersion, ...)",
            "contents": "ggx(${1:ng}, ${2:nn}, ${3:xg}, ${4:yg}, ${5:F0}, ${6:F90}, ${7:alphax}, ${8:alphay}, ${9:masking}, ${10:fresblend}, ${11:eta}, ${12:reflect}, ${13:refract}, ${14:reflectmask}, ${15:refractmask}, ${16:dispersion}, ${17:...})"
        },
        {
            "trigger": "gradient(val, ...)",
            "contents": "gradient(${1:val}, ${2:...})"
        },
        {
            "trigger": "gradient(P, val, ...)",
            "contents": "gradient(${1:P}, ${2:val}, ${3:...})"
        },
        {
            "trigger": "hair(N, tip, lobe_shift, lobe_width_lon, ...)",
            "contents": "hair(${1:N}, ${2:tip}, ${3:lobe_shift}, ${4:lobe_width_lon}, ${5:...})"
        },
        {
            "trigger": "hair(N, tip, lobe_shift, lobe_width_lon, lobe_with_azi, ...)",
            "contents": "hair(${1:N}, ${2:tip}, ${3:lobe_shift}, ${4:lobe_width_lon}, ${5:lobe_with_azi}, ${6:...})"
        },
        {
            "trigger": "hair(N, tip, lobe_shift, lobe_width_lon, lobe_with_azi, glint_shift, glint_intensity, ...)",
            "contents": "hair(${1:N}, ${2:tip}, ${3:lobe_shift}, ${4:lobe_width_lon}, ${5:lobe_with_azi}, ${6:glint_shift}, ${7:glint_intensity}, ${8:...})"
        },
        {
            "trigger": "hasattrib(geometry, attribclass, attribute_name)",
            "contents": "hasattrib(${1:geometry}, ${2:attribclass}, ${3:attribute_name})"
        },
        {
            "trigger": "hasdetailattrib(geometry, attribute_name)",
            "contents": "hasdetailattrib(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "haslight(mat, P, light, ...)",
            "contents": "haslight(${1:mat}, ${2:P}, ${3:light}, ${4:...})"
        },
        {
            "trigger": "hasmetadata(opinput, name)",
            "contents": "hasmetadata(${1:opinput}, ${2:name})"
        },
        {
            "trigger": "hasplane(planename)",
            "contents": "hasplane(${1:planename})"
        },
        {
            "trigger": "haspointattrib(geometry, attribute_name)",
            "contents": "haspointattrib(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "hasprimattrib(geometry, attribute_name)",
            "contents": "hasprimattrib(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "hasvertexattrib(geometry, attribute_name)",
            "contents": "hasvertexattrib(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "has_udim(path)",
            "contents": "has_udim(${1:path})"
        },
        {
            "trigger": "hedge_dstpoint(geometry, hedge)",
            "contents": "hedge_dstpoint(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_dstvertex(geometry, hedge)",
            "contents": "hedge_dstvertex(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_equivcount(geometry, hedge)",
            "contents": "hedge_equivcount(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_isequiv(geometry, hedge1, hedge2)",
            "contents": "hedge_isequiv(${1:geometry}, ${2:hedge1}, ${3:hedge2})"
        },
        {
            "trigger": "hedge_isprimary(geometry, hedge)",
            "contents": "hedge_isprimary(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_isprimary(opinput, hendge)",
            "contents": "hedge_isprimary(${1:opinput}, ${2:hendge})"
        },
        {
            "trigger": "hedge_isvalid(geometry, hedge)",
            "contents": "hedge_isvalid(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_next(geometry, hedge)",
            "contents": "hedge_next(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_nextequiv(geometry, hedge)",
            "contents": "hedge_nextequiv(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_postdstpoint(geometry, hedge)",
            "contents": "hedge_postdstpoint(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_postdstvertex(geometry, hedge)",
            "contents": "hedge_postdstvertex(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_presrcpoint(geometry, hedge)",
            "contents": "hedge_presrcpoint(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_presrcvertex(geometry, hedge)",
            "contents": "hedge_presrcvertex(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_prev(geometry, hedge)",
            "contents": "hedge_prev(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_prim(geometry, hedge)",
            "contents": "hedge_prim(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_primary(geometry, hedge)",
            "contents": "hedge_primary(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_srcpoint(geometry, hedge)",
            "contents": "hedge_srcpoint(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "hedge_srcvertex(geometry, hedge)",
            "contents": "hedge_srcvertex(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "henyeygreenstein(anisotropic_bias, ...)",
            "contents": "henyeygreenstein(${1:anisotropic_bias}, ${2:...})"
        },
        {
            "trigger": "hscript_noise(pos)",
            "contents": "hscript_noise(${1:pos})"
        },
        {
            "trigger": "hscript_rand(seed)",
            "contents": "hscript_rand(${1:seed})"
        },
        {
            "trigger": "hscript_snoise(pos)",
            "contents": "hscript_snoise(${1:pos})"
        },
        {
            "trigger": "hscript_sturb(pos, turbulence)",
            "contents": "hscript_sturb(${1:pos}, ${2:turbulence})"
        },
        {
            "trigger": "hscript_turb(pos, depth)",
            "contents": "hscript_turb(${1:pos}, ${2:depth})"
        },
        {
            "trigger": "hsvtorgb(hsv)",
            "contents": "hsvtorgb(${1:hsv})"
        },
        {
            "trigger": "hsvtorgb(hue, sat, val)",
            "contents": "hsvtorgb(${1:hue}, ${2:sat}, ${3:val})"
        },
        {
            "trigger": "iaspect(opinput)",
            "contents": "iaspect(${1:opinput})"
        },
        {
            "trigger": "ichname(inputnum, plane_index, component_index)",
            "contents": "ichname(${1:inputnum}, ${2:plane_index}, ${3:component_index})"
        },
        {
            "trigger": "ident()",
            "contents": "ident()"
        },
        {
            "trigger": "idtopoint(geometry, id)",
            "contents": "idtopoint(${1:geometry}, ${2:id})"
        },
        {
            "trigger": "idtoprim(geometry, id)",
            "contents": "idtoprim(${1:geometry}, ${2:id})"
        },
        {
            "trigger": "iend(opinput)",
            "contents": "iend(${1:opinput})"
        },
        {
            "trigger": "iendtime(opinput)",
            "contents": "iendtime(${1:opinput})"
        },
        {
            "trigger": "ihasplane(opinput, planename)",
            "contents": "ihasplane(${1:opinput}, ${2:planename})"
        },
        {
            "trigger": "importance_remap(map, uv, ...)",
            "contents": "importance_remap(${1:map}, ${2:uv}, ${3:...})"
        },
        {
            "trigger": "inedgegroup(filename, groupname, pointnum0, pointnum1)",
            "contents": "inedgegroup(${1:filename}, ${2:groupname}, ${3:pointnum0}, ${4:pointnum1})"
        },
        {
            "trigger": "inedgegroup(input, groupname, pointnum0, pointnum1)",
            "contents": "inedgegroup(${1:input}, ${2:groupname}, ${3:pointnum0}, ${4:pointnum1})"
        },
        {
            "trigger": "inpointgroup(geometry, groupname, pointnum)",
            "contents": "inpointgroup(${1:geometry}, ${2:groupname}, ${3:pointnum})"
        },
        {
            "trigger": "inprimgroup(geometry, groupname, primnum)",
            "contents": "inprimgroup(${1:geometry}, ${2:groupname}, ${3:primnum})"
        },
        {
            "trigger": "insert(str, index, value)",
            "contents": "insert(${1:str}, ${2:index}, ${3:value})"
        },
        {
            "trigger": "insert(array, index, value)",
            "contents": "insert(${1:array}, ${2:index}, ${3:value})"
        },
        {
            "trigger": "insert(array, index, values)",
            "contents": "insert(${1:array}, ${2:index}, ${3:values})"
        },
        {
            "trigger": "insert(dstdict, dstkey, srcdict, srckey)",
            "contents": "insert(${1:dstdict}, ${2:dstkey}, ${3:srcdict}, ${4:srckey})"
        },
        {
            "trigger": "insert(dstdict, srcdict)",
            "contents": "insert(${1:dstdict}, ${2:srcdict})"
        },
        {
            "trigger": "instance(P, N)",
            "contents": "instance(${1:P}, ${2:N})"
        },
        {
            "trigger": "instance(P, N, scale)",
            "contents": "instance(${1:P}, ${2:N}, ${3:scale})"
        },
        {
            "trigger": "instance(P, N, scale, pivot)",
            "contents": "instance(${1:P}, ${2:N}, ${3:scale}, ${4:pivot})"
        },
        {
            "trigger": "instance(P, N, scale, rotate, up)",
            "contents": "instance(${1:P}, ${2:N}, ${3:scale}, ${4:rotate}, ${5:up})"
        },
        {
            "trigger": "instance(P, N, scale, rotate, up, pivot)",
            "contents": "instance(${1:P}, ${2:N}, ${3:scale}, ${4:rotate}, ${5:up}, ${6:pivot})"
        },
        {
            "trigger": "instance(P, N, scale, rotate, orient)",
            "contents": "instance(${1:P}, ${2:N}, ${3:scale}, ${4:rotate}, ${5:orient})"
        },
        {
            "trigger": "instance(P, N, scale, rotate, orient, pivot)",
            "contents": "instance(${1:P}, ${2:N}, ${3:scale}, ${4:rotate}, ${5:orient}, ${6:pivot})"
        },
        {
            "trigger": "interpolate(val, sx, sy)",
            "contents": "interpolate(${1:val}, ${2:sx}, ${3:sy})"
        },
        {
            "trigger": "intersect(geometry, orig, dir, p, u, v)",
            "contents": "intersect(${1:geometry}, ${2:orig}, ${3:dir}, ${4:p}, ${5:u}, ${6:v})"
        },
        {
            "trigger": "intersect(geometry, orig, dir, p, u, v, ...)",
            "contents": "intersect(${1:geometry}, ${2:orig}, ${3:dir}, ${4:p}, ${5:u}, ${6:v}, ${7:...})"
        },
        {
            "trigger": "intersect(geometry, orig, dir, p, uvw)",
            "contents": "intersect(${1:geometry}, ${2:orig}, ${3:dir}, ${4:p}, ${5:uvw})"
        },
        {
            "trigger": "intersect(geometry, group, orig, dir, p, uvw)",
            "contents": "intersect(${1:geometry}, ${2:group}, ${3:orig}, ${4:dir}, ${5:p}, ${6:uvw})"
        },
        {
            "trigger": "intersect_all(geometry, group, orig, dir, pos, prim, uvw, tol, ttol)",
            "contents": "intersect_all(${1:geometry}, ${2:group}, ${3:orig}, ${4:dir}, ${5:pos}, ${6:prim}, ${7:uvw}, ${8:tol}, ${9:ttol})"
        },
        {
            "trigger": "intersect_lights(lightids, pos, dir, time, idx, dist, clr, scale, ...)",
            "contents": "intersect_lights(${1:lightids}, ${2:pos}, ${3:dir}, ${4:time}, ${5:idx}, ${6:dist}, ${7:clr}, ${8:scale}, ${9:...})"
        },
        {
            "trigger": "inumplanes(opinput)",
            "contents": "inumplanes(${1:opinput})"
        },
        {
            "trigger": "invert(m)",
            "contents": "invert(${1:m})"
        },
        {
            "trigger": "invertexgroup(filename, groupname, vertexnum)",
            "contents": "invertexgroup(${1:filename}, ${2:groupname}, ${3:vertexnum})"
        },
        {
            "trigger": "invertexgroup(opinput, groupname, vertexnum)",
            "contents": "invertexgroup(${1:opinput}, ${2:groupname}, ${3:vertexnum})"
        },
        {
            "trigger": "invlerp(a, min, max)",
            "contents": "invlerp(${1:a}, ${2:min}, ${3:max})"
        },
        {
            "trigger": "iplaneindex(opinput, planename)",
            "contents": "iplaneindex(${1:opinput}, ${2:planename})"
        },
        {
            "trigger": "iplanename(opinput, planeindex)",
            "contents": "iplanename(${1:opinput}, ${2:planeindex})"
        },
        {
            "trigger": "iplanesize(opinput, planeindex)",
            "contents": "iplanesize(${1:opinput}, ${2:planeindex})"
        },
        {
            "trigger": "irate(opinput)",
            "contents": "irate(${1:opinput})"
        },
        {
            "trigger": "irradiance(P, N, ...)",
            "contents": "irradiance(${1:P}, ${2:N}, ${3:...})"
        },
        {
            "trigger": "isalpha(str)",
            "contents": "isalpha(${1:str})"
        },
        {
            "trigger": "isbound(variable_name)",
            "contents": "isbound(${1:variable_name})"
        },
        {
            "trigger": "isconnected(opinput)",
            "contents": "isconnected(${1:opinput})"
        },
        {
            "trigger": "isdigit(str)",
            "contents": "isdigit(${1:str})"
        },
        {
            "trigger": "isfinite(x)",
            "contents": "isfinite(${1:x})"
        },
        {
            "trigger": "isfogray()",
            "contents": "isfogray()"
        },
        {
            "trigger": "isframes()",
            "contents": "isframes()"
        },
        {
            "trigger": "islpeactive()",
            "contents": "islpeactive()"
        },
        {
            "trigger": "isnan(x)",
            "contents": "isnan(${1:x})"
        },
        {
            "trigger": "isotropic(...)",
            "contents": "isotropic(${1:...})"
        },
        {
            "trigger": "israytracing()",
            "contents": "israytracing()"
        },
        {
            "trigger": "issamples()",
            "contents": "issamples()"
        },
        {
            "trigger": "isseconds()",
            "contents": "isseconds()"
        },
        {
            "trigger": "isshadingRHS()",
            "contents": "isshadingRHS()"
        },
        {
            "trigger": "isshadowray()",
            "contents": "isshadowray()"
        },
        {
            "trigger": "istart(opinput)",
            "contents": "istart(${1:opinput})"
        },
        {
            "trigger": "istarttime(opinput)",
            "contents": "istarttime(${1:opinput})"
        },
        {
            "trigger": "isuvrendering()",
            "contents": "isuvrendering()"
        },
        {
            "trigger": "isvalidindex(array, index)",
            "contents": "isvalidindex(${1:array}, ${2:index})"
        },
        {
            "trigger": "isvalidindex(str, index)",
            "contents": "isvalidindex(${1:str}, ${2:index})"
        },
        {
            "trigger": "isvalidindex(d, key)",
            "contents": "isvalidindex(${1:d}, ${2:key})"
        },
        {
            "trigger": "isvarying(x)",
            "contents": "isvarying(${1:x})"
        },
        {
            "trigger": "itoa(number)",
            "contents": "itoa(${1:number})"
        },
        {
            "trigger": "ixres(opinput)",
            "contents": "ixres(${1:opinput})"
        },
        {
            "trigger": "iyres(opinput)",
            "contents": "iyres(${1:opinput})"
        },
        {
            "trigger": "join(s, spacer)",
            "contents": "join(${1:s}, ${2:spacer})"
        },
        {
            "trigger": "json_dumps(d, flags)",
            "contents": "json_dumps(${1:d}, ${2:flags})"
        },
        {
            "trigger": "json_loads(json, flags)",
            "contents": "json_loads(${1:json}, ${2:flags})"
        },
        {
            "trigger": "keys(d)",
            "contents": "keys(${1:d})"
        },
        {
            "trigger": "kspline(basis, sample_pos, value1, key_pos1, ...)",
            "contents": "kspline(${1:basis}, ${2:sample_pos}, ${3:value1}, ${4:key_pos1}, ${5:...})"
        },
        {
            "trigger": "len(v)",
            "contents": "len(${1:v})"
        },
        {
            "trigger": "len(m)",
            "contents": "len(${1:m})"
        },
        {
            "trigger": "len(array)",
            "contents": "len(${1:array})"
        },
        {
            "trigger": "len(s)",
            "contents": "len(${1:s})"
        },
        {
            "trigger": "len(d)",
            "contents": "len(${1:d})"
        },
        {
            "trigger": "length(f)",
            "contents": "length(${1:f})"
        },
        {
            "trigger": "length(v)",
            "contents": "length(${1:v})"
        },
        {
            "trigger": "length2(v)",
            "contents": "length2(${1:v})"
        },
        {
            "trigger": "lerp(value1, value2, amount)",
            "contents": "lerp(${1:value1}, ${2:value2}, ${3:amount})"
        },
        {
            "trigger": "lerp(bsdf1, bsdf2, amount)",
            "contents": "lerp(${1:bsdf1}, ${2:bsdf2}, ${3:amount})"
        },
        {
            "trigger": "lightbounces(lp)",
            "contents": "lightbounces(${1:lp})"
        },
        {
            "trigger": "lightid(lp)",
            "contents": "lightid(${1:lp})"
        },
        {
            "trigger": "lightstate(query, value)",
            "contents": "lightstate(${1:query}, ${2:value})"
        },
        {
            "trigger": "limit_sample_space(minu, maxu, u)",
            "contents": "limit_sample_space(${1:minu}, ${2:maxu}, ${3:u})"
        },
        {
            "trigger": "limit_sample_space(maxu, u)",
            "contents": "limit_sample_space(${1:maxu}, ${2:u})"
        },
        {
            "trigger": "limport(name, value)",
            "contents": "limport(${1:name}, ${2:value})"
        },
        {
            "trigger": "lkspline(sample_pos, value1, key_pos1, ...)",
            "contents": "lkspline(${1:sample_pos}, ${2:value1}, ${3:key_pos1}, ${4:...})"
        },
        {
            "trigger": "log(n)",
            "contents": "log(${1:n})"
        },
        {
            "trigger": "log(v)",
            "contents": "log(${1:v})"
        },
        {
            "trigger": "log10(n)",
            "contents": "log10(${1:n})"
        },
        {
            "trigger": "lookat(from, to)",
            "contents": "lookat(${1:from}, ${2:to})"
        },
        {
            "trigger": "lookat(from, to, roll)",
            "contents": "lookat(${1:from}, ${2:to}, ${3:roll})"
        },
        {
            "trigger": "lookat(from, to, up)",
            "contents": "lookat(${1:from}, ${2:to}, ${3:up})"
        },
        {
            "trigger": "lookat(from, to, roll, xyz)",
            "contents": "lookat(${1:from}, ${2:to}, ${3:roll}, ${4:xyz})"
        },
        {
            "trigger": "lookat(from, to, up, xyz)",
            "contents": "lookat(${1:from}, ${2:to}, ${3:up}, ${4:xyz})"
        },
        {
            "trigger": "lspline(sample_pos, value1, ...)",
            "contents": "lspline(${1:sample_pos}, ${2:value1}, ${3:...})"
        },
        {
            "trigger": "lstrip(value)",
            "contents": "lstrip(${1:value})"
        },
        {
            "trigger": "lstrip(value, whitespace)",
            "contents": "lstrip(${1:value}, ${2:whitespace})"
        },
        {
            "trigger": "luminance(rgb)",
            "contents": "luminance(${1:rgb})"
        },
        {
            "trigger": "luminance(r, g, b)",
            "contents": "luminance(${1:r}, ${2:g}, ${3:b})"
        },
        {
            "trigger": "lumname()",
            "contents": "lumname()"
        },
        {
            "trigger": "makebasis(xaxis, yaxis, zaxis)",
            "contents": "makebasis(${1:xaxis}, ${2:yaxis}, ${3:zaxis})"
        },
        {
            "trigger": "makebasis(xaxis, yaxis, zaxis, u)",
            "contents": "makebasis(${1:xaxis}, ${2:yaxis}, ${3:zaxis}, ${4:u})"
        },
        {
            "trigger": "maketransform(zaxis, yaxis)",
            "contents": "maketransform(${1:zaxis}, ${2:yaxis})"
        },
        {
            "trigger": "maketransform(xyz, angles)",
            "contents": "maketransform(${1:xyz}, ${2:angles})"
        },
        {
            "trigger": "maketransform(zaxis, yaxis, translate)",
            "contents": "maketransform(${1:zaxis}, ${2:yaxis}, ${3:translate})"
        },
        {
            "trigger": "maketransform(trs, xyz, t, r)",
            "contents": "maketransform(${1:trs}, ${2:xyz}, ${3:t}, ${4:r})"
        },
        {
            "trigger": "maketransform(trs, xyz, t, r, s)",
            "contents": "maketransform(${1:trs}, ${2:xyz}, ${3:t}, ${4:r}, ${5:s})"
        },
        {
            "trigger": "maketransform(trs, xyz, t, r, s, p)",
            "contents": "maketransform(${1:trs}, ${2:xyz}, ${3:t}, ${4:r}, ${5:s}, ${6:p})"
        },
        {
            "trigger": "maketransform(trs, xyz, t, r, s, p, pr)",
            "contents": "maketransform(${1:trs}, ${2:xyz}, ${3:t}, ${4:r}, ${5:s}, ${6:p}, ${7:pr})"
        },
        {
            "trigger": "maketransform(trs, xyz, t, r, s, p, pr, shears)",
            "contents": "maketransform(${1:trs}, ${2:xyz}, ${3:t}, ${4:r}, ${5:s}, ${6:p}, ${7:pr}, ${8:shears})"
        },
        {
            "trigger": "maskname()",
            "contents": "maskname()"
        },
        {
            "trigger": "mask_bsdf(b, mask)",
            "contents": "mask_bsdf(${1:b}, ${2:mask})"
        },
        {
            "trigger": "match(pattern, subject)",
            "contents": "match(${1:pattern}, ${2:subject})"
        },
        {
            "trigger": "matchvex_blinn(exponent, ...)",
            "contents": "matchvex_blinn(${1:exponent}, ${2:...})"
        },
        {
            "trigger": "matchvex_blinn(nml, exponent, ...)",
            "contents": "matchvex_blinn(${1:nml}, ${2:exponent}, ${3:...})"
        },
        {
            "trigger": "matchvex_specular(exponent, ...)",
            "contents": "matchvex_specular(${1:exponent}, ${2:...})"
        },
        {
            "trigger": "matchvex_specular(nml, exponent, ...)",
            "contents": "matchvex_specular(${1:nml}, ${2:exponent}, ${3:...})"
        },
        {
            "trigger": "mattrib(name, P)",
            "contents": "mattrib(${1:name}, ${2:P})"
        },
        {
            "trigger": "max(value1, value2, ...)",
            "contents": "max(${1:value1}, ${2:value2}, ${3:...})"
        },
        {
            "trigger": "max(values)",
            "contents": "max(${1:values})"
        },
        {
            "trigger": "max(value)",
            "contents": "max(${1:value})"
        },
        {
            "trigger": "mdensity(P)",
            "contents": "mdensity(${1:P})"
        },
        {
            "trigger": "metadata(opinput, name)",
            "contents": "metadata(${1:opinput}, ${2:name})"
        },
        {
            "trigger": "metadata(opinput, name, index)",
            "contents": "metadata(${1:opinput}, ${2:name}, ${3:index})"
        },
        {
            "trigger": "metaimport(handle, attrib, P, value)",
            "contents": "metaimport(${1:handle}, ${2:attrib}, ${3:P}, ${4:value})"
        },
        {
            "trigger": "metaimport(file, attribute, P)",
            "contents": "metaimport(${1:file}, ${2:attribute}, ${3:P})"
        },
        {
            "trigger": "metamarch(index, filename, p0, p1, displace_bound)",
            "contents": "metamarch(${1:index}, ${2:filename}, ${3:p0}, ${4:p1}, ${5:displace_bound})"
        },
        {
            "trigger": "metanext(handle)",
            "contents": "metanext(${1:handle})"
        },
        {
            "trigger": "metastart(filename, p)",
            "contents": "metastart(${1:filename}, ${2:p})"
        },
        {
            "trigger": "metaweight(filename, p)",
            "contents": "metaweight(${1:filename}, ${2:p})"
        },
        {
            "trigger": "min(value1, value2, ...)",
            "contents": "min(${1:value1}, ${2:value2}, ${3:...})"
        },
        {
            "trigger": "min(values)",
            "contents": "min(${1:values})"
        },
        {
            "trigger": "min(v)",
            "contents": "min(${1:v})"
        },
        {
            "trigger": "min(value)",
            "contents": "min(${1:value})"
        },
        {
            "trigger": "minpos(geometry, point)",
            "contents": "minpos(${1:geometry}, ${2:point})"
        },
        {
            "trigger": "minpos(geometry, point, maxdist)",
            "contents": "minpos(${1:geometry}, ${2:point}, ${3:maxdist})"
        },
        {
            "trigger": "minpos(geometry, primgroup, point)",
            "contents": "minpos(${1:geometry}, ${2:primgroup}, ${3:point})"
        },
        {
            "trigger": "minpos(geometry, primgroup, point, maxdist)",
            "contents": "minpos(${1:geometry}, ${2:primgroup}, ${3:point}, ${4:maxdist})"
        },
        {
            "trigger": "mspace(P)",
            "contents": "mspace(${1:P})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2, f3, f4)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2, peiod)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:peiod})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2, f4, f4, period)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f4}, ${6:f4}, ${7:period})"
        },
        {
            "trigger": "mwnoise(posx, posy, seed, f1, f2)",
            "contents": "mwnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2})"
        },
        {
            "trigger": "mwnoise(posx, posy, seed, f1, f2, f3, f4)",
            "contents": "mwnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:f3}, ${7:f4})"
        },
        {
            "trigger": "mwnoise(posx, posy, seed, f1, f2, periodx, periody)",
            "contents": "mwnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:periodx}, ${7:periody})"
        },
        {
            "trigger": "mwnoise(posx, posy, seed, f1, f2, f3, f4, periodx, periody)",
            "contents": "mwnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:f3}, ${7:f4}, ${8:periodx}, ${9:periody})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2, periodx, periody)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:periodx}, ${6:periody})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2, f3, f4, periodx, periody)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4}, ${7:periodx}, ${8:periody})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2, periodx, periody, periodx)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:periodx}, ${6:periody}, ${7:periodx})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2, f3, f4, periodx, periody, periodz)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4}, ${7:periodx}, ${8:periody}, ${9:periodz})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2, periodx, periody, periodz, periodw)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:periodx}, ${6:periody}, ${7:periodz}, ${8:periodw})"
        },
        {
            "trigger": "mwnoise(position, seed, f1, f2, f3, f4, periodx, periody, periodz, periodw)",
            "contents": "mwnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4}, ${7:periodx}, ${8:periody}, ${9:periodz}, ${10:periodw})"
        },
        {
            "trigger": "nametopoint(geometry, name)",
            "contents": "nametopoint(${1:geometry}, ${2:name})"
        },
        {
            "trigger": "nametoprim(geometry, name)",
            "contents": "nametoprim(${1:geometry}, ${2:name})"
        },
        {
            "trigger": "nbouncetypes()",
            "contents": "nbouncetypes()"
        },
        {
            "trigger": "ndcdepth(z)",
            "contents": "ndcdepth(${1:z})"
        },
        {
            "trigger": "nearpoint(geometry, pt)",
            "contents": "nearpoint(${1:geometry}, ${2:pt})"
        },
        {
            "trigger": "nearpoint(geometry, pt, maxdist)",
            "contents": "nearpoint(${1:geometry}, ${2:pt}, ${3:maxdist})"
        },
        {
            "trigger": "nearpoint(geometry, ptgroup, pt)",
            "contents": "nearpoint(${1:geometry}, ${2:ptgroup}, ${3:pt})"
        },
        {
            "trigger": "nearpoint(geometry, ptgroup, pt, maxdist)",
            "contents": "nearpoint(${1:geometry}, ${2:ptgroup}, ${3:pt}, ${4:maxdist})"
        },
        {
            "trigger": "nearpoints(geometry, pt, maxdist)",
            "contents": "nearpoints(${1:geometry}, ${2:pt}, ${3:maxdist})"
        },
        {
            "trigger": "nearpoints(geometry, pt, maxdist, maxpts)",
            "contents": "nearpoints(${1:geometry}, ${2:pt}, ${3:maxdist}, ${4:maxpts})"
        },
        {
            "trigger": "nearpoints(geometry, ptgroup, pt, maxdist)",
            "contents": "nearpoints(${1:geometry}, ${2:ptgroup}, ${3:pt}, ${4:maxdist})"
        },
        {
            "trigger": "nearpoints(geometry, ptgroup, pt, maxdist, maxpts)",
            "contents": "nearpoints(${1:geometry}, ${2:ptgroup}, ${3:pt}, ${4:maxdist}, ${5:maxpts})"
        },
        {
            "trigger": "nedgesgroup(filename, groupname)",
            "contents": "nedgesgroup(${1:filename}, ${2:groupname})"
        },
        {
            "trigger": "nedgesgroup(input, groupname)",
            "contents": "nedgesgroup(${1:input}, ${2:groupname})"
        },
        {
            "trigger": "neighbour(geometry, point_num, neighbour_num)",
            "contents": "neighbour(${1:geometry}, ${2:point_num}, ${3:neighbour_num})"
        },
        {
            "trigger": "neighbourcount(geometry, point_num)",
            "contents": "neighbourcount(${1:geometry}, ${2:point_num})"
        },
        {
            "trigger": "neighbours(geometry, ptnum)",
            "contents": "neighbours(${1:geometry}, ${2:ptnum})"
        },
        {
            "trigger": "newsampler(...)",
            "contents": "newsampler(${1:...})"
        },
        {
            "trigger": "newsampler(seed, ...)",
            "contents": "newsampler(${1:seed}, ${2:...})"
        },
        {
            "trigger": "nextsample(sid, sx, sy, ...)",
            "contents": "nextsample(${1:sid}, ${2:sx}, ${3:sy}, ${4:...})"
        },
        {
            "trigger": "nextsample(sid, svec, ...)",
            "contents": "nextsample(${1:sid}, ${2:svec}, ${3:...})"
        },
        {
            "trigger": "ninput(opinput, plane, component, array_index, u, v, frame, ...)",
            "contents": "ninput(${1:opinput}, ${2:plane}, ${3:component}, ${4:array_index}, ${5:u}, ${6:v}, ${7:frame}, ${8:...})"
        },
        {
            "trigger": "ninputs()",
            "contents": "ninputs()"
        },
        {
            "trigger": "noise(pos)",
            "contents": "noise(${1:pos})"
        },
        {
            "trigger": "noise(posx, posy)",
            "contents": "noise(${1:posx}, ${2:posy})"
        },
        {
            "trigger": "noised(x, v, dvdx)",
            "contents": "noised(${1:x}, ${2:v}, ${3:dvdx})"
        },
        {
            "trigger": "noised(x, y, v, dvdx, dvdy)",
            "contents": "noised(${1:x}, ${2:y}, ${3:v}, ${4:dvdx}, ${5:dvdy})"
        },
        {
            "trigger": "noised(xyz, v, dvdx, dvdy, dvdz)",
            "contents": "noised(${1:xyz}, ${2:v}, ${3:dvdx}, ${4:dvdy}, ${5:dvdz})"
        },
        {
            "trigger": "noised(xyzw, v, dvdx, dvdy, dvdz, dvdw)",
            "contents": "noised(${1:xyzw}, ${2:v}, ${3:dvdx}, ${4:dvdy}, ${5:dvdz}, ${6:dvdw})"
        },
        {
            "trigger": "normalize(v)",
            "contents": "normalize(${1:v})"
        },
        {
            "trigger": "normalname()",
            "contents": "normalname()"
        },
        {
            "trigger": "normal_bsdf(b)",
            "contents": "normal_bsdf(${1:b})"
        },
        {
            "trigger": "npoints(geometry)",
            "contents": "npoints(${1:geometry})"
        },
        {
            "trigger": "npointsgroup(geometry, groupname)",
            "contents": "npointsgroup(${1:geometry}, ${2:groupname})"
        },
        {
            "trigger": "nprimitives(geometry)",
            "contents": "nprimitives(${1:geometry})"
        },
        {
            "trigger": "nprimitivesgroup(geometry, groupname)",
            "contents": "nprimitivesgroup(${1:geometry}, ${2:groupname})"
        },
        {
            "trigger": "nrandom(...)",
            "contents": "nrandom(${1:...})"
        },
        {
            "trigger": "nrandom(x, y, ...)",
            "contents": "nrandom(${1:x}, ${2:y}, ${3:...})"
        },
        {
            "trigger": "ntransform(v, transform)",
            "contents": "ntransform(${1:v}, ${2:transform})"
        },
        {
            "trigger": "ntransform(tospace, v)",
            "contents": "ntransform(${1:tospace}, ${2:v})"
        },
        {
            "trigger": "ntransform(fromspace, tospace, v)",
            "contents": "ntransform(${1:fromspace}, ${2:tospace}, ${3:v})"
        },
        {
            "trigger": "nuniqueval(geometry, attribclass, attribute_name)",
            "contents": "nuniqueval(${1:geometry}, ${2:attribclass}, ${3:attribute_name})"
        },
        {
            "trigger": "nvertices(geometry)",
            "contents": "nvertices(${1:geometry})"
        },
        {
            "trigger": "nverticesgroup(geometry, groupname)",
            "contents": "nverticesgroup(${1:geometry}, ${2:groupname})"
        },
        {
            "trigger": "objectstate(query, value)",
            "contents": "objectstate(${1:query}, ${2:value})"
        },
        {
            "trigger": "occlusion(P, N, ...)",
            "contents": "occlusion(${1:P}, ${2:N}, ${3:...})"
        },
        {
            "trigger": "occlusion(coverage, missed_direction, P, N, ...)",
            "contents": "occlusion(${1:coverage}, ${2:missed_direction}, ${3:P}, ${4:N}, ${5:...})"
        },
        {
            "trigger": "ocean_sample(geometry, phase, frequency, amplitude, hscale, time, mode, downsample, pos)",
            "contents": "ocean_sample(${1:geometry}, ${2:phase}, ${3:frequency}, ${4:amplitude}, ${5:hscale}, ${6:time}, ${7:mode}, ${8:downsample}, ${9:pos})"
        },
        {
            "trigger": "ocio_activedisplays()",
            "contents": "ocio_activedisplays()"
        },
        {
            "trigger": "ocio_activeviews()",
            "contents": "ocio_activeviews()"
        },
        {
            "trigger": "ocio_import(space, property, value)",
            "contents": "ocio_import(${1:space}, ${2:property}, ${3:value})"
        },
        {
            "trigger": "ocio_parsecolorspace(input)",
            "contents": "ocio_parsecolorspace(${1:input})"
        },
        {
            "trigger": "ocio_roles()",
            "contents": "ocio_roles()"
        },
        {
            "trigger": "ocio_spaces()",
            "contents": "ocio_spaces()"
        },
        {
            "trigger": "ocio_transform(dest, clr)",
            "contents": "ocio_transform(${1:dest}, ${2:clr})"
        },
        {
            "trigger": "ocio_transform(src, dest, clr)",
            "contents": "ocio_transform(${1:src}, ${2:dest}, ${3:clr})"
        },
        {
            "trigger": "ocio_transform(src, dest, looks, clr)",
            "contents": "ocio_transform(${1:src}, ${2:dest}, ${3:looks}, ${4:clr})"
        },
        {
            "trigger": "onoise(pos)",
            "contents": "onoise(${1:pos})"
        },
        {
            "trigger": "onoise(pos, turbulence, rough, atten)",
            "contents": "onoise(${1:pos}, ${2:turbulence}, ${3:rough}, ${4:atten})"
        },
        {
            "trigger": "onoise(pos, periodX, periodY, periodZ)",
            "contents": "onoise(${1:pos}, ${2:periodX}, ${3:periodY}, ${4:periodZ})"
        },
        {
            "trigger": "onoise(pos, periodX, periodY, periodZ, turbulence, rough, atten)",
            "contents": "onoise(${1:pos}, ${2:periodX}, ${3:periodY}, ${4:periodZ}, ${5:turbulence}, ${6:rough}, ${7:atten})"
        },
        {
            "trigger": "opdigits(str)",
            "contents": "opdigits(${1:str})"
        },
        {
            "trigger": "opdigits()",
            "contents": "opdigits()"
        },
        {
            "trigger": "opend(handle)",
            "contents": "opend(${1:handle})"
        },
        {
            "trigger": "opfullpath(relative_path)",
            "contents": "opfullpath(${1:relative_path})"
        },
        {
            "trigger": "opid(op_path)",
            "contents": "opid(${1:op_path})"
        },
        {
            "trigger": "opid(op_id)",
            "contents": "opid(${1:op_id})"
        },
        {
            "trigger": "opparentbonetransform(path)",
            "contents": "opparentbonetransform(${1:path})"
        },
        {
            "trigger": "opparentbonetransform(path, time)",
            "contents": "opparentbonetransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "opparentbonetransform(opid)",
            "contents": "opparentbonetransform(${1:opid})"
        },
        {
            "trigger": "opparentbonetransform(opid, time)",
            "contents": "opparentbonetransform(${1:opid}, ${2:time})"
        },
        {
            "trigger": "opparenttransform(path)",
            "contents": "opparenttransform(${1:path})"
        },
        {
            "trigger": "opparenttransform(path, time)",
            "contents": "opparenttransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "opparenttransform(opid)",
            "contents": "opparenttransform(${1:opid})"
        },
        {
            "trigger": "opparenttransform(opid, time)",
            "contents": "opparenttransform(${1:opid}, ${2:time})"
        },
        {
            "trigger": "opparmtransform(path)",
            "contents": "opparmtransform(${1:path})"
        },
        {
            "trigger": "opparmtransform(path, time)",
            "contents": "opparmtransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "opparmtransform(opid)",
            "contents": "opparmtransform(${1:opid})"
        },
        {
            "trigger": "opparmtransform(opid, time)",
            "contents": "opparmtransform(${1:opid}, ${2:time})"
        },
        {
            "trigger": "oppreconstrainttransform(path)",
            "contents": "oppreconstrainttransform(${1:path})"
        },
        {
            "trigger": "oppreconstrainttransform(path, time)",
            "contents": "oppreconstrainttransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "oppreconstrainttransform(opid)",
            "contents": "oppreconstrainttransform(${1:opid})"
        },
        {
            "trigger": "oppreconstrainttransform(opid, time)",
            "contents": "oppreconstrainttransform(${1:opid}, ${2:time})"
        },
        {
            "trigger": "oppreparmtransform(path)",
            "contents": "oppreparmtransform(${1:path})"
        },
        {
            "trigger": "oppreparmtransform(path, time)",
            "contents": "oppreparmtransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "oppreparmtransform(opid)",
            "contents": "oppreparmtransform(${1:opid})"
        },
        {
            "trigger": "oppreparmtransform(opid, time)",
            "contents": "oppreparmtransform(${1:opid}, ${2:time})"
        },
        {
            "trigger": "opprerawparmtransform(path)",
            "contents": "opprerawparmtransform(${1:path})"
        },
        {
            "trigger": "opprerawparmtransform(path, time)",
            "contents": "opprerawparmtransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "opprerawparmtransform(opid)",
            "contents": "opprerawparmtransform(${1:opid})"
        },
        {
            "trigger": "opprerawparmtransform(opid, time)",
            "contents": "opprerawparmtransform(${1:opid}, ${2:time})"
        },
        {
            "trigger": "opprerawparmtransform(opid, trsorder, xyzorder, mask)",
            "contents": "opprerawparmtransform(${1:opid}, ${2:trsorder}, ${3:xyzorder}, ${4:mask})"
        },
        {
            "trigger": "oppretransform(path)",
            "contents": "oppretransform(${1:path})"
        },
        {
            "trigger": "oppretransform(path, time)",
            "contents": "oppretransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "oppretransform(opid)",
            "contents": "oppretransform(${1:opid})"
        },
        {
            "trigger": "oppretransform(opid, time)",
            "contents": "oppretransform(${1:opid}, ${2:time})"
        },
        {
            "trigger": "oprawparmtransform(path)",
            "contents": "oprawparmtransform(${1:path})"
        },
        {
            "trigger": "oprawparmtransform(path, time)",
            "contents": "oprawparmtransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "oprawparmtransform(opid)",
            "contents": "oprawparmtransform(${1:opid})"
        },
        {
            "trigger": "oprawparmtransform(opid, time)",
            "contents": "oprawparmtransform(${1:opid}, ${2:time})"
        },
        {
            "trigger": "oprawparmtransform(opid, trsorder, xyzorder, mask)",
            "contents": "oprawparmtransform(${1:opid}, ${2:trsorder}, ${3:xyzorder}, ${4:mask})"
        },
        {
            "trigger": "opstart(message)",
            "contents": "opstart(${1:message})"
        },
        {
            "trigger": "optransform(path)",
            "contents": "optransform(${1:path})"
        },
        {
            "trigger": "optransform(path, time)",
            "contents": "optransform(${1:path}, ${2:time})"
        },
        {
            "trigger": "optransform(op_id)",
            "contents": "optransform(${1:op_id})"
        },
        {
            "trigger": "optransform(op_id, time)",
            "contents": "optransform(${1:op_id}, ${2:time})"
        },
        {
            "trigger": "ord(value)",
            "contents": "ord(${1:value})"
        },
        {
            "trigger": "orthographic(zoom, orthowidth, image_aspect, pixel_aspect, clip_near, clip_far)",
            "contents": "orthographic(${1:zoom}, ${2:orthowidth}, ${3:image_aspect}, ${4:pixel_aspect}, ${5:clip_near}, ${6:clip_far})"
        },
        {
            "trigger": "orthographic(zoom, orthowidth, image_aspect, pixel_aspect, clip_near, clip_far, window)",
            "contents": "orthographic(${1:zoom}, ${2:orthowidth}, ${3:image_aspect}, ${4:pixel_aspect}, ${5:clip_near}, ${6:clip_far}, ${7:window})"
        },
        {
            "trigger": "osd_facecount(geometry)",
            "contents": "osd_facecount(${1:geometry})"
        },
        {
            "trigger": "osd_firstpatch(geometry, face_id)",
            "contents": "osd_firstpatch(${1:geometry}, ${2:face_id})"
        },
        {
            "trigger": "osd_limitsurface(geometry, attrib_name, patch_id, u, v, result)",
            "contents": "osd_limitsurface(${1:geometry}, ${2:attrib_name}, ${3:patch_id}, ${4:u}, ${5:v}, ${6:result})"
        },
        {
            "trigger": "osd_limitsurfacevertex(geometry, attrib_name, face_id, u, v, result)",
            "contents": "osd_limitsurfacevertex(${1:geometry}, ${2:attrib_name}, ${3:face_id}, ${4:u}, ${5:v}, ${6:result})"
        },
        {
            "trigger": "osd_lookupface(geometry, patch_id, patch_u, patch_v, face_id, face_u, face_v)",
            "contents": "osd_lookupface(${1:geometry}, ${2:patch_id}, ${3:patch_u}, ${4:patch_v}, ${5:face_id}, ${6:face_u}, ${7:face_v})"
        },
        {
            "trigger": "osd_lookupface(geometry, patch_id, patch_u, patch_v, face_id, face_u, face_v, attribute)",
            "contents": "osd_lookupface(${1:geometry}, ${2:patch_id}, ${3:patch_u}, ${4:patch_v}, ${5:face_id}, ${6:face_u}, ${7:face_v}, ${8:attribute})"
        },
        {
            "trigger": "osd_lookuppatch(geometry, face_id, face_u, face_v, patch_id, patch_u, patch_v)",
            "contents": "osd_lookuppatch(${1:geometry}, ${2:face_id}, ${3:face_u}, ${4:face_v}, ${5:patch_id}, ${6:patch_u}, ${7:patch_v})"
        },
        {
            "trigger": "osd_lookuppatch(geometry, face_id, face_u, face_v, patch_id, patch_u, patch_v, attribute)",
            "contents": "osd_lookuppatch(${1:geometry}, ${2:face_id}, ${3:face_u}, ${4:face_v}, ${5:patch_id}, ${6:patch_u}, ${7:patch_v}, ${8:attribute})"
        },
        {
            "trigger": "osd_patchcount(geometry)",
            "contents": "osd_patchcount(${1:geometry})"
        },
        {
            "trigger": "osd_patchcount(geometry, face_id)",
            "contents": "osd_patchcount(${1:geometry}, ${2:face_id})"
        },
        {
            "trigger": "osd_patches(geometry, face_id)",
            "contents": "osd_patches(${1:geometry}, ${2:face_id})"
        },
        {
            "trigger": "outerproduct(v, v)",
            "contents": "outerproduct(${1:v}, ${2:v})"
        },
        {
            "trigger": "ow_nspace(v)",
            "contents": "ow_nspace(${1:v})"
        },
        {
            "trigger": "ow_space()",
            "contents": "ow_space()"
        },
        {
            "trigger": "ow_space(v)",
            "contents": "ow_space(${1:v})"
        },
        {
            "trigger": "ow_vspace(v)",
            "contents": "ow_vspace(${1:v})"
        },
        {
            "trigger": "packedtransform(input, primnum, transform)",
            "contents": "packedtransform(${1:input}, ${2:primnum}, ${3:transform})"
        },
        {
            "trigger": "pack_inttosafefloat(i)",
            "contents": "pack_inttosafefloat(${1:i})"
        },
        {
            "trigger": "pathtrace(P, N, ...)",
            "contents": "pathtrace(${1:P}, ${2:N}, ${3:...})"
        },
        {
            "trigger": "pcclose(handle)",
            "contents": "pcclose(${1:handle})"
        },
        {
            "trigger": "pccone(geometry, PChannel, P, dir, angle, max_distance, maxpoints)",
            "contents": "pccone(${1:geometry}, ${2:PChannel}, ${3:P}, ${4:dir}, ${5:angle}, ${6:max_distance}, ${7:maxpoints})"
        },
        {
            "trigger": "pccone(geometry, ptgroup, PChannel, P, dir, angle, max_distance, maxpoints)",
            "contents": "pccone(${1:geometry}, ${2:ptgroup}, ${3:PChannel}, ${4:P}, ${5:dir}, ${6:angle}, ${7:max_distance}, ${8:maxpoints})"
        },
        {
            "trigger": "pccone_radius(geometry, PChannel, RadChannel, radscale, P, dir, angle, max_distance, maxpoints)",
            "contents": "pccone_radius(${1:geometry}, ${2:PChannel}, ${3:RadChannel}, ${4:radscale}, ${5:P}, ${6:dir}, ${7:angle}, ${8:max_distance}, ${9:maxpoints})"
        },
        {
            "trigger": "pccone_radius(geometry, ptgroup, PChannel, RadChannel, radscale, P, dir, angle, max_distance, maxpoints)",
            "contents": "pccone_radius(${1:geometry}, ${2:ptgroup}, ${3:PChannel}, ${4:RadChannel}, ${5:radscale}, ${6:P}, ${7:dir}, ${8:angle}, ${9:max_distance}, ${10:maxpoints})"
        },
        {
            "trigger": "pcconvex(handle, channel, N)",
            "contents": "pcconvex(${1:handle}, ${2:channel}, ${3:N})"
        },
        {
            "trigger": "pcexport(handle, channel_name, value, ...)",
            "contents": "pcexport(${1:handle}, ${2:channel_name}, ${3:value}, ${4:...})"
        },
        {
            "trigger": "pcexport(handle, channel_name, value, radius, ...)",
            "contents": "pcexport(${1:handle}, ${2:channel_name}, ${3:value}, ${4:radius}, ${5:...})"
        },
        {
            "trigger": "pcfarthest(handle)",
            "contents": "pcfarthest(${1:handle})"
        },
        {
            "trigger": "pcfilter(handle, channel_name, ...)",
            "contents": "pcfilter(${1:handle}, ${2:channel_name}, ${3:...})"
        },
        {
            "trigger": "pcfind(geometry, Pchannel, P, radius, maxpoints)",
            "contents": "pcfind(${1:geometry}, ${2:Pchannel}, ${3:P}, ${4:radius}, ${5:maxpoints})"
        },
        {
            "trigger": "pcfind(geometry, ptgroup, Pchannel, P, radius, maxpoints)",
            "contents": "pcfind(${1:geometry}, ${2:ptgroup}, ${3:Pchannel}, ${4:P}, ${5:radius}, ${6:maxpoints})"
        },
        {
            "trigger": "pcfind(geometry, Pchannel, P, radius, maxpoints, distances)",
            "contents": "pcfind(${1:geometry}, ${2:Pchannel}, ${3:P}, ${4:radius}, ${5:maxpoints}, ${6:distances})"
        },
        {
            "trigger": "pcfind(geometry, ptgroup, Pchannel, P, radius, maxpoints, distances)",
            "contents": "pcfind(${1:geometry}, ${2:ptgroup}, ${3:Pchannel}, ${4:P}, ${5:radius}, ${6:maxpoints}, ${7:distances})"
        },
        {
            "trigger": "pcfind_radius(geometry, Pchannel, RadChannel, radscale, P, radius, maxpoints)",
            "contents": "pcfind_radius(${1:geometry}, ${2:Pchannel}, ${3:RadChannel}, ${4:radscale}, ${5:P}, ${6:radius}, ${7:maxpoints})"
        },
        {
            "trigger": "pcfind_radius(geometry, ptgroup, Pchannel, RadChannel, radscale, P, radius, maxpoints)",
            "contents": "pcfind_radius(${1:geometry}, ${2:ptgroup}, ${3:Pchannel}, ${4:RadChannel}, ${5:radscale}, ${6:P}, ${7:radius}, ${8:maxpoints})"
        },
        {
            "trigger": "pcfind_radius(geometry, Pchannel, RadChannel, radscale, P, radius, maxpoints, distances)",
            "contents": "pcfind_radius(${1:geometry}, ${2:Pchannel}, ${3:RadChannel}, ${4:radscale}, ${5:P}, ${6:radius}, ${7:maxpoints}, ${8:distances})"
        },
        {
            "trigger": "pcfind_radius(geometry, ptgroup, Pchannel, RadChannel, radscale, P, radius, maxpoints, distances)",
            "contents": "pcfind_radius(${1:geometry}, ${2:ptgroup}, ${3:Pchannel}, ${4:RadChannel}, ${5:radscale}, ${6:P}, ${7:radius}, ${8:maxpoints}, ${9:distances})"
        },
        {
            "trigger": "pcgenerate(filename, npoints)",
            "contents": "pcgenerate(${1:filename}, ${2:npoints})"
        },
        {
            "trigger": "pcimport(handle, channel_name, value)",
            "contents": "pcimport(${1:handle}, ${2:channel_name}, ${3:value})"
        },
        {
            "trigger": "pcimportbyidx3(handle, channel_name, idx)",
            "contents": "pcimportbyidx3(${1:handle}, ${2:channel_name}, ${3:idx})"
        },
        {
            "trigger": "pcimportbyidx4(handle, channel_name, idx)",
            "contents": "pcimportbyidx4(${1:handle}, ${2:channel_name}, ${3:idx})"
        },
        {
            "trigger": "pcimportbyidxf(handle, channel_name, idx)",
            "contents": "pcimportbyidxf(${1:handle}, ${2:channel_name}, ${3:idx})"
        },
        {
            "trigger": "pcimportbyidxi(handle, channel_name, idx)",
            "contents": "pcimportbyidxi(${1:handle}, ${2:channel_name}, ${3:idx})"
        },
        {
            "trigger": "pcimportbyidxp(handle, channel_name, idx)",
            "contents": "pcimportbyidxp(${1:handle}, ${2:channel_name}, ${3:idx})"
        },
        {
            "trigger": "pcimportbyidxs(handle, channel_name, idx)",
            "contents": "pcimportbyidxs(${1:handle}, ${2:channel_name}, ${3:idx})"
        },
        {
            "trigger": "pcimportbyidxv(handle, channel_name, idx)",
            "contents": "pcimportbyidxv(${1:handle}, ${2:channel_name}, ${3:idx})"
        },
        {
            "trigger": "pciterate(handle)",
            "contents": "pciterate(${1:handle})"
        },
        {
            "trigger": "pcline(geometry, PChannel, P, dir, max_distance, maxpoints)",
            "contents": "pcline(${1:geometry}, ${2:PChannel}, ${3:P}, ${4:dir}, ${5:max_distance}, ${6:maxpoints})"
        },
        {
            "trigger": "pcline(geometry, ptgroup, PChannel, P, dir, max_distance, maxpoints)",
            "contents": "pcline(${1:geometry}, ${2:ptgroup}, ${3:PChannel}, ${4:P}, ${5:dir}, ${6:max_distance}, ${7:maxpoints})"
        },
        {
            "trigger": "pcline_radius(geometry, PChannel, RadChannel, radscale, P, dir, max_distance, maxpoints)",
            "contents": "pcline_radius(${1:geometry}, ${2:PChannel}, ${3:RadChannel}, ${4:radscale}, ${5:P}, ${6:dir}, ${7:max_distance}, ${8:maxpoints})"
        },
        {
            "trigger": "pcline_radius(geometry, ptgroup, PChannel, RadChannel, radscale, P, dir, max_distance, maxpoints)",
            "contents": "pcline_radius(${1:geometry}, ${2:ptgroup}, ${3:PChannel}, ${4:RadChannel}, ${5:radscale}, ${6:P}, ${7:dir}, ${8:max_distance}, ${9:maxpoints})"
        },
        {
            "trigger": "pcnumfound(handle)",
            "contents": "pcnumfound(${1:handle})"
        },
        {
            "trigger": "pcopen(filename, channel, shaded, ...)",
            "contents": "pcopen(${1:filename}, ${2:channel}, ${3:shaded}, ${4:...})"
        },
        {
            "trigger": "pcopen(filename, Pchannel, P, radius, maxpoints, ...)",
            "contents": "pcopen(${1:filename}, ${2:Pchannel}, ${3:P}, ${4:radius}, ${5:maxpoints}, ${6:...})"
        },
        {
            "trigger": "pcopen(filename, Pchannel, P, Nchannel, N, radius, maxpoints, ...)",
            "contents": "pcopen(${1:filename}, ${2:Pchannel}, ${3:P}, ${4:Nchannel}, ${5:N}, ${6:radius}, ${7:maxpoints}, ${8:...})"
        },
        {
            "trigger": "pcopen(opinput, Pchannel, P, radius, maxpoints)",
            "contents": "pcopen(${1:opinput}, ${2:Pchannel}, ${3:P}, ${4:radius}, ${5:maxpoints})"
        },
        {
            "trigger": "pcopenlod(filename, Pchannel, P, min_pts, ...)",
            "contents": "pcopenlod(${1:filename}, ${2:Pchannel}, ${3:P}, ${4:min_pts}, ${5:...})"
        },
        {
            "trigger": "pcsampleleaf(handle, sample)",
            "contents": "pcsampleleaf(${1:handle}, ${2:sample})"
        },
        {
            "trigger": "pcsegment(geometry, PChannel, P0, P1, max_distance, maxpoints)",
            "contents": "pcsegment(${1:geometry}, ${2:PChannel}, ${3:P0}, ${4:P1}, ${5:max_distance}, ${6:maxpoints})"
        },
        {
            "trigger": "pcsegment(geometry, ptgroup, PChannel, P0, P1, max_distance, maxpoints)",
            "contents": "pcsegment(${1:geometry}, ${2:ptgroup}, ${3:PChannel}, ${4:P0}, ${5:P1}, ${6:max_distance}, ${7:maxpoints})"
        },
        {
            "trigger": "pcsegment(geometry, PChannel, P0, P1, max_distance, maxpoints, distances)",
            "contents": "pcsegment(${1:geometry}, ${2:PChannel}, ${3:P0}, ${4:P1}, ${5:max_distance}, ${6:maxpoints}, ${7:distances})"
        },
        {
            "trigger": "pcsegment(geometry, ptgroup, PChannel, P0, P1, max_distance, maxpoints, distances)",
            "contents": "pcsegment(${1:geometry}, ${2:ptgroup}, ${3:PChannel}, ${4:P0}, ${5:P1}, ${6:max_distance}, ${7:maxpoints}, ${8:distances})"
        },
        {
            "trigger": "pcsegment_radius(geometry, PChannel, RadChannel, radscale, P0, P1, max_distance, maxpoints)",
            "contents": "pcsegment_radius(${1:geometry}, ${2:PChannel}, ${3:RadChannel}, ${4:radscale}, ${5:P0}, ${6:P1}, ${7:max_distance}, ${8:maxpoints})"
        },
        {
            "trigger": "pcsegment_radius(geometry, ptgroup, PChannel, RadChannel, radscale, P0, P1, max_distance, maxpoints)",
            "contents": "pcsegment_radius(${1:geometry}, ${2:ptgroup}, ${3:PChannel}, ${4:RadChannel}, ${5:radscale}, ${6:P0}, ${7:P1}, ${8:max_distance}, ${9:maxpoints})"
        },
        {
            "trigger": "pcsegment_radius(geometry, PChannel, RadChannel, radscale, P0, P1, max_distance, maxpoints, distances)",
            "contents": "pcsegment_radius(${1:geometry}, ${2:PChannel}, ${3:RadChannel}, ${4:radscale}, ${5:P0}, ${6:P1}, ${7:max_distance}, ${8:maxpoints}, ${9:distances})"
        },
        {
            "trigger": "pcsegment_radius(geometry, ptgroup, PChannel, RadChannel, radscale, P0, P1, max_distance, maxpoints, distances)",
            "contents": "pcsegment_radius(${1:geometry}, ${2:ptgroup}, ${3:PChannel}, ${4:RadChannel}, ${5:radscale}, ${6:P0}, ${7:P1}, ${8:max_distance}, ${9:maxpoints}, ${10:distances})"
        },
        {
            "trigger": "pcsize(handle)",
            "contents": "pcsize(${1:handle})"
        },
        {
            "trigger": "pcunshaded(handle, channel_name)",
            "contents": "pcunshaded(${1:handle}, ${2:channel_name})"
        },
        {
            "trigger": "pcwrite(filename, ...)",
            "contents": "pcwrite(${1:filename}, ${2:...})"
        },
        {
            "trigger": "perspective(zoom, image_aspect, pixel_aspect, clip_near, clip_far)",
            "contents": "perspective(${1:zoom}, ${2:image_aspect}, ${3:pixel_aspect}, ${4:clip_near}, ${5:clip_far})"
        },
        {
            "trigger": "perspective(zoom, image_aspect, pixel_aspect, clip_near, clip_far, window)",
            "contents": "perspective(${1:zoom}, ${2:image_aspect}, ${3:pixel_aspect}, ${4:clip_near}, ${5:clip_far}, ${6:window})"
        },
        {
            "trigger": "pgfind(geometry, P, radius, maxpoints, divsize)",
            "contents": "pgfind(${1:geometry}, ${2:P}, ${3:radius}, ${4:maxpoints}, ${5:divsize})"
        },
        {
            "trigger": "pgfind(geometry, ptgroup, P, radius, maxpoints, divsize)",
            "contents": "pgfind(${1:geometry}, ${2:ptgroup}, ${3:P}, ${4:radius}, ${5:maxpoints}, ${6:divsize})"
        },
        {
            "trigger": "phong(exponent, ...)",
            "contents": "phong(${1:exponent}, ${2:...})"
        },
        {
            "trigger": "phong(nml, exponent, ...)",
            "contents": "phong(${1:nml}, ${2:exponent}, ${3:...})"
        },
        {
            "trigger": "phong(nml, V, shinyness, ...)",
            "contents": "phong(${1:nml}, ${2:V}, ${3:shinyness}, ${4:...})"
        },
        {
            "trigger": "phongBRDF(L, N, V, rough)",
            "contents": "phongBRDF(${1:L}, ${2:N}, ${3:V}, ${4:rough})"
        },
        {
            "trigger": "phonglobe(dir, exponent, ...)",
            "contents": "phonglobe(${1:dir}, ${2:exponent}, ${3:...})"
        },
        {
            "trigger": "phonglobe(nml, dir, exponent, ...)",
            "contents": "phonglobe(${1:nml}, ${2:dir}, ${3:exponent}, ${4:...})"
        },
        {
            "trigger": "phonglobe(dir, exponentx, exponenty, framex, framey, ...)",
            "contents": "phonglobe(${1:dir}, ${2:exponentx}, ${3:exponenty}, ${4:framex}, ${5:framey}, ${6:...})"
        },
        {
            "trigger": "phonglobe(nml, dir, exponentx, exponenty, framex, framey, ...)",
            "contents": "phonglobe(${1:nml}, ${2:dir}, ${3:exponentx}, ${4:exponenty}, ${5:framex}, ${6:framey}, ${7:...})"
        },
        {
            "trigger": "photonmap(mapname, position, normal, ...)",
            "contents": "photonmap(${1:mapname}, ${2:position}, ${3:normal}, ${4:...})"
        },
        {
            "trigger": "photonmap(mapname, position, normal, color, area, ...)",
            "contents": "photonmap(${1:mapname}, ${2:position}, ${3:normal}, ${4:color}, ${5:area}, ${6:...})"
        },
        {
            "trigger": "planeindex(planename)",
            "contents": "planeindex(${1:planename})"
        },
        {
            "trigger": "planename(planeindex)",
            "contents": "planename(${1:planeindex})"
        },
        {
            "trigger": "planepointdistance(plane_pos, plane_normal, point_pos, intersect_pos)",
            "contents": "planepointdistance(${1:plane_pos}, ${2:plane_normal}, ${3:point_pos}, ${4:intersect_pos})"
        },
        {
            "trigger": "planesize(planeindex)",
            "contents": "planesize(${1:planeindex})"
        },
        {
            "trigger": "planesphereintersect(plane_pos, plane_normal, sphere_pos, sphere_radius, intersect_pos, intersect_radius, intersect_distance)",
            "contents": "planesphereintersect(${1:plane_pos}, ${2:plane_normal}, ${3:sphere_pos}, ${4:sphere_radius}, ${5:intersect_pos}, ${6:intersect_radius}, ${7:intersect_distance})"
        },
        {
            "trigger": "pluralize(noun)",
            "contents": "pluralize(${1:noun})"
        },
        {
            "trigger": "pnoise(x, px)",
            "contents": "pnoise(${1:x}, ${2:px})"
        },
        {
            "trigger": "pnoise(x, p)",
            "contents": "pnoise(${1:x}, ${2:p})"
        },
        {
            "trigger": "pnoise(xyzt, p)",
            "contents": "pnoise(${1:xyzt}, ${2:p})"
        },
        {
            "trigger": "pnoise(x, y, px, py)",
            "contents": "pnoise(${1:x}, ${2:y}, ${3:px}, ${4:py})"
        },
        {
            "trigger": "pnoise(xyz, px, py, pz)",
            "contents": "pnoise(${1:xyz}, ${2:px}, ${3:py}, ${4:pz})"
        },
        {
            "trigger": "pnoise(xyzt, px, py, pz, pt)",
            "contents": "pnoise(${1:xyzt}, ${2:px}, ${3:py}, ${4:pz}, ${5:pt})"
        },
        {
            "trigger": "point(geometry, attribute_name, pointnumber)",
            "contents": "point(${1:geometry}, ${2:attribute_name}, ${3:pointnumber})"
        },
        {
            "trigger": "pointattrib(geometry, attribute_name, pointnumber, success)",
            "contents": "pointattrib(${1:geometry}, ${2:attribute_name}, ${3:pointnumber}, ${4:success})"
        },
        {
            "trigger": "pointattribsize(geometry, attribute_name)",
            "contents": "pointattribsize(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "pointattribtype(geometry, attribute_name)",
            "contents": "pointattribtype(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "pointattribtypeinfo(geometry, attribute_name)",
            "contents": "pointattribtypeinfo(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "pointedge(geometry, point1, point2)",
            "contents": "pointedge(${1:geometry}, ${2:point1}, ${3:point2})"
        },
        {
            "trigger": "pointhedge(geometry, point)",
            "contents": "pointhedge(${1:geometry}, ${2:point})"
        },
        {
            "trigger": "pointhedge(geometry, srcpoint, dstpoint)",
            "contents": "pointhedge(${1:geometry}, ${2:srcpoint}, ${3:dstpoint})"
        },
        {
            "trigger": "pointhedgenext(geometry, hedge)",
            "contents": "pointhedgenext(${1:geometry}, ${2:hedge})"
        },
        {
            "trigger": "pointlocaltransforms(geometry, pnts)",
            "contents": "pointlocaltransforms(${1:geometry}, ${2:pnts})"
        },
        {
            "trigger": "pointname()",
            "contents": "pointname()"
        },
        {
            "trigger": "pointprims(geometry, ptnum)",
            "contents": "pointprims(${1:geometry}, ${2:ptnum})"
        },
        {
            "trigger": "pointtransform(geometry, pnt)",
            "contents": "pointtransform(${1:geometry}, ${2:pnt})"
        },
        {
            "trigger": "pointtransformrigid(geometry, pnt)",
            "contents": "pointtransformrigid(${1:geometry}, ${2:pnt})"
        },
        {
            "trigger": "pointtransforms(geometry, pnts)",
            "contents": "pointtransforms(${1:geometry}, ${2:pnts})"
        },
        {
            "trigger": "pointtransformsrigid(geometry, pnts)",
            "contents": "pointtransformsrigid(${1:geometry}, ${2:pnts})"
        },
        {
            "trigger": "pointvertex(geometry, point_num)",
            "contents": "pointvertex(${1:geometry}, ${2:point_num})"
        },
        {
            "trigger": "pointvertices(geometry, ptnum)",
            "contents": "pointvertices(${1:geometry}, ${2:ptnum})"
        },
        {
            "trigger": "polardecomp(transform)",
            "contents": "polardecomp(${1:transform})"
        },
        {
            "trigger": "polardecomp(transform, rot, stretch, check_determinant)",
            "contents": "polardecomp(${1:transform}, ${2:rot}, ${3:stretch}, ${4:check_determinant})"
        },
        {
            "trigger": "polyneighbours(geometry, primnum)",
            "contents": "polyneighbours(${1:geometry}, ${2:primnum})"
        },
        {
            "trigger": "pop(array)",
            "contents": "pop(${1:array})"
        },
        {
            "trigger": "pop(array, index)",
            "contents": "pop(${1:array}, ${2:index})"
        },
        {
            "trigger": "pow(n, exponent)",
            "contents": "pow(${1:n}, ${2:exponent})"
        },
        {
            "trigger": "pow(v, exponent)",
            "contents": "pow(${1:v}, ${2:exponent})"
        },
        {
            "trigger": "predicate_incircle(a, b, c, d)",
            "contents": "predicate_incircle(${1:a}, ${2:b}, ${3:c}, ${4:d})"
        },
        {
            "trigger": "predicate_insphere(a, b, c, d, e)",
            "contents": "predicate_insphere(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:e})"
        },
        {
            "trigger": "predicate_orient2d(a, b, c)",
            "contents": "predicate_orient2d(${1:a}, ${2:b}, ${3:c})"
        },
        {
            "trigger": "predicate_orient3d(a, b, c, d)",
            "contents": "predicate_orient3d(${1:a}, ${2:b}, ${3:c}, ${4:d})"
        },
        {
            "trigger": "premul(a, b)",
            "contents": "premul(${1:a}, ${2:b})"
        },
        {
            "trigger": "premul(m, a, b)",
            "contents": "premul(${1:m}, ${2:a}, ${3:b})"
        },
        {
            "trigger": "prerotate(m, amount, axis)",
            "contents": "prerotate(${1:m}, ${2:amount}, ${3:axis})"
        },
        {
            "trigger": "prerotate(m, angles, xyz)",
            "contents": "prerotate(${1:m}, ${2:angles}, ${3:xyz})"
        },
        {
            "trigger": "prerotate(m, angle, axis)",
            "contents": "prerotate(${1:m}, ${2:angle}, ${3:axis})"
        },
        {
            "trigger": "prescale(m, scale_vector)",
            "contents": "prescale(${1:m}, ${2:scale_vector})"
        },
        {
            "trigger": "pretranslate(m, amount)",
            "contents": "pretranslate(${1:m}, ${2:amount})"
        },
        {
            "trigger": "prim(geometry, attribute_name, primnumber)",
            "contents": "prim(${1:geometry}, ${2:attribute_name}, ${3:primnumber})"
        },
        {
            "trigger": "primarclen(geometry, uv1, uv2, prim_num)",
            "contents": "primarclen(${1:geometry}, ${2:uv1}, ${3:uv2}, ${4:prim_num})"
        },
        {
            "trigger": "primarclen(geometry, uv1, uv2, prim_num, divs)",
            "contents": "primarclen(${1:geometry}, ${2:uv1}, ${3:uv2}, ${4:prim_num}, ${5:divs})"
        },
        {
            "trigger": "primarclen(geometry, uv1, uv2, prim_num, divs, primuvmode)",
            "contents": "primarclen(${1:geometry}, ${2:uv1}, ${3:uv2}, ${4:prim_num}, ${5:divs}, ${6:primuvmode})"
        },
        {
            "trigger": "primarclen(geometry, uv1, uv2, prim_num, divs, primuvmode, primuvtol)",
            "contents": "primarclen(${1:geometry}, ${2:uv1}, ${3:uv2}, ${4:prim_num}, ${5:divs}, ${6:primuvmode}, ${7:primuvtol})"
        },
        {
            "trigger": "primattrib(geometry, attribute_name, prim, success)",
            "contents": "primattrib(${1:geometry}, ${2:attribute_name}, ${3:prim}, ${4:success})"
        },
        {
            "trigger": "primattribsize(geometry, attribute_name)",
            "contents": "primattribsize(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "primattribtype(geometry, attribute_name)",
            "contents": "primattribtype(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "primattribtypeinfo(geometry, attribute_name)",
            "contents": "primattribtypeinfo(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "primduv(geometry, prim_number, uv, du, dv)",
            "contents": "primduv(${1:geometry}, ${2:prim_number}, ${3:uv}, ${4:du}, ${5:dv})"
        },
        {
            "trigger": "primfind(geometry, min, max)",
            "contents": "primfind(${1:geometry}, ${2:min}, ${3:max})"
        },
        {
            "trigger": "primfind(geometry, group, min, max)",
            "contents": "primfind(${1:geometry}, ${2:group}, ${3:min}, ${4:max})"
        },
        {
            "trigger": "primhedge(geometry, prim)",
            "contents": "primhedge(${1:geometry}, ${2:prim})"
        },
        {
            "trigger": "primintrinsic(geometry, intrinsic_name, prim_num)",
            "contents": "primintrinsic(${1:geometry}, ${2:intrinsic_name}, ${3:prim_num})"
        },
        {
            "trigger": "primpoint(geometry, primnum, vertex)",
            "contents": "primpoint(${1:geometry}, ${2:primnum}, ${3:vertex})"
        },
        {
            "trigger": "primpoints(geometry, primnum)",
            "contents": "primpoints(${1:geometry}, ${2:primnum})"
        },
        {
            "trigger": "primuv(geometry, attribute_name, prim_num, uvw)",
            "contents": "primuv(${1:geometry}, ${2:attribute_name}, ${3:prim_num}, ${4:uvw})"
        },
        {
            "trigger": "primuvconvert(geometry, uv, prim_num, mode)",
            "contents": "primuvconvert(${1:geometry}, ${2:uv}, ${3:prim_num}, ${4:mode})"
        },
        {
            "trigger": "primuvconvert(geometry, uv, prim_num, mode, tolerance)",
            "contents": "primuvconvert(${1:geometry}, ${2:uv}, ${3:prim_num}, ${4:mode}, ${5:tolerance})"
        },
        {
            "trigger": "primvertex(geometry, primnum, vertex)",
            "contents": "primvertex(${1:geometry}, ${2:primnum}, ${3:vertex})"
        },
        {
            "trigger": "primvertexcount(geometry, prim_num)",
            "contents": "primvertexcount(${1:geometry}, ${2:prim_num})"
        },
        {
            "trigger": "primvertices(geometry, primnum)",
            "contents": "primvertices(${1:geometry}, ${2:primnum})"
        },
        {
            "trigger": "prim_attribute(geometry, value, attribute_name, prim_number, u, v)",
            "contents": "prim_attribute(${1:geometry}, ${2:value}, ${3:attribute_name}, ${4:prim_number}, ${5:u}, ${6:v})"
        },
        {
            "trigger": "prim_attribute(geometry, value, attribute_name, prim_number, uvw)",
            "contents": "prim_attribute(${1:geometry}, ${2:value}, ${3:attribute_name}, ${4:prim_number}, ${5:uvw})"
        },
        {
            "trigger": "prim_normal(geometry, prim_number, uvw)",
            "contents": "prim_normal(${1:geometry}, ${2:prim_number}, ${3:uvw})"
        },
        {
            "trigger": "prim_normal(geometry, prim_number, u, v)",
            "contents": "prim_normal(${1:geometry}, ${2:prim_number}, ${3:u}, ${4:v})"
        },
        {
            "trigger": "prim_normal(geometry, prim_number, u, v, w)",
            "contents": "prim_normal(${1:geometry}, ${2:prim_number}, ${3:u}, ${4:v}, ${5:w})"
        },
        {
            "trigger": "printf(format, ...)",
            "contents": "printf(${1:format}, ${2:...})"
        },
        {
            "trigger": "print_once(msg, ...)",
            "contents": "print_once(${1:msg}, ${2:...})"
        },
        {
            "trigger": "product(n)",
            "contents": "product(${1:n})"
        },
        {
            "trigger": "product(v)",
            "contents": "product(${1:v})"
        },
        {
            "trigger": "product(arr)",
            "contents": "product(${1:arr})"
        },
        {
            "trigger": "ptexture(map, face_id, ...)",
            "contents": "ptexture(${1:map}, ${2:face_id}, ${3:...})"
        },
        {
            "trigger": "ptexture(map, face_id, s, t, ...)",
            "contents": "ptexture(${1:map}, ${2:face_id}, ${3:s}, ${4:t}, ${5:...})"
        },
        {
            "trigger": "ptlined(P0, P1, Q)",
            "contents": "ptlined(${1:P0}, ${2:P1}, ${3:Q})"
        },
        {
            "trigger": "ptransform(vec, transform)",
            "contents": "ptransform(${1:vec}, ${2:transform})"
        },
        {
            "trigger": "ptransform(tospace, vec)",
            "contents": "ptransform(${1:tospace}, ${2:vec})"
        },
        {
            "trigger": "ptransform(fromspace, tospace, vec)",
            "contents": "ptransform(${1:fromspace}, ${2:tospace}, ${3:vec})"
        },
        {
            "trigger": "push(array, value)",
            "contents": "push(${1:array}, ${2:value})"
        },
        {
            "trigger": "push(array, values)",
            "contents": "push(${1:array}, ${2:values})"
        },
        {
            "trigger": "pxnoise(x, xp)",
            "contents": "pxnoise(${1:x}, ${2:xp})"
        },
        {
            "trigger": "pxnoise(x, y, xp, yp)",
            "contents": "pxnoise(${1:x}, ${2:y}, ${3:xp}, ${4:yp})"
        },
        {
            "trigger": "pxnoise(xyz, xp, yp, zp)",
            "contents": "pxnoise(${1:xyz}, ${2:xp}, ${3:yp}, ${4:zp})"
        },
        {
            "trigger": "pxnoise(xyzt, xp, yp, zp, wp)",
            "contents": "pxnoise(${1:xyzt}, ${2:xp}, ${3:yp}, ${4:zp}, ${5:wp})"
        },
        {
            "trigger": "pxnoised(x, px, v, dvdx)",
            "contents": "pxnoised(${1:x}, ${2:px}, ${3:v}, ${4:dvdx})"
        },
        {
            "trigger": "pxnoised(x, y, px, py, v, dvdx, dvdy)",
            "contents": "pxnoised(${1:x}, ${2:y}, ${3:px}, ${4:py}, ${5:v}, ${6:dvdx}, ${7:dvdy})"
        },
        {
            "trigger": "pxnoised(xyz, px, py, pz, v, dvdx, dvdy, dvdz)",
            "contents": "pxnoised(${1:xyz}, ${2:px}, ${3:py}, ${4:pz}, ${5:v}, ${6:dvdx}, ${7:dvdy}, ${8:dvdz})"
        },
        {
            "trigger": "pxnoised(xyzw, px, py, pz, pw, v, dvdx, dvdy, dvdz, dvdw)",
            "contents": "pxnoised(${1:xyzw}, ${2:px}, ${3:py}, ${4:pz}, ${5:pw}, ${6:v}, ${7:dvdx}, ${8:dvdy}, ${9:dvdz}, ${10:dvdw})"
        },
        {
            "trigger": "qconvert(quaternion)",
            "contents": "qconvert(${1:quaternion})"
        },
        {
            "trigger": "qconvert(quaternion, offset)",
            "contents": "qconvert(${1:quaternion}, ${2:offset})"
        },
        {
            "trigger": "qdistance(q1, q2)",
            "contents": "qdistance(${1:q1}, ${2:q2})"
        },
        {
            "trigger": "qinvert(quaternion)",
            "contents": "qinvert(${1:quaternion})"
        },
        {
            "trigger": "qmultiply(q1, q2)",
            "contents": "qmultiply(${1:q1}, ${2:q2})"
        },
        {
            "trigger": "qrotate(quaternion, v)",
            "contents": "qrotate(${1:quaternion}, ${2:v})"
        },
        {
            "trigger": "quaternion(rotations)",
            "contents": "quaternion(${1:rotations})"
        },
        {
            "trigger": "quaternion(angle, axis)",
            "contents": "quaternion(${1:angle}, ${2:axis})"
        },
        {
            "trigger": "quaternion(angleaxis)",
            "contents": "quaternion(${1:angleaxis})"
        },
        {
            "trigger": "quaterniontoeuler(orient, order)",
            "contents": "quaterniontoeuler(${1:orient}, ${2:order})"
        },
        {
            "trigger": "radians(num_in_degs)",
            "contents": "radians(${1:num_in_degs})"
        },
        {
            "trigger": "radians(nums_in_degs)",
            "contents": "radians(${1:nums_in_degs})"
        },
        {
            "trigger": "ramp_lookup(pos, ramp)",
            "contents": "ramp_lookup(${1:pos}, ${2:ramp})"
        },
        {
            "trigger": "ramp_lookup(pos, basis, key, val)",
            "contents": "ramp_lookup(${1:pos}, ${2:basis}, ${3:key}, ${4:val})"
        },
        {
            "trigger": "ramp_unpack(ramp, basis, pos, value)",
            "contents": "ramp_unpack(${1:ramp}, ${2:basis}, ${3:pos}, ${4:value})"
        },
        {
            "trigger": "rand(seed)",
            "contents": "rand(${1:seed})"
        },
        {
            "trigger": "rand(seed, seed2)",
            "contents": "rand(${1:seed}, ${2:seed2})"
        },
        {
            "trigger": "random(position)",
            "contents": "random(${1:position})"
        },
        {
            "trigger": "random(xpos, ypos)",
            "contents": "random(${1:xpos}, ${2:ypos})"
        },
        {
            "trigger": "random_brj(seed, offset)",
            "contents": "random_brj(${1:seed}, ${2:offset})"
        },
        {
            "trigger": "random_fhash(seed)",
            "contents": "random_fhash(${1:seed})"
        },
        {
            "trigger": "random_fhash(seed, seed2)",
            "contents": "random_fhash(${1:seed}, ${2:seed2})"
        },
        {
            "trigger": "random_ihash(seed)",
            "contents": "random_ihash(${1:seed})"
        },
        {
            "trigger": "random_poisson(seed, mean)",
            "contents": "random_poisson(${1:seed}, ${2:mean})"
        },
        {
            "trigger": "random_poisson(seed, mean, minvalue, maxvalue)",
            "contents": "random_poisson(${1:seed}, ${2:mean}, ${3:minvalue}, ${4:maxvalue})"
        },
        {
            "trigger": "random_shash(seed)",
            "contents": "random_shash(${1:seed})"
        },
        {
            "trigger": "random_sobol(seed, offset)",
            "contents": "random_sobol(${1:seed}, ${2:offset})"
        },
        {
            "trigger": "rawcolormap(filename, uvw, ...)",
            "contents": "rawcolormap(${1:filename}, ${2:uvw}, ${3:...})"
        },
        {
            "trigger": "rawcolormap(filename, u, v, ...)",
            "contents": "rawcolormap(${1:filename}, ${2:u}, ${3:v}, ${4:...})"
        },
        {
            "trigger": "rawcolormap(filename, uv, du, dv, samples, ...)",
            "contents": "rawcolormap(${1:filename}, ${2:uv}, ${3:du}, ${4:dv}, ${5:samples}, ${6:...})"
        },
        {
            "trigger": "rawcolormap(filename, uv0, uv1, uv2, uv3, ...)",
            "contents": "rawcolormap(${1:filename}, ${2:uv0}, ${3:uv1}, ${4:uv2}, ${5:uv3}, ${6:...})"
        },
        {
            "trigger": "rawcolormap(filename, uv0, uv1, uv2, uv3, samples, ...)",
            "contents": "rawcolormap(${1:filename}, ${2:uv0}, ${3:uv1}, ${4:uv2}, ${5:uv3}, ${6:samples}, ${7:...})"
        },
        {
            "trigger": "rawcolormap(filename, u0, v0, u1, v1, u2, v2, u3, v3, samples, ...)",
            "contents": "rawcolormap(${1:filename}, ${2:u0}, ${3:v0}, ${4:u1}, ${5:v1}, ${6:u2}, ${7:v2}, ${8:u3}, ${9:v3}, ${10:samples}, ${11:...})"
        },
        {
            "trigger": "rayhittest(P, D, bias, ...)",
            "contents": "rayhittest(${1:P}, ${2:D}, ${3:bias}, ${4:...})"
        },
        {
            "trigger": "rayhittest(P, D, pHit, nHit, bias, ...)",
            "contents": "rayhittest(${1:P}, ${2:D}, ${3:pHit}, ${4:nHit}, ${5:bias}, ${6:...})"
        },
        {
            "trigger": "rayimport(name, value)",
            "contents": "rayimport(${1:name}, ${2:value})"
        },
        {
            "trigger": "reflect(direction, normal)",
            "contents": "reflect(${1:direction}, ${2:normal})"
        },
        {
            "trigger": "reflectlight(bias, max_contrib, ...)",
            "contents": "reflectlight(${1:bias}, ${2:max_contrib}, ${3:...})"
        },
        {
            "trigger": "reflectlight(P, D, bias, max_contrib, ...)",
            "contents": "reflectlight(${1:P}, ${2:D}, ${3:bias}, ${4:max_contrib}, ${5:...})"
        },
        {
            "trigger": "reflectlight(P, N, I, bias, max_contrib, ...)",
            "contents": "reflectlight(${1:P}, ${2:N}, ${3:I}, ${4:bias}, ${5:max_contrib}, ${6:...})"
        },
        {
            "trigger": "refract(direction, normal, index)",
            "contents": "refract(${1:direction}, ${2:normal}, ${3:index})"
        },
        {
            "trigger": "refractlight(cf, of, af, P, D, bias, max_contrib, ...)",
            "contents": "refractlight(${1:cf}, ${2:of}, ${3:af}, ${4:P}, ${5:D}, ${6:bias}, ${7:max_contrib}, ${8:...})"
        },
        {
            "trigger": "refractlight(cf, of, af, P, N, I, eta, bias, max_contrib, ...)",
            "contents": "refractlight(${1:cf}, ${2:of}, ${3:af}, ${4:P}, ${5:N}, ${6:I}, ${7:eta}, ${8:bias}, ${9:max_contrib}, ${10:...})"
        },
        {
            "trigger": "relativepath(src, dest)",
            "contents": "relativepath(${1:src}, ${2:dest})"
        },
        {
            "trigger": "relbbox(geometry, position)",
            "contents": "relbbox(${1:geometry}, ${2:position})"
        },
        {
            "trigger": "relbbox(geometry, primgroup, position)",
            "contents": "relbbox(${1:geometry}, ${2:primgroup}, ${3:position})"
        },
        {
            "trigger": "relbbox(position)",
            "contents": "relbbox(${1:position})"
        },
        {
            "trigger": "relpath(abspath)",
            "contents": "relpath(${1:abspath})"
        },
        {
            "trigger": "relpointbbox(geometry, position)",
            "contents": "relpointbbox(${1:geometry}, ${2:position})"
        },
        {
            "trigger": "relpointbbox(geometry, pointgroup, position)",
            "contents": "relpointbbox(${1:geometry}, ${2:pointgroup}, ${3:position})"
        },
        {
            "trigger": "removeindex(array, index)",
            "contents": "removeindex(${1:array}, ${2:index})"
        },
        {
            "trigger": "removeindex(dictionary, index)",
            "contents": "removeindex(${1:dictionary}, ${2:index})"
        },
        {
            "trigger": "removepoint(geohandle, point_number)",
            "contents": "removepoint(${1:geohandle}, ${2:point_number})"
        },
        {
            "trigger": "removepoint(geohandle, point_number, and_prims)",
            "contents": "removepoint(${1:geohandle}, ${2:point_number}, ${3:and_prims})"
        },
        {
            "trigger": "removeprim(geohandle, prim_number, andpoints)",
            "contents": "removeprim(${1:geohandle}, ${2:prim_number}, ${3:andpoints})"
        },
        {
            "trigger": "removevalue(array, value)",
            "contents": "removevalue(${1:array}, ${2:value})"
        },
        {
            "trigger": "removevertex(geohandle, linear_vertex_index)",
            "contents": "removevertex(${1:geohandle}, ${2:linear_vertex_index})"
        },
        {
            "trigger": "renderstate(query, value)",
            "contents": "renderstate(${1:query}, ${2:value})"
        },
        {
            "trigger": "renderstate(mat, query, value)",
            "contents": "renderstate(${1:mat}, ${2:query}, ${3:value})"
        },
        {
            "trigger": "reorder(value, indices)",
            "contents": "reorder(${1:value}, ${2:indices})"
        },
        {
            "trigger": "reorder(values, indices)",
            "contents": "reorder(${1:values}, ${2:indices})"
        },
        {
            "trigger": "resample_linear(input, new_length)",
            "contents": "resample_linear(${1:input}, ${2:new_length})"
        },
        {
            "trigger": "resize(array, size)",
            "contents": "resize(${1:array}, ${2:size})"
        },
        {
            "trigger": "resolvemissedray(dir, time, mask, ...)",
            "contents": "resolvemissedray(${1:dir}, ${2:time}, ${3:mask}, ${4:...})"
        },
        {
            "trigger": "reverse(str)",
            "contents": "reverse(${1:str})"
        },
        {
            "trigger": "reverse(values)",
            "contents": "reverse(${1:values})"
        },
        {
            "trigger": "re_find(regex, input)",
            "contents": "re_find(${1:regex}, ${2:input})"
        },
        {
            "trigger": "re_find(regex, input, start)",
            "contents": "re_find(${1:regex}, ${2:input}, ${3:start})"
        },
        {
            "trigger": "re_find(regex, input, start, end)",
            "contents": "re_find(${1:regex}, ${2:input}, ${3:start}, ${4:end})"
        },
        {
            "trigger": "re_find(start_pos, end_pos, regex, input)",
            "contents": "re_find(${1:start_pos}, ${2:end_pos}, ${3:regex}, ${4:input})"
        },
        {
            "trigger": "re_find(start_pos, end_pos, regex, input, start)",
            "contents": "re_find(${1:start_pos}, ${2:end_pos}, ${3:regex}, ${4:input}, ${5:start})"
        },
        {
            "trigger": "re_find(start_pos, end_pos, regex, input, start, end)",
            "contents": "re_find(${1:start_pos}, ${2:end_pos}, ${3:regex}, ${4:input}, ${5:start}, ${6:end})"
        },
        {
            "trigger": "re_findall(regex, input)",
            "contents": "re_findall(${1:regex}, ${2:input})"
        },
        {
            "trigger": "re_findall(regex, input, start)",
            "contents": "re_findall(${1:regex}, ${2:input}, ${3:start})"
        },
        {
            "trigger": "re_findall(regex, input, start, end)",
            "contents": "re_findall(${1:regex}, ${2:input}, ${3:start}, ${4:end})"
        },
        {
            "trigger": "re_match(regex, input)",
            "contents": "re_match(${1:regex}, ${2:input})"
        },
        {
            "trigger": "re_replace(regex, replacement, input, maxreplace)",
            "contents": "re_replace(${1:regex}, ${2:replacement}, ${3:input}, ${4:maxreplace})"
        },
        {
            "trigger": "re_split(regex, input, maxsplits)",
            "contents": "re_split(${1:regex}, ${2:input}, ${3:maxsplits})"
        },
        {
            "trigger": "rgbtohsv(rgb)",
            "contents": "rgbtohsv(${1:rgb})"
        },
        {
            "trigger": "rgbtohsv(r, g, b)",
            "contents": "rgbtohsv(${1:r}, ${2:g}, ${3:b})"
        },
        {
            "trigger": "rgbtoxyz(rgb)",
            "contents": "rgbtoxyz(${1:rgb})"
        },
        {
            "trigger": "rint(n)",
            "contents": "rint(${1:n})"
        },
        {
            "trigger": "rint(v)",
            "contents": "rint(${1:v})"
        },
        {
            "trigger": "rotate(m, amount)",
            "contents": "rotate(${1:m}, ${2:amount})"
        },
        {
            "trigger": "rotate(m, amount, axis)",
            "contents": "rotate(${1:m}, ${2:amount}, ${3:axis})"
        },
        {
            "trigger": "rotate(m, angles, xyz)",
            "contents": "rotate(${1:m}, ${2:angles}, ${3:xyz})"
        },
        {
            "trigger": "rotate(m, angle, axis)",
            "contents": "rotate(${1:m}, ${2:angle}, ${3:axis})"
        },
        {
            "trigger": "rotate_x_to(direction, v)",
            "contents": "rotate_x_to(${1:direction}, ${2:v})"
        },
        {
            "trigger": "rstrip(value)",
            "contents": "rstrip(${1:value})"
        },
        {
            "trigger": "rstrip(value, whitespace)",
            "contents": "rstrip(${1:value}, ${2:whitespace})"
        },
        {
            "trigger": "sampledisk(x, y, sx, sy)",
            "contents": "sampledisk(${1:x}, ${2:y}, ${3:sx}, ${4:sy})"
        },
        {
            "trigger": "sample_bsdf(F, viewer_u, dir, eval, type, sx, sy, ...)",
            "contents": "sample_bsdf(${1:F}, ${2:viewer_u}, ${3:dir}, ${4:eval}, ${5:type}, ${6:sx}, ${7:sy}, ${8:...})"
        },
        {
            "trigger": "sample_bsdf(F, viewer_u, dir, eval, type, sx, sy, mask, ...)",
            "contents": "sample_bsdf(${1:F}, ${2:viewer_u}, ${3:dir}, ${4:eval}, ${5:type}, ${6:sx}, ${7:sy}, ${8:mask}, ${9:...})"
        },
        {
            "trigger": "sample_bsdf(F, viewer_u, dir, eval, pdf, type, sx, sy, ...)",
            "contents": "sample_bsdf(${1:F}, ${2:viewer_u}, ${3:dir}, ${4:eval}, ${5:pdf}, ${6:type}, ${7:sx}, ${8:sy}, ${9:...})"
        },
        {
            "trigger": "sample_bsdf(F, viewer_u, dir, eval, pdf, type, sx, sy, mask, ...)",
            "contents": "sample_bsdf(${1:F}, ${2:viewer_u}, ${3:dir}, ${4:eval}, ${5:pdf}, ${6:type}, ${7:sx}, ${8:sy}, ${9:mask}, ${10:...})"
        },
        {
            "trigger": "sample_bsdf(b, viewer_u, normal_v, flags, dir, eval, pdf, type, sx, sy, mask, ...)",
            "contents": "sample_bsdf(${1:b}, ${2:viewer_u}, ${3:normal_v}, ${4:flags}, ${5:dir}, ${6:eval}, ${7:pdf}, ${8:type}, ${9:sx}, ${10:sy}, ${11:mask}, ${12:...})"
        },
        {
            "trigger": "sample_cauchy(u)",
            "contents": "sample_cauchy(${1:u})"
        },
        {
            "trigger": "sample_cauchy(scale, u)",
            "contents": "sample_cauchy(${1:scale}, ${2:u})"
        },
        {
            "trigger": "sample_cauchy(origscale, minvalue, maxvalue, u)",
            "contents": "sample_cauchy(${1:origscale}, ${2:minvalue}, ${3:maxvalue}, ${4:u})"
        },
        {
            "trigger": "sample_cdf(cdf, uniform_rand)",
            "contents": "sample_cdf(${1:cdf}, ${2:uniform_rand})"
        },
        {
            "trigger": "sample_cdf(cdf, uniform_rand, index, x)",
            "contents": "sample_cdf(${1:cdf}, ${2:uniform_rand}, ${3:index}, ${4:x})"
        },
        {
            "trigger": "sample_cdf(cdf, uniform_rand, index, x, pdf)",
            "contents": "sample_cdf(${1:cdf}, ${2:uniform_rand}, ${3:index}, ${4:x}, ${5:pdf})"
        },
        {
            "trigger": "sample_circle_arc(center, maxangle, u)",
            "contents": "sample_circle_arc(${1:center}, ${2:maxangle}, ${3:u})"
        },
        {
            "trigger": "sample_circle_edge_uniform(u)",
            "contents": "sample_circle_edge_uniform(${1:u})"
        },
        {
            "trigger": "sample_circle_ring_uniform(u, alpha)",
            "contents": "sample_circle_ring_uniform(${1:u}, ${2:alpha})"
        },
        {
            "trigger": "sample_circle_slice(center, maxangle, u)",
            "contents": "sample_circle_slice(${1:center}, ${2:maxangle}, ${3:u})"
        },
        {
            "trigger": "sample_circle_uniform(u)",
            "contents": "sample_circle_uniform(${1:u})"
        },
        {
            "trigger": "sample_direction_cone(center, maxangle, u)",
            "contents": "sample_direction_cone(${1:center}, ${2:maxangle}, ${3:u})"
        },
        {
            "trigger": "sample_direction_uniform(u)",
            "contents": "sample_direction_uniform(${1:u})"
        },
        {
            "trigger": "sample_discrete(nvalues, u)",
            "contents": "sample_discrete(${1:nvalues}, ${2:u})"
        },
        {
            "trigger": "sample_discrete(weights, u)",
            "contents": "sample_discrete(${1:weights}, ${2:u})"
        },
        {
            "trigger": "sample_exponential(u)",
            "contents": "sample_exponential(${1:u})"
        },
        {
            "trigger": "sample_exponential(mean, u)",
            "contents": "sample_exponential(${1:mean}, ${2:u})"
        },
        {
            "trigger": "sample_exponential(origmean, maxvalue, u)",
            "contents": "sample_exponential(${1:origmean}, ${2:maxvalue}, ${3:u})"
        },
        {
            "trigger": "sample_geometry(origin, sample, time, ...)",
            "contents": "sample_geometry(${1:origin}, ${2:sample}, ${3:time}, ${4:...})"
        },
        {
            "trigger": "sample_hemisphere(u)",
            "contents": "sample_hemisphere(${1:u})"
        },
        {
            "trigger": "sample_hemisphere(center, u)",
            "contents": "sample_hemisphere(${1:center}, ${2:u})"
        },
        {
            "trigger": "sample_hemisphere(bias, u)",
            "contents": "sample_hemisphere(${1:bias}, ${2:u})"
        },
        {
            "trigger": "sample_hemisphere(center, bias, u)",
            "contents": "sample_hemisphere(${1:center}, ${2:bias}, ${3:u})"
        },
        {
            "trigger": "sample_hypersphere_cone(center, maxangle, u)",
            "contents": "sample_hypersphere_cone(${1:center}, ${2:maxangle}, ${3:u})"
        },
        {
            "trigger": "sample_hypersphere_uniform(u)",
            "contents": "sample_hypersphere_uniform(${1:u})"
        },
        {
            "trigger": "sample_light(lightid, pos, sam, time, pos, clr, scale, ...)",
            "contents": "sample_light(${1:lightid}, ${2:pos}, ${3:sam}, ${4:time}, ${5:pos}, ${6:clr}, ${7:scale}, ${8:...})"
        },
        {
            "trigger": "sample_lognormal(mu, sigma, u)",
            "contents": "sample_lognormal(${1:mu}, ${2:sigma}, ${3:u})"
        },
        {
            "trigger": "sample_lognormal(mu, sigma, minvalue, maxvalue, u)",
            "contents": "sample_lognormal(${1:mu}, ${2:sigma}, ${3:minvalue}, ${4:maxvalue}, ${5:u})"
        },
        {
            "trigger": "sample_lognormal_by_median(median, stddev, u)",
            "contents": "sample_lognormal_by_median(${1:median}, ${2:stddev}, ${3:u})"
        },
        {
            "trigger": "sample_lognormal_by_median(origmedian, origstddev, minvalue, maxvalue, u)",
            "contents": "sample_lognormal_by_median(${1:origmedian}, ${2:origstddev}, ${3:minvalue}, ${4:maxvalue}, ${5:u})"
        },
        {
            "trigger": "sample_normal(u)",
            "contents": "sample_normal(${1:u})"
        },
        {
            "trigger": "sample_normal(mean, stddev, u)",
            "contents": "sample_normal(${1:mean}, ${2:stddev}, ${3:u})"
        },
        {
            "trigger": "sample_normal(origmean, origstddev, minvalue, maxvalue, u)",
            "contents": "sample_normal(${1:origmean}, ${2:origstddev}, ${3:minvalue}, ${4:maxvalue}, ${5:u})"
        },
        {
            "trigger": "sample_orientation_cone(center, maxangle, u)",
            "contents": "sample_orientation_cone(${1:center}, ${2:maxangle}, ${3:u})"
        },
        {
            "trigger": "sample_orientation_uniform(u)",
            "contents": "sample_orientation_uniform(${1:u})"
        },
        {
            "trigger": "sample_photon(lp, pos, dir, scale, time)",
            "contents": "sample_photon(${1:lp}, ${2:pos}, ${3:dir}, ${4:scale}, ${5:time})"
        },
        {
            "trigger": "sample_sphere_cone(center, maxangle, u)",
            "contents": "sample_sphere_cone(${1:center}, ${2:maxangle}, ${3:u})"
        },
        {
            "trigger": "sample_sphere_shell_uniform(u, alpha)",
            "contents": "sample_sphere_shell_uniform(${1:u}, ${2:alpha})"
        },
        {
            "trigger": "sample_sphere_uniform(u)",
            "contents": "sample_sphere_uniform(${1:u})"
        },
        {
            "trigger": "scale(m, scale_vector)",
            "contents": "scale(${1:m}, ${2:scale_vector})"
        },
        {
            "trigger": "scatter(ipoint, inormal, idirection, idistribution, time, maxdist, opoint, onormal, odirection)",
            "contents": "scatter(${1:ipoint}, ${2:inormal}, ${3:idirection}, ${4:idistribution}, ${5:time}, ${6:maxdist}, ${7:opoint}, ${8:onormal}, ${9:odirection})"
        },
        {
            "trigger": "select(conditional, a, b)",
            "contents": "select(${1:conditional}, ${2:a}, ${3:b})"
        },
        {
            "trigger": "sensor_panorama_create(time, pos, size, near, far, candidateobj, includeobj, excludeobj, uselit)",
            "contents": "sensor_panorama_create(${1:time}, ${2:pos}, ${3:size}, ${4:near}, ${5:far}, ${6:candidateobj}, ${7:includeobj}, ${8:excludeobj}, ${9:uselit})"
        },
        {
            "trigger": "sensor_panorama_getcolor(handle, dir)",
            "contents": "sensor_panorama_getcolor(${1:handle}, ${2:dir})"
        },
        {
            "trigger": "sensor_panorama_getcone(handle, lookodir, angle, colormin, colormax, depthmin, depthmax, strength, dir, color, depth)",
            "contents": "sensor_panorama_getcone(${1:handle}, ${2:lookodir}, ${3:angle}, ${4:colormin}, ${5:colormax}, ${6:depthmin}, ${7:depthmax}, ${8:strength}, ${9:dir}, ${10:color}, ${11:depth})"
        },
        {
            "trigger": "sensor_panorama_getdepth(handle, dir)",
            "contents": "sensor_panorama_getdepth(${1:handle}, ${2:dir})"
        },
        {
            "trigger": "sensor_save(handle, colorfile, depthfile)",
            "contents": "sensor_save(${1:handle}, ${2:colorfile}, ${3:depthfile})"
        },
        {
            "trigger": "serialize(vectors)",
            "contents": "serialize(${1:vectors})"
        },
        {
            "trigger": "serialize(matrices)",
            "contents": "serialize(${1:matrices})"
        },
        {
            "trigger": "set(v1, v2)",
            "contents": "set(${1:v1}, ${2:v2})"
        },
        {
            "trigger": "set(v1, v2, v3)",
            "contents": "set(${1:v1}, ${2:v2}, ${3:v3})"
        },
        {
            "trigger": "set(v1, v2, v3, v4)",
            "contents": "set(${1:v1}, ${2:v2}, ${3:v3}, ${4:v4})"
        },
        {
            "trigger": "set(v1, v2, v4, v4, v5, v6, v7, v8, v9)",
            "contents": "set(${1:v1}, ${2:v2}, ${3:v4}, ${4:v4}, ${5:v5}, ${6:v6}, ${7:v7}, ${8:v8}, ${9:v9})"
        },
        {
            "trigger": "set(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)",
            "contents": "set(${1:v1}, ${2:v2}, ${3:v3}, ${4:v4}, ${5:v5}, ${6:v6}, ${7:v7}, ${8:v8}, ${9:v9}, ${10:v10}, ${11:v11}, ${12:v12}, ${13:v13}, ${14:v14}, ${15:v15}, ${16:v16})"
        },
        {
            "trigger": "set(nums)",
            "contents": "set(${1:nums})"
        },
        {
            "trigger": "set(v)",
            "contents": "set(${1:v})"
        },
        {
            "trigger": "set(row1, row2)",
            "contents": "set(${1:row1}, ${2:row2})"
        },
        {
            "trigger": "set(row1, row2, row3)",
            "contents": "set(${1:row1}, ${2:row2}, ${3:row3})"
        },
        {
            "trigger": "set(row1, row2, row3, row4)",
            "contents": "set(${1:row1}, ${2:row2}, ${3:row3}, ${4:row4})"
        },
        {
            "trigger": "set(rows)",
            "contents": "set(${1:rows})"
        },
        {
            "trigger": "set(m)",
            "contents": "set(${1:m})"
        },
        {
            "trigger": "set(vs)",
            "contents": "set(${1:vs})"
        },
        {
            "trigger": "set(num)",
            "contents": "set(${1:num})"
        },
        {
            "trigger": "set(key, ...)",
            "contents": "set(${1:key}, ${2:...})"
        },
        {
            "trigger": "setagentchannelvalue(geohandle, prim, value, channel)",
            "contents": "setagentchannelvalue(${1:geohandle}, ${2:prim}, ${3:value}, ${4:channel})"
        },
        {
            "trigger": "setagentchannelvalues(geohandle, prim, values)",
            "contents": "setagentchannelvalues(${1:geohandle}, ${2:prim}, ${3:values})"
        },
        {
            "trigger": "setagentclipnames(geohandle, prim, clipnames)",
            "contents": "setagentclipnames(${1:geohandle}, ${2:prim}, ${3:clipnames})"
        },
        {
            "trigger": "setagentclips(geohandle, prim, clip_names, clip_times, clip_weights, clip_transform_groups, clip_layer_ids, layer_blend_modes, layer_weights, layer_parent_ids)",
            "contents": "setagentclips(${1:geohandle}, ${2:prim}, ${3:clip_names}, ${4:clip_times}, ${5:clip_weights}, ${6:clip_transform_groups}, ${7:clip_layer_ids}, ${8:layer_blend_modes}, ${9:layer_weights}, ${10:layer_parent_ids})"
        },
        {
            "trigger": "setagentcliptimes(geohandle, prim, cliptimes)",
            "contents": "setagentcliptimes(${1:geohandle}, ${2:prim}, ${3:cliptimes})"
        },
        {
            "trigger": "setagentclipweights(geohandle, prim, clipweights)",
            "contents": "setagentclipweights(${1:geohandle}, ${2:prim}, ${3:clipweights})"
        },
        {
            "trigger": "setagentcollisionlayer(geohandle, prim, layername)",
            "contents": "setagentcollisionlayer(${1:geohandle}, ${2:prim}, ${3:layername})"
        },
        {
            "trigger": "setagentcurrentlayer(geohandle, prim, layername)",
            "contents": "setagentcurrentlayer(${1:geohandle}, ${2:prim}, ${3:layername})"
        },
        {
            "trigger": "setagentlocaltransform(geohandle, prim, transform, index)",
            "contents": "setagentlocaltransform(${1:geohandle}, ${2:prim}, ${3:transform}, ${4:index})"
        },
        {
            "trigger": "setagentlocaltransforms(geohandle, prim, transforms)",
            "contents": "setagentlocaltransforms(${1:geohandle}, ${2:prim}, ${3:transforms})"
        },
        {
            "trigger": "setagentworldtransform(geohandle, prim, transform, index)",
            "contents": "setagentworldtransform(${1:geohandle}, ${2:prim}, ${3:transform}, ${4:index})"
        },
        {
            "trigger": "setagentworldtransforms(geohandle, prim, transforms)",
            "contents": "setagentworldtransforms(${1:geohandle}, ${2:prim}, ${3:transforms})"
        },
        {
            "trigger": "setattrib(geohandle, attribclass, attribute_name, element_num, vertex_num, value, mode)",
            "contents": "setattrib(${1:geohandle}, ${2:attribclass}, ${3:attribute_name}, ${4:element_num}, ${5:vertex_num}, ${6:value}, ${7:mode})"
        },
        {
            "trigger": "setattribtypeinfo(geohandle, attribclass, name, typeinfo)",
            "contents": "setattribtypeinfo(${1:geohandle}, ${2:attribclass}, ${3:name}, ${4:typeinfo})"
        },
        {
            "trigger": "setcomp(target, value, index)",
            "contents": "setcomp(${1:target}, ${2:value}, ${3:index})"
        },
        {
            "trigger": "setcomp(target, value, row, column)",
            "contents": "setcomp(${1:target}, ${2:value}, ${3:row}, ${4:column})"
        },
        {
            "trigger": "setcomp(array, value, index)",
            "contents": "setcomp(${1:array}, ${2:value}, ${3:index})"
        },
        {
            "trigger": "setcomp(d, value, index)",
            "contents": "setcomp(${1:d}, ${2:value}, ${3:index})"
        },
        {
            "trigger": "setcurrentlight(lightid)",
            "contents": "setcurrentlight(${1:lightid})"
        },
        {
            "trigger": "setdetailattrib(geohandle, name, value, mode)",
            "contents": "setdetailattrib(${1:geohandle}, ${2:name}, ${3:value}, ${4:mode})"
        },
        {
            "trigger": "setdetailintrinsic(geohandle, name, value, mode)",
            "contents": "setdetailintrinsic(${1:geohandle}, ${2:name}, ${3:value}, ${4:mode})"
        },
        {
            "trigger": "setedgegroup(geohandle, name, pt0, pt1, value)",
            "contents": "setedgegroup(${1:geohandle}, ${2:name}, ${3:pt0}, ${4:pt1}, ${5:value})"
        },
        {
            "trigger": "setpackedtransform(input, primnum, transform)",
            "contents": "setpackedtransform(${1:input}, ${2:primnum}, ${3:transform})"
        },
        {
            "trigger": "setpointattrib(geohandle, name, point_num, value, mode)",
            "contents": "setpointattrib(${1:geohandle}, ${2:name}, ${3:point_num}, ${4:value}, ${5:mode})"
        },
        {
            "trigger": "setpointgroup(geohandle, name, point_num, value, mode)",
            "contents": "setpointgroup(${1:geohandle}, ${2:name}, ${3:point_num}, ${4:value}, ${5:mode})"
        },
        {
            "trigger": "setpointlocaltransforms(geometry, pnts, transforms)",
            "contents": "setpointlocaltransforms(${1:geometry}, ${2:pnts}, ${3:transforms})"
        },
        {
            "trigger": "setpointtransform(geometry, pt, transform)",
            "contents": "setpointtransform(${1:geometry}, ${2:pt}, ${3:transform})"
        },
        {
            "trigger": "setpointtransform(geometry, pt, transform, constrain)",
            "contents": "setpointtransform(${1:geometry}, ${2:pt}, ${3:transform}, ${4:constrain})"
        },
        {
            "trigger": "setpointtransforms(geometry, pnts, transforms)",
            "contents": "setpointtransforms(${1:geometry}, ${2:pnts}, ${3:transforms})"
        },
        {
            "trigger": "setpointtransforms(geometry, pnts, transforms, constrain)",
            "contents": "setpointtransforms(${1:geometry}, ${2:pnts}, ${3:transforms}, ${4:constrain})"
        },
        {
            "trigger": "setprimattrib(geohandle, name, prim_num, value, mode)",
            "contents": "setprimattrib(${1:geohandle}, ${2:name}, ${3:prim_num}, ${4:value}, ${5:mode})"
        },
        {
            "trigger": "setprimgroup(geohandle, name, prim_num, value, mode)",
            "contents": "setprimgroup(${1:geohandle}, ${2:name}, ${3:prim_num}, ${4:value}, ${5:mode})"
        },
        {
            "trigger": "setprimintrinsic(geohandle, name, prim_num, value, mode)",
            "contents": "setprimintrinsic(${1:geohandle}, ${2:name}, ${3:prim_num}, ${4:value}, ${5:mode})"
        },
        {
            "trigger": "setprimvertex(geohandle, prim, vtxofprim, pt)",
            "contents": "setprimvertex(${1:geohandle}, ${2:prim}, ${3:vtxofprim}, ${4:pt})"
        },
        {
            "trigger": "setsamplestore(channel, P, value)",
            "contents": "setsamplestore(${1:channel}, ${2:P}, ${3:value})"
        },
        {
            "trigger": "setvertexattrib(geohandle, name, prim_num, vertex_num, value, mode)",
            "contents": "setvertexattrib(${1:geohandle}, ${2:name}, ${3:prim_num}, ${4:vertex_num}, ${5:value}, ${6:mode})"
        },
        {
            "trigger": "setvertexgroup(geohandle, name, prim_num, vertex_num, value, mode)",
            "contents": "setvertexgroup(${1:geohandle}, ${2:name}, ${3:prim_num}, ${4:vertex_num}, ${5:value}, ${6:mode})"
        },
        {
            "trigger": "setvertexpoint(geohandle, prim, vtxofprim, pt)",
            "contents": "setvertexpoint(${1:geohandle}, ${2:prim}, ${3:vtxofprim}, ${4:pt})"
        },
        {
            "trigger": "shadow(Cl)",
            "contents": "shadow(${1:Cl})"
        },
        {
            "trigger": "shadow(Cl, P, L)",
            "contents": "shadow(${1:Cl}, ${2:P}, ${3:L})"
        },
        {
            "trigger": "shadowmap(filename, Pndc, spread, bias, quality, ...)",
            "contents": "shadowmap(${1:filename}, ${2:Pndc}, ${3:spread}, ${4:bias}, ${5:quality}, ${6:...})"
        },
        {
            "trigger": "shadowmap(filename, Pndc1, Pndc2, Pndc3, Pndc4, spread, bias, quality, ...)",
            "contents": "shadowmap(${1:filename}, ${2:Pndc1}, ${3:Pndc2}, ${4:Pndc3}, ${5:Pndc4}, ${6:spread}, ${7:bias}, ${8:quality}, ${9:...})"
        },
        {
            "trigger": "shadow_light(lightid, pos, dir, time, ...)",
            "contents": "shadow_light(${1:lightid}, ${2:pos}, ${3:dir}, ${4:time}, ${5:...})"
        },
        {
            "trigger": "shimport(variable_name, value)",
            "contents": "shimport(${1:variable_name}, ${2:value})"
        },
        {
            "trigger": "shl(a, bits)",
            "contents": "shl(${1:a}, ${2:bits})"
        },
        {
            "trigger": "shr(a, bits)",
            "contents": "shr(${1:a}, ${2:bits})"
        },
        {
            "trigger": "shrz(a, bits)",
            "contents": "shrz(${1:a}, ${2:bits})"
        },
        {
            "trigger": "sign(n)",
            "contents": "sign(${1:n})"
        },
        {
            "trigger": "sign(v)",
            "contents": "sign(${1:v})"
        },
        {
            "trigger": "simport(name, value)",
            "contents": "simport(${1:name}, ${2:value})"
        },
        {
            "trigger": "sin(n)",
            "contents": "sin(${1:n})"
        },
        {
            "trigger": "sinh(n)",
            "contents": "sinh(${1:n})"
        },
        {
            "trigger": "sinh(v)",
            "contents": "sinh(${1:v})"
        },
        {
            "trigger": "sleep(milliseconds)",
            "contents": "sleep(${1:milliseconds})"
        },
        {
            "trigger": "slerp(q1, q2, bias)",
            "contents": "slerp(${1:q1}, ${2:q2}, ${3:bias})"
        },
        {
            "trigger": "slerp(qs, weights)",
            "contents": "slerp(${1:qs}, ${2:weights})"
        },
        {
            "trigger": "slerp(m1, m2, bias)",
            "contents": "slerp(${1:m1}, ${2:m2}, ${3:bias})"
        },
        {
            "trigger": "slerp(ms, weights)",
            "contents": "slerp(${1:ms}, ${2:weights})"
        },
        {
            "trigger": "slice(s, start, end)",
            "contents": "slice(${1:s}, ${2:start}, ${3:end})"
        },
        {
            "trigger": "slice(s, start, end, step)",
            "contents": "slice(${1:s}, ${2:start}, ${3:end}, ${4:step})"
        },
        {
            "trigger": "slice(s, hasstart, start, hasend, end, hasstep, step)",
            "contents": "slice(${1:s}, ${2:hasstart}, ${3:start}, ${4:hasend}, ${5:end}, ${6:hasstep}, ${7:step})"
        },
        {
            "trigger": "slice(array, hasstart, start, hasend, end, hasstep, step)",
            "contents": "slice(${1:array}, ${2:hasstart}, ${3:start}, ${4:hasend}, ${5:end}, ${6:hasstep}, ${7:step})"
        },
        {
            "trigger": "slideframe(t0, t1, v0)",
            "contents": "slideframe(${1:t0}, ${2:t1}, ${3:v0})"
        },
        {
            "trigger": "slideframe(x0, t0, v0, x1, t1)",
            "contents": "slideframe(${1:x0}, ${2:t0}, ${3:v0}, ${4:x1}, ${5:t1})"
        },
        {
            "trigger": "smooth(value1, value2, amount)",
            "contents": "smooth(${1:value1}, ${2:value2}, ${3:amount})"
        },
        {
            "trigger": "smooth(value1, value2, amount, rolloff)",
            "contents": "smooth(${1:value1}, ${2:value2}, ${3:amount}, ${4:rolloff})"
        },
        {
            "trigger": "smoothrotation(order, r, r_reference)",
            "contents": "smoothrotation(${1:order}, ${2:r}, ${3:r_reference})"
        },
        {
            "trigger": "snoise(pos)",
            "contents": "snoise(${1:pos})"
        },
        {
            "trigger": "snoise(pos, turbulence, rough, atten)",
            "contents": "snoise(${1:pos}, ${2:turbulence}, ${3:rough}, ${4:atten})"
        },
        {
            "trigger": "snoise(pos, periodX, periodY, periodZ)",
            "contents": "snoise(${1:pos}, ${2:periodX}, ${3:periodY}, ${4:periodZ})"
        },
        {
            "trigger": "snoise(pos, periodX, periodY, periodZ, turbulence, rough, atten)",
            "contents": "snoise(${1:pos}, ${2:periodX}, ${3:periodY}, ${4:periodZ}, ${5:turbulence}, ${6:rough}, ${7:atten})"
        },
        {
            "trigger": "solid_angle(b, mask)",
            "contents": "solid_angle(${1:b}, ${2:mask})"
        },
        {
            "trigger": "solveconstraint(lengths, targetpos, tolerance, relmat, constraints)",
            "contents": "solveconstraint(${1:lengths}, ${2:targetpos}, ${3:tolerance}, ${4:relmat}, ${5:constraints})"
        },
        {
            "trigger": "solvecubic(a, b, c, d, t1, t2, t3)",
            "contents": "solvecubic(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:t1}, ${6:t2}, ${7:t3})"
        },
        {
            "trigger": "solvecurve(lengths, closed, orienttonormal, tangent, points, normals)",
            "contents": "solvecurve(${1:lengths}, ${2:closed}, ${3:orienttonormal}, ${4:tangent}, ${5:points}, ${6:normals})"
        },
        {
            "trigger": "solvecurve(outlength, outpos, lengths, closed, orienttonormal, normalmode, tangent, points, normals)",
            "contents": "solvecurve(${1:outlength}, ${2:outpos}, ${3:lengths}, ${4:closed}, ${5:orienttonormal}, ${6:normalmode}, ${7:tangent}, ${8:points}, ${9:normals})"
        },
        {
            "trigger": "solvecurve(outlength, outpos, lengths, closed, orienttonormal, normalmode, tangent, points, normals, twists, initialtwists, fmt, order, lod)",
            "contents": "solvecurve(${1:outlength}, ${2:outpos}, ${3:lengths}, ${4:closed}, ${5:orienttonormal}, ${6:normalmode}, ${7:tangent}, ${8:points}, ${9:normals}, ${10:twists}, ${11:initialtwists}, ${12:fmt}, ${13:order}, ${14:lod})"
        },
        {
            "trigger": "solvecurve(op, lengths, closed, orienttonormal, tangent, normalcalcmethod, relmat)",
            "contents": "solvecurve(${1:op}, ${2:lengths}, ${3:closed}, ${4:orienttonormal}, ${5:tangent}, ${6:normalcalcmethod}, ${7:relmat})"
        },
        {
            "trigger": "solvecurve(op, lengths, closed, orienttonormal, tangent, normalcalcmethod, relmat, primnum, lod)",
            "contents": "solvecurve(${1:op}, ${2:lengths}, ${3:closed}, ${4:orienttonormal}, ${5:tangent}, ${6:normalcalcmethod}, ${7:relmat}, ${8:primnum}, ${9:lod})"
        },
        {
            "trigger": "solvefbik(xforms, parents, jointoptions, targetxforms, targets, targetoptions, iters, tolerance, pinroot)",
            "contents": "solvefbik(${1:xforms}, ${2:parents}, ${3:jointoptions}, ${4:targetxforms}, ${5:targets}, ${6:targetoptions}, ${7:iters}, ${8:tolerance}, ${9:pinroot})"
        },
        {
            "trigger": "solvefbik(xforms, parents, targets, targetxforms, iters)",
            "contents": "solvefbik(${1:xforms}, ${2:parents}, ${3:targets}, ${4:targetxforms}, ${5:iters})"
        },
        {
            "trigger": "solvefbik(xforms, parents, targets, targetxforms, iters, tolerance, pinroot)",
            "contents": "solvefbik(${1:xforms}, ${2:parents}, ${3:targets}, ${4:targetxforms}, ${5:iters}, ${6:tolerance}, ${7:pinroot})"
        },
        {
            "trigger": "solvefbik(xforms, parents, targets, targetxforms, iters, tolerance, pinroot, targetweights, targetpriorities, targetdepths)",
            "contents": "solvefbik(${1:xforms}, ${2:parents}, ${3:targets}, ${4:targetxforms}, ${5:iters}, ${6:tolerance}, ${7:pinroot}, ${8:targetweights}, ${9:targetpriorities}, ${10:targetdepths})"
        },
        {
            "trigger": "solvefbik(xforms, parents, targets, targetxforms, iters, tolerance, pinroot, targetweights, targetpriorities, targetdepths, targettypes, targetoffsets)",
            "contents": "solvefbik(${1:xforms}, ${2:parents}, ${3:targets}, ${4:targetxforms}, ${5:iters}, ${6:tolerance}, ${7:pinroot}, ${8:targetweights}, ${9:targetpriorities}, ${10:targetdepths}, ${11:targettypes}, ${12:targetoffsets})"
        },
        {
            "trigger": "solvefbik(xforms, parents, targets, targetxforms, iters, tolerance, pinroot, targetweights, targetpriorities, targetdepths, goalxforms, constrainedxforms, jointlimits)",
            "contents": "solvefbik(${1:xforms}, ${2:parents}, ${3:targets}, ${4:targetxforms}, ${5:iters}, ${6:tolerance}, ${7:pinroot}, ${8:targetweights}, ${9:targetpriorities}, ${10:targetdepths}, ${11:goalxforms}, ${12:constrainedxforms}, ${13:jointlimits})"
        },
        {
            "trigger": "solvefbik(xforms, parents, targets, targetxforms, iters, tolerance, pinroot, targetweights, targetpriorities, targetdepths, targettypes, targetoffsets, goalxforms, constrainedxforms, jointlimits)",
            "contents": "solvefbik(${1:xforms}, ${2:parents}, ${3:targets}, ${4:targetxforms}, ${5:iters}, ${6:tolerance}, ${7:pinroot}, ${8:targetweights}, ${9:targetpriorities}, ${10:targetdepths}, ${11:targettypes}, ${12:targetoffsets}, ${13:goalxforms}, ${14:constrainedxforms}, ${15:jointlimits})"
        },
        {
            "trigger": "solveik(lengths, targetpos, twistpos, twist, twistflag, dampen, resiststraight, trackingthres, relmat, constraints)",
            "contents": "solveik(${1:lengths}, ${2:targetpos}, ${3:twistpos}, ${4:twist}, ${5:twistflag}, ${6:dampen}, ${7:resiststraight}, ${8:trackingthres}, ${9:relmat}, ${10:constraints})"
        },
        {
            "trigger": "solvephysfbik(xforms, parents, jointoptions, targetxforms, targets, targetoptions, iters, damping, tolerance)",
            "contents": "solvephysfbik(${1:xforms}, ${2:parents}, ${3:jointoptions}, ${4:targetxforms}, ${5:targets}, ${6:targetoptions}, ${7:iters}, ${8:damping}, ${9:tolerance})"
        },
        {
            "trigger": "solvepoly(coef, roots, maxiter)",
            "contents": "solvepoly(${1:coef}, ${2:roots}, ${3:maxiter})"
        },
        {
            "trigger": "solvequadratic(a, b, c, t1, t2)",
            "contents": "solvequadratic(${1:a}, ${2:b}, ${3:c}, ${4:t1}, ${5:t2})"
        },
        {
            "trigger": "solvetriangleSSS(sides)",
            "contents": "solvetriangleSSS(${1:sides})"
        },
        {
            "trigger": "solvetriangleSSS(a, b, c)",
            "contents": "solvetriangleSSS(${1:a}, ${2:b}, ${3:c})"
        },
        {
            "trigger": "sort(values)",
            "contents": "sort(${1:values})"
        },
        {
            "trigger": "specular(dir, ...)",
            "contents": "specular(${1:dir}, ${2:...})"
        },
        {
            "trigger": "specular(nml, V, roughness, ...)",
            "contents": "specular(${1:nml}, ${2:V}, ${3:roughness}, ${4:...})"
        },
        {
            "trigger": "specularBRDF(L, N, V, rough)",
            "contents": "specularBRDF(${1:L}, ${2:N}, ${3:V}, ${4:rough})"
        },
        {
            "trigger": "spline(basis, sample_pos, value1, ...)",
            "contents": "spline(${1:basis}, ${2:sample_pos}, ${3:value1}, ${4:...})"
        },
        {
            "trigger": "spline(basis, sample_pos, values, ...)",
            "contents": "spline(${1:basis}, ${2:sample_pos}, ${3:values}, ${4:...})"
        },
        {
            "trigger": "spline(bases, sample_pos, values, ...)",
            "contents": "spline(${1:bases}, ${2:sample_pos}, ${3:values}, ${4:...})"
        },
        {
            "trigger": "spline(bases, sample_pos, values, positions, ...)",
            "contents": "spline(${1:bases}, ${2:sample_pos}, ${3:values}, ${4:positions}, ${5:...})"
        },
        {
            "trigger": "spline_cdf(bases, values, positions, ...)",
            "contents": "spline_cdf(${1:bases}, ${2:values}, ${3:positions}, ${4:...})"
        },
        {
            "trigger": "split(s)",
            "contents": "split(${1:s})"
        },
        {
            "trigger": "split(s, separators)",
            "contents": "split(${1:s}, ${2:separators})"
        },
        {
            "trigger": "split(s, separators, maxsplits)",
            "contents": "split(${1:s}, ${2:separators}, ${3:maxsplits})"
        },
        {
            "trigger": "splitpath(fullpath, dir, name)",
            "contents": "splitpath(${1:fullpath}, ${2:dir}, ${3:name})"
        },
        {
            "trigger": "split_bsdf(lobes, source, weights)",
            "contents": "split_bsdf(${1:lobes}, ${2:source}, ${3:weights})"
        },
        {
            "trigger": "split_bsdf(lobes, source, weights, mask)",
            "contents": "split_bsdf(${1:lobes}, ${2:source}, ${3:weights}, ${4:mask})"
        },
        {
            "trigger": "split_bsdf(lobes, source, weights, mask, type)",
            "contents": "split_bsdf(${1:lobes}, ${2:source}, ${3:weights}, ${4:mask}, ${5:type})"
        },
        {
            "trigger": "split_bsdf(lobes, source, weights, mask, type, u)",
            "contents": "split_bsdf(${1:lobes}, ${2:source}, ${3:weights}, ${4:mask}, ${5:type}, ${6:u})"
        },
        {
            "trigger": "split_bsdf(lobes, source, weights, mask, type, u, cdf)",
            "contents": "split_bsdf(${1:lobes}, ${2:source}, ${3:weights}, ${4:mask}, ${5:type}, ${6:u}, ${7:cdf})"
        },
        {
            "trigger": "sprintf(format, ...)",
            "contents": "sprintf(${1:format}, ${2:...})"
        },
        {
            "trigger": "sqrt(value)",
            "contents": "sqrt(${1:value})"
        },
        {
            "trigger": "sssapprox(albedo, meanFreePath, roughness, scale, ...)",
            "contents": "sssapprox(${1:albedo}, ${2:meanFreePath}, ${3:roughness}, ${4:scale}, ${5:...})"
        },
        {
            "trigger": "startswith(str, startswith)",
            "contents": "startswith(${1:str}, ${2:startswith})"
        },
        {
            "trigger": "storelightexport(lightname, exportname, value)",
            "contents": "storelightexport(${1:lightname}, ${2:exportname}, ${3:value})"
        },
        {
            "trigger": "strip(value)",
            "contents": "strip(${1:value})"
        },
        {
            "trigger": "strip(value, whitespace)",
            "contents": "strip(${1:value}, ${2:whitespace})"
        },
        {
            "trigger": "strlen(string)",
            "contents": "strlen(${1:string})"
        },
        {
            "trigger": "sum(n)",
            "contents": "sum(${1:n})"
        },
        {
            "trigger": "sum(v)",
            "contents": "sum(${1:v})"
        },
        {
            "trigger": "sum(nums)",
            "contents": "sum(${1:nums})"
        },
        {
            "trigger": "sum(arr)",
            "contents": "sum(${1:arr})"
        },
        {
            "trigger": "surfacedist(geometry, ptgroup, P_attribute, search_pt, closest_pt, distance_metric)",
            "contents": "surfacedist(${1:geometry}, ${2:ptgroup}, ${3:P_attribute}, ${4:search_pt}, ${5:closest_pt}, ${6:distance_metric})"
        },
        {
            "trigger": "surfacedist(geometry, ptgroup, P_attribute, search_pt, max_radius, closest_pt, distance_metric)",
            "contents": "surfacedist(${1:geometry}, ${2:ptgroup}, ${3:P_attribute}, ${4:search_pt}, ${5:max_radius}, ${6:closest_pt}, ${7:distance_metric})"
        },
        {
            "trigger": "svddecomp(input_M, output_U, output_S, output_V)",
            "contents": "svddecomp(${1:input_M}, ${2:output_U}, ${3:output_S}, ${4:output_V})"
        },
        {
            "trigger": "svddecomp(input_M)",
            "contents": "svddecomp(${1:input_M})"
        },
        {
            "trigger": "switch(direct, indirect)",
            "contents": "switch(${1:direct}, ${2:indirect})"
        },
        {
            "trigger": "swizzle(v, i0, i1)",
            "contents": "swizzle(${1:v}, ${2:i0}, ${3:i1})"
        },
        {
            "trigger": "swizzle(v, i0, i1, i2)",
            "contents": "swizzle(${1:v}, ${2:i0}, ${3:i1}, ${4:i2})"
        },
        {
            "trigger": "swizzle(v, i0, i1, i2, i3)",
            "contents": "swizzle(${1:v}, ${2:i0}, ${3:i1}, ${4:i2}, ${5:i3})"
        },
        {
            "trigger": "tan(n)",
            "contents": "tan(${1:n})"
        },
        {
            "trigger": "tan(v)",
            "contents": "tan(${1:v})"
        },
        {
            "trigger": "tanh(n)",
            "contents": "tanh(${1:n})"
        },
        {
            "trigger": "tet_adjacent(geometry, primindex, faceno)",
            "contents": "tet_adjacent(${1:geometry}, ${2:primindex}, ${3:faceno})"
        },
        {
            "trigger": "tet_faceindex(faceno, vtxno)",
            "contents": "tet_faceindex(${1:faceno}, ${2:vtxno})"
        },
        {
            "trigger": "teximport(map, attribute, value)",
            "contents": "teximport(${1:map}, ${2:attribute}, ${3:value})"
        },
        {
            "trigger": "teximport(map, token, values)",
            "contents": "teximport(${1:map}, ${2:token}, ${3:values})"
        },
        {
            "trigger": "texprintf(u, v, format, ...)",
            "contents": "texprintf(${1:u}, ${2:v}, ${3:format}, ${4:...})"
        },
        {
            "trigger": "texture(map, ...)",
            "contents": "texture(${1:map}, ${2:...})"
        },
        {
            "trigger": "texture(map, ss, tt, ...)",
            "contents": "texture(${1:map}, ${2:ss}, ${3:tt}, ${4:...})"
        },
        {
            "trigger": "texture(map, s0, t0, s1, t1, s2, t2, s3, t3, ...)",
            "contents": "texture(${1:map}, ${2:s0}, ${3:t0}, ${4:s1}, ${5:t1}, ${6:s2}, ${7:t2}, ${8:s3}, ${9:t3}, ${10:...})"
        },
        {
            "trigger": "texture3d(filename, channel, P, ...)",
            "contents": "texture3d(${1:filename}, ${2:channel}, ${3:P}, ${4:...})"
        },
        {
            "trigger": "texture3dBox(filename, channel, min, max, ...)",
            "contents": "texture3dBox(${1:filename}, ${2:channel}, ${3:min}, ${4:max}, ${5:...})"
        },
        {
            "trigger": "titlecase(str)",
            "contents": "titlecase(${1:str})"
        },
        {
            "trigger": "tolower(str)",
            "contents": "tolower(${1:str})"
        },
        {
            "trigger": "toNDC(point)",
            "contents": "toNDC(${1:point})"
        },
        {
            "trigger": "toNDC(camera_name, point)",
            "contents": "toNDC(${1:camera_name}, ${2:point})"
        },
        {
            "trigger": "toupper(str)",
            "contents": "toupper(${1:str})"
        },
        {
            "trigger": "trace(cv, of, af, P, D, shadow_bias, max_contrib, ...)",
            "contents": "trace(${1:cv}, ${2:of}, ${3:af}, ${4:P}, ${5:D}, ${6:shadow_bias}, ${7:max_contrib}, ${8:...})"
        },
        {
            "trigger": "trace(pos, dir, time, ...)",
            "contents": "trace(${1:pos}, ${2:dir}, ${3:time}, ${4:...})"
        },
        {
            "trigger": "translate(m, amount)",
            "contents": "translate(${1:m}, ${2:amount})"
        },
        {
            "trigger": "translucent(nml, ng, ...)",
            "contents": "translucent(${1:nml}, ${2:ng}, ${3:...})"
        },
        {
            "trigger": "transpose(m)",
            "contents": "transpose(${1:m})"
        },
        {
            "trigger": "trunc(x)",
            "contents": "trunc(${1:x})"
        },
        {
            "trigger": "tw_nspace(v)",
            "contents": "tw_nspace(${1:v})"
        },
        {
            "trigger": "tw_space()",
            "contents": "tw_space()"
        },
        {
            "trigger": "tw_space(v)",
            "contents": "tw_space(${1:v})"
        },
        {
            "trigger": "tw_vspace(v)",
            "contents": "tw_vspace(${1:v})"
        },
        {
            "trigger": "uniqueval(geometry, attribclass, attribute_name, which)",
            "contents": "uniqueval(${1:geometry}, ${2:attribclass}, ${3:attribute_name}, ${4:which})"
        },
        {
            "trigger": "uniquevals(geometry, attribclass, attribute_name)",
            "contents": "uniquevals(${1:geometry}, ${2:attribclass}, ${3:attribute_name})"
        },
        {
            "trigger": "unpack_intfromsafefloat(f)",
            "contents": "unpack_intfromsafefloat(${1:f})"
        },
        {
            "trigger": "unserialize(values)",
            "contents": "unserialize(${1:values})"
        },
        {
            "trigger": "upush(array, value)",
            "contents": "upush(${1:array}, ${2:value})"
        },
        {
            "trigger": "usd_addattrib(stagehandle, primpath, name, typename)",
            "contents": "usd_addattrib(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:typename})"
        },
        {
            "trigger": "usd_addcollectionexclude(stagehandle, collectionpath, path)",
            "contents": "usd_addcollectionexclude(${1:stagehandle}, ${2:collectionpath}, ${3:path})"
        },
        {
            "trigger": "usd_addcollectioninclude(stagehandle, collectionpath, path)",
            "contents": "usd_addcollectioninclude(${1:stagehandle}, ${2:collectionpath}, ${3:path})"
        },
        {
            "trigger": "usd_addinversetotransformorder(stagehandle, primpath, name)",
            "contents": "usd_addinversetotransformorder(${1:stagehandle}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_addorient(stagehandle, primpath, suffix, orient)",
            "contents": "usd_addorient(${1:stagehandle}, ${2:primpath}, ${3:suffix}, ${4:orient})"
        },
        {
            "trigger": "usd_addprim(stagehandle, primpath, typename)",
            "contents": "usd_addprim(${1:stagehandle}, ${2:primpath}, ${3:typename})"
        },
        {
            "trigger": "usd_addprimvar(stagehandle, primpath, name, typename)",
            "contents": "usd_addprimvar(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:typename})"
        },
        {
            "trigger": "usd_addprimvar(stagehandle, primpath, name, typename, interpolation)",
            "contents": "usd_addprimvar(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:typename}, ${5:interpolation})"
        },
        {
            "trigger": "usd_addrelationshiptarget(stagehandle, primpath, name, target)",
            "contents": "usd_addrelationshiptarget(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:target})"
        },
        {
            "trigger": "usd_addrotate(stagehandle, primpath, suffix, axis, angle)",
            "contents": "usd_addrotate(${1:stagehandle}, ${2:primpath}, ${3:suffix}, ${4:axis}, ${5:angle})"
        },
        {
            "trigger": "usd_addrotate(stagehandle, primpath, suffix, xyz, angles)",
            "contents": "usd_addrotate(${1:stagehandle}, ${2:primpath}, ${3:suffix}, ${4:xyz}, ${5:angles})"
        },
        {
            "trigger": "usd_addscale(stagehandle, primpath, suffix, scale)",
            "contents": "usd_addscale(${1:stagehandle}, ${2:primpath}, ${3:suffix}, ${4:scale})"
        },
        {
            "trigger": "usd_addtotransformorder(stagehandle, primpath, name)",
            "contents": "usd_addtotransformorder(${1:stagehandle}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_addtransform(stagehandle, primpath, suffix, xform)",
            "contents": "usd_addtransform(${1:stagehandle}, ${2:primpath}, ${3:suffix}, ${4:xform})"
        },
        {
            "trigger": "usd_addtranslate(stagehandle, primpath, suffix, amount)",
            "contents": "usd_addtranslate(${1:stagehandle}, ${2:primpath}, ${3:suffix}, ${4:amount})"
        },
        {
            "trigger": "usd_attrib(stage, primpath, name)",
            "contents": "usd_attrib(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_attrib(stage, primpath, name, timecode)",
            "contents": "usd_attrib(${1:stage}, ${2:primpath}, ${3:name}, ${4:timecode})"
        },
        {
            "trigger": "usd_attribelement(stage, primpath, name, index)",
            "contents": "usd_attribelement(${1:stage}, ${2:primpath}, ${3:name}, ${4:index})"
        },
        {
            "trigger": "usd_attribelement(stage, primpath, name, index, timecode)",
            "contents": "usd_attribelement(${1:stage}, ${2:primpath}, ${3:name}, ${4:index}, ${5:timecode})"
        },
        {
            "trigger": "usd_attriblen(stage, primpath, name)",
            "contents": "usd_attriblen(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_attriblen(stage, primpath, name, timecode)",
            "contents": "usd_attriblen(${1:stage}, ${2:primpath}, ${3:name}, ${4:timecode})"
        },
        {
            "trigger": "usd_attribnames(stage, primpath)",
            "contents": "usd_attribnames(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_attribsize(stage, primpath, name)",
            "contents": "usd_attribsize(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_attribtimesamples(stage, primpath, name)",
            "contents": "usd_attribtimesamples(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_attribtypename(stage, primpath, name)",
            "contents": "usd_attribtypename(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_blockattrib(stagehandle, primpath, name)",
            "contents": "usd_blockattrib(${1:stagehandle}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_blockprimvar(stagehandle, primpath, name)",
            "contents": "usd_blockprimvar(${1:stagehandle}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_blockprimvarindices(stagehandle, primpath, name)",
            "contents": "usd_blockprimvarindices(${1:stagehandle}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_blockrelationship(stagehandle, primpath, name)",
            "contents": "usd_blockrelationship(${1:stagehandle}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_boundmaterialpath(stage, primpath)",
            "contents": "usd_boundmaterialpath(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_clearmetadata(stagehandle, path, name)",
            "contents": "usd_clearmetadata(${1:stagehandle}, ${2:path}, ${3:name})"
        },
        {
            "trigger": "usd_cleartransformorder(stagehandle, primpath)",
            "contents": "usd_cleartransformorder(${1:stagehandle}, ${2:primpath})"
        },
        {
            "trigger": "usd_collectioncomputedpaths(stage, collectionpath)",
            "contents": "usd_collectioncomputedpaths(${1:stage}, ${2:collectionpath})"
        },
        {
            "trigger": "usd_collectioncontains(stage, collectionpath, path)",
            "contents": "usd_collectioncontains(${1:stage}, ${2:collectionpath}, ${3:path})"
        },
        {
            "trigger": "usd_collectionexcludes(stage, collectionpath)",
            "contents": "usd_collectionexcludes(${1:stage}, ${2:collectionpath})"
        },
        {
            "trigger": "usd_collectionexpansionrule(stage, collectionpath)",
            "contents": "usd_collectionexpansionrule(${1:stage}, ${2:collectionpath})"
        },
        {
            "trigger": "usd_collectionincludes(stage, collectionpath)",
            "contents": "usd_collectionincludes(${1:stage}, ${2:collectionpath})"
        },
        {
            "trigger": "usd_drawmode(stage, primpath)",
            "contents": "usd_drawmode(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_findtransformname(stage, primpath, suffix)",
            "contents": "usd_findtransformname(${1:stage}, ${2:primpath}, ${3:suffix})"
        },
        {
            "trigger": "usd_flattenedprimvar(stage, primpath, name)",
            "contents": "usd_flattenedprimvar(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_flattenedprimvar(stage, primpath, name, timecode)",
            "contents": "usd_flattenedprimvar(${1:stage}, ${2:primpath}, ${3:name}, ${4:timecode})"
        },
        {
            "trigger": "usd_flattenedprimvarelement(stage, primpath, name, index)",
            "contents": "usd_flattenedprimvarelement(${1:stage}, ${2:primpath}, ${3:name}, ${4:index})"
        },
        {
            "trigger": "usd_flattenedprimvarelement(stage, primpath, name, index, timecode)",
            "contents": "usd_flattenedprimvarelement(${1:stage}, ${2:primpath}, ${3:name}, ${4:index}, ${5:timecode})"
        },
        {
            "trigger": "usd_getbbox(stage, primpath, purpose, min, max)",
            "contents": "usd_getbbox(${1:stage}, ${2:primpath}, ${3:purpose}, ${4:min}, ${5:max})"
        },
        {
            "trigger": "usd_getbbox_center(stage, primpath, purpose)",
            "contents": "usd_getbbox_center(${1:stage}, ${2:primpath}, ${3:purpose})"
        },
        {
            "trigger": "usd_getbbox_max(stage, primpath, purpose)",
            "contents": "usd_getbbox_max(${1:stage}, ${2:primpath}, ${3:purpose})"
        },
        {
            "trigger": "usd_getbbox_min(stage, primpath, purpose)",
            "contents": "usd_getbbox_min(${1:stage}, ${2:primpath}, ${3:purpose})"
        },
        {
            "trigger": "usd_getbbox_size(stage, primpath, purpose)",
            "contents": "usd_getbbox_size(${1:stage}, ${2:primpath}, ${3:purpose})"
        },
        {
            "trigger": "usd_getbounds(stage, primpath, purpose, min, max)",
            "contents": "usd_getbounds(${1:stage}, ${2:primpath}, ${3:purpose}, ${4:min}, ${5:max})"
        },
        {
            "trigger": "usd_getbounds(stage, primpath, purpose, timecode, min, max)",
            "contents": "usd_getbounds(${1:stage}, ${2:primpath}, ${3:purpose}, ${4:timecode}, ${5:min}, ${6:max})"
        },
        {
            "trigger": "usd_getpointinstancebounds(stage, primpath, instance_index, purpose, min, max)",
            "contents": "usd_getpointinstancebounds(${1:stage}, ${2:primpath}, ${3:instance_index}, ${4:purpose}, ${5:min}, ${6:max})"
        },
        {
            "trigger": "usd_getpointinstancebounds(stage, primpath, instance_index, purpose, timecode, min, max)",
            "contents": "usd_getpointinstancebounds(${1:stage}, ${2:primpath}, ${3:instance_index}, ${4:purpose}, ${5:timecode}, ${6:min}, ${7:max})"
        },
        {
            "trigger": "usd_hasapi(stage, primpath, api)",
            "contents": "usd_hasapi(${1:stage}, ${2:primpath}, ${3:api})"
        },
        {
            "trigger": "usd_haspayload(stage, primpath)",
            "contents": "usd_haspayload(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_isactive(stage, primpath)",
            "contents": "usd_isactive(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_isarray(stage, primpath, name)",
            "contents": "usd_isarray(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_isarraymetadata(stage, path, name)",
            "contents": "usd_isarraymetadata(${1:stage}, ${2:path}, ${3:name})"
        },
        {
            "trigger": "usd_isarrayprimvar(stage, primpath, name)",
            "contents": "usd_isarrayprimvar(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_isattrib(stage, primpath, name)",
            "contents": "usd_isattrib(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_iscollection(stage, collectionpath)",
            "contents": "usd_iscollection(${1:stage}, ${2:collectionpath})"
        },
        {
            "trigger": "usd_iscollectionpath(stage, collectionpath)",
            "contents": "usd_iscollectionpath(${1:stage}, ${2:collectionpath})"
        },
        {
            "trigger": "usd_isindexedprimvar(stage, primpath, name)",
            "contents": "usd_isindexedprimvar(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_isinstance(stage, primpath)",
            "contents": "usd_isinstance(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_iskind(stage, primpath, kind)",
            "contents": "usd_iskind(${1:stage}, ${2:primpath}, ${3:kind})"
        },
        {
            "trigger": "usd_ismetadata(stage, path, name)",
            "contents": "usd_ismetadata(${1:stage}, ${2:path}, ${3:name})"
        },
        {
            "trigger": "usd_isprim(stage, primpath)",
            "contents": "usd_isprim(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_isprimvar(stage, primpath, name)",
            "contents": "usd_isprimvar(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_isrelationship(stage, primpath, name)",
            "contents": "usd_isrelationship(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_isstage(stage)",
            "contents": "usd_isstage(${1:stage})"
        },
        {
            "trigger": "usd_istransformreset(stage, primpath)",
            "contents": "usd_istransformreset(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_istype(stage, primpath, type)",
            "contents": "usd_istype(${1:stage}, ${2:primpath}, ${3:type})"
        },
        {
            "trigger": "usd_isvisible(stage, primpath)",
            "contents": "usd_isvisible(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_isvisible(stage, primpath, timecode)",
            "contents": "usd_isvisible(${1:stage}, ${2:primpath}, ${3:timecode})"
        },
        {
            "trigger": "usd_kind(stage, primpath)",
            "contents": "usd_kind(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_localtransform(stage, primpath)",
            "contents": "usd_localtransform(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_localtransform(stage, primpath, timecode)",
            "contents": "usd_localtransform(${1:stage}, ${2:primpath}, ${3:timecode})"
        },
        {
            "trigger": "usd_makeattribpath(stage, primpath, name)",
            "contents": "usd_makeattribpath(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_makecollectionpath(stage, primpath, name)",
            "contents": "usd_makecollectionpath(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_makepropertypath(stage, primpath, name)",
            "contents": "usd_makepropertypath(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_makerelationshippath(stage, primpath, name)",
            "contents": "usd_makerelationshippath(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_metadata(stage, path, name)",
            "contents": "usd_metadata(${1:stage}, ${2:path}, ${3:name})"
        },
        {
            "trigger": "usd_metadataelement(stage, path, name, index)",
            "contents": "usd_metadataelement(${1:stage}, ${2:path}, ${3:name}, ${4:index})"
        },
        {
            "trigger": "usd_metadatalen(stage, path, name)",
            "contents": "usd_metadatalen(${1:stage}, ${2:path}, ${3:name})"
        },
        {
            "trigger": "usd_metadatanames(stage, path)",
            "contents": "usd_metadatanames(${1:stage}, ${2:path})"
        },
        {
            "trigger": "usd_name(stage, primpath)",
            "contents": "usd_name(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_parentpath(stage, primpath)",
            "contents": "usd_parentpath(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_pointinstancetransform(stage, primpath, index)",
            "contents": "usd_pointinstancetransform(${1:stage}, ${2:primpath}, ${3:index})"
        },
        {
            "trigger": "usd_pointinstancetransform(stage, primpath, index, timecode)",
            "contents": "usd_pointinstancetransform(${1:stage}, ${2:primpath}, ${3:index}, ${4:timecode})"
        },
        {
            "trigger": "usd_pointinstance_getbbox(stage, primpath, instance_index, purpose, min, max)",
            "contents": "usd_pointinstance_getbbox(${1:stage}, ${2:primpath}, ${3:instance_index}, ${4:purpose}, ${5:min}, ${6:max})"
        },
        {
            "trigger": "usd_pointinstance_getbbox_center(stage, primpath, instance_index, purpose)",
            "contents": "usd_pointinstance_getbbox_center(${1:stage}, ${2:primpath}, ${3:instance_index}, ${4:purpose})"
        },
        {
            "trigger": "usd_pointinstance_getbbox_max(stage, primpath, instance_index, purpose)",
            "contents": "usd_pointinstance_getbbox_max(${1:stage}, ${2:primpath}, ${3:instance_index}, ${4:purpose})"
        },
        {
            "trigger": "usd_pointinstance_getbbox_min(stage, primpath, instance_index, purpose)",
            "contents": "usd_pointinstance_getbbox_min(${1:stage}, ${2:primpath}, ${3:instance_index}, ${4:purpose})"
        },
        {
            "trigger": "usd_pointinstance_getbbox_size(stage, primpath, instance_index, purpose)",
            "contents": "usd_pointinstance_getbbox_size(${1:stage}, ${2:primpath}, ${3:instance_index}, ${4:purpose})"
        },
        {
            "trigger": "usd_pointinstance_relbbox(stage, primpath, instance_index, purpose, position)",
            "contents": "usd_pointinstance_relbbox(${1:stage}, ${2:primpath}, ${3:instance_index}, ${4:purpose}, ${5:position})"
        },
        {
            "trigger": "usd_primvar(stage, primpath, name)",
            "contents": "usd_primvar(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_primvar(stage, primpath, name, timecode)",
            "contents": "usd_primvar(${1:stage}, ${2:primpath}, ${3:name}, ${4:timecode})"
        },
        {
            "trigger": "usd_primvarattribname(stage, name)",
            "contents": "usd_primvarattribname(${1:stage}, ${2:name})"
        },
        {
            "trigger": "usd_primvarelement(stage, primpath, name, index)",
            "contents": "usd_primvarelement(${1:stage}, ${2:primpath}, ${3:name}, ${4:index})"
        },
        {
            "trigger": "usd_primvarelement(stage, primpath, name, index, timecode)",
            "contents": "usd_primvarelement(${1:stage}, ${2:primpath}, ${3:name}, ${4:index}, ${5:timecode})"
        },
        {
            "trigger": "usd_primvarelementsize(stage, primpath, name)",
            "contents": "usd_primvarelementsize(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_primvarindices(stage, primpath, name)",
            "contents": "usd_primvarindices(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_primvarindices(stage, primpath, name, timecode)",
            "contents": "usd_primvarindices(${1:stage}, ${2:primpath}, ${3:name}, ${4:timecode})"
        },
        {
            "trigger": "usd_primvarinterpolation(stage, primpath, name)",
            "contents": "usd_primvarinterpolation(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_primvarlen(stage, primpath, name)",
            "contents": "usd_primvarlen(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_primvarlen(stage, primpath, name, timecode)",
            "contents": "usd_primvarlen(${1:stage}, ${2:primpath}, ${3:name}, ${4:timecode})"
        },
        {
            "trigger": "usd_primvarnames(stage, primpath)",
            "contents": "usd_primvarnames(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_primvarsize(stage, primpath, name)",
            "contents": "usd_primvarsize(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_primvartimesamples(stage, primpath, name)",
            "contents": "usd_primvartimesamples(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_primvartypename(stage, primpath, name)",
            "contents": "usd_primvartypename(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_purpose(stage, primpath)",
            "contents": "usd_purpose(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_relationshipforwardedtargets(stage, primpath, name)",
            "contents": "usd_relationshipforwardedtargets(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_relationshipnames(stage, primpath)",
            "contents": "usd_relationshipnames(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_relationshiptargets(stage, primpath, name)",
            "contents": "usd_relationshiptargets(${1:stage}, ${2:primpath}, ${3:name})"
        },
        {
            "trigger": "usd_relbbox(stage, primpath, purpose, position)",
            "contents": "usd_relbbox(${1:stage}, ${2:primpath}, ${3:purpose}, ${4:position})"
        },
        {
            "trigger": "usd_removerelationshiptarget(stagehandle, primpath, name, target)",
            "contents": "usd_removerelationshiptarget(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:target})"
        },
        {
            "trigger": "usd_setactive(stagehandle, primpath, flag)",
            "contents": "usd_setactive(${1:stagehandle}, ${2:primpath}, ${3:flag})"
        },
        {
            "trigger": "usd_setattrib(stagehandle, primpath, name, value)",
            "contents": "usd_setattrib(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:value})"
        },
        {
            "trigger": "usd_setattribelement(stagehandle, primpath, name, index, value)",
            "contents": "usd_setattribelement(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:index}, ${5:value})"
        },
        {
            "trigger": "usd_setcollectionexcludes(stagehandle, collectionpath, excludes)",
            "contents": "usd_setcollectionexcludes(${1:stagehandle}, ${2:collectionpath}, ${3:excludes})"
        },
        {
            "trigger": "usd_setcollectionexpansionrule(stagehandle, collectionpath, rule)",
            "contents": "usd_setcollectionexpansionrule(${1:stagehandle}, ${2:collectionpath}, ${3:rule})"
        },
        {
            "trigger": "usd_setcollectionincludes(stagehandle, collectionpath, includes)",
            "contents": "usd_setcollectionincludes(${1:stagehandle}, ${2:collectionpath}, ${3:includes})"
        },
        {
            "trigger": "usd_setdrawmode(stagehandle, primpath, mode)",
            "contents": "usd_setdrawmode(${1:stagehandle}, ${2:primpath}, ${3:mode})"
        },
        {
            "trigger": "usd_setkind(stagehandle, primpath, kind)",
            "contents": "usd_setkind(${1:stagehandle}, ${2:primpath}, ${3:kind})"
        },
        {
            "trigger": "usd_setmetadata(stagehandle, path, name, value)",
            "contents": "usd_setmetadata(${1:stagehandle}, ${2:path}, ${3:name}, ${4:value})"
        },
        {
            "trigger": "usd_setmetadataelement(stagehandle, path, name, index, value)",
            "contents": "usd_setmetadataelement(${1:stagehandle}, ${2:path}, ${3:name}, ${4:index}, ${5:value})"
        },
        {
            "trigger": "usd_setprimvar(stagehandle, primpath, name, value)",
            "contents": "usd_setprimvar(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:value})"
        },
        {
            "trigger": "usd_setprimvarelement(stagehandle, primpath, name, index, value)",
            "contents": "usd_setprimvarelement(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:index}, ${5:value})"
        },
        {
            "trigger": "usd_setprimvarelementsize(stagehandle, primpath, name, size)",
            "contents": "usd_setprimvarelementsize(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:size})"
        },
        {
            "trigger": "usd_setprimvarindices(stagehandle, primpath, name, indices)",
            "contents": "usd_setprimvarindices(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:indices})"
        },
        {
            "trigger": "usd_setprimvarinterpolation(stagehandle, primpath, name, interpolation)",
            "contents": "usd_setprimvarinterpolation(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:interpolation})"
        },
        {
            "trigger": "usd_setpurpose(stagehandle, primpath, purpose)",
            "contents": "usd_setpurpose(${1:stagehandle}, ${2:primpath}, ${3:purpose})"
        },
        {
            "trigger": "usd_setrelationshiptargets(stagehandle, primpath, name, targets)",
            "contents": "usd_setrelationshiptargets(${1:stagehandle}, ${2:primpath}, ${3:name}, ${4:targets})"
        },
        {
            "trigger": "usd_settransformorder(stagehandle, primpath, transformorder)",
            "contents": "usd_settransformorder(${1:stagehandle}, ${2:primpath}, ${3:transformorder})"
        },
        {
            "trigger": "usd_settransformreset(stagehandle, primpath, flag)",
            "contents": "usd_settransformreset(${1:stagehandle}, ${2:primpath}, ${3:flag})"
        },
        {
            "trigger": "usd_setvariantselection(stage, primpath, variantset, variant)",
            "contents": "usd_setvariantselection(${1:stage}, ${2:primpath}, ${3:variantset}, ${4:variant})"
        },
        {
            "trigger": "usd_setvisible(stagehandle, primpath, flag)",
            "contents": "usd_setvisible(${1:stagehandle}, ${2:primpath}, ${3:flag})"
        },
        {
            "trigger": "usd_transformname(transformtype, suffix)",
            "contents": "usd_transformname(${1:transformtype}, ${2:suffix})"
        },
        {
            "trigger": "usd_transformorder(stage, primpath)",
            "contents": "usd_transformorder(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_transformsuffix(name)",
            "contents": "usd_transformsuffix(${1:name})"
        },
        {
            "trigger": "usd_transformtype(name)",
            "contents": "usd_transformtype(${1:name})"
        },
        {
            "trigger": "usd_typename(stage, primpath)",
            "contents": "usd_typename(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_uniquetransformname(stage, primpath, transformtype, suffix)",
            "contents": "usd_uniquetransformname(${1:stage}, ${2:primpath}, ${3:transformtype}, ${4:suffix})"
        },
        {
            "trigger": "usd_variants(stage, primpath, variantset)",
            "contents": "usd_variants(${1:stage}, ${2:primpath}, ${3:variantset})"
        },
        {
            "trigger": "usd_variantselection(stage, primpath, variantset)",
            "contents": "usd_variantselection(${1:stage}, ${2:primpath}, ${3:variantset})"
        },
        {
            "trigger": "usd_variantsets(stage, primpath)",
            "contents": "usd_variantsets(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_worldtransform(stage, primpath)",
            "contents": "usd_worldtransform(${1:stage}, ${2:primpath})"
        },
        {
            "trigger": "usd_worldtransform(stage, primpath, timecode)",
            "contents": "usd_worldtransform(${1:stage}, ${2:primpath}, ${3:timecode})"
        },
        {
            "trigger": "uvdist(geometry, uvname, uv, prim, primuv)",
            "contents": "uvdist(${1:geometry}, ${2:uvname}, ${3:uv}, ${4:prim}, ${5:primuv})"
        },
        {
            "trigger": "uvdist(geometry, uvname, uv, prim, primuv, maxdist)",
            "contents": "uvdist(${1:geometry}, ${2:uvname}, ${3:uv}, ${4:prim}, ${5:primuv}, ${6:maxdist})"
        },
        {
            "trigger": "uvdist(geometry, primgroup, uvname, uv, prim, primuv)",
            "contents": "uvdist(${1:geometry}, ${2:primgroup}, ${3:uvname}, ${4:uv}, ${5:prim}, ${6:primuv})"
        },
        {
            "trigger": "uvdist(geometry, primgroup, uvname, uv, prim, primuv, maxdist)",
            "contents": "uvdist(${1:geometry}, ${2:primgroup}, ${3:uvname}, ${4:uv}, ${5:prim}, ${6:primuv}, ${7:maxdist})"
        },
        {
            "trigger": "uvintersect(geometry, uvname, orig, dir, pos, primuv)",
            "contents": "uvintersect(${1:geometry}, ${2:uvname}, ${3:orig}, ${4:dir}, ${5:pos}, ${6:primuv})"
        },
        {
            "trigger": "uvintersect(geometry, primgroup, uvname, orig, dir, pos, primuv)",
            "contents": "uvintersect(${1:geometry}, ${2:primgroup}, ${3:uvname}, ${4:orig}, ${5:dir}, ${6:pos}, ${7:primuv})"
        },
        {
            "trigger": "uvsample(geometry, attr_name, uv_attr_name, uvw)",
            "contents": "uvsample(${1:geometry}, ${2:attr_name}, ${3:uv_attr_name}, ${4:uvw})"
        },
        {
            "trigger": "uvsample(geometry, primgroup, attr_name, uv_attr_name, uvw)",
            "contents": "uvsample(${1:geometry}, ${2:primgroup}, ${3:attr_name}, ${4:uv_attr_name}, ${5:uvw})"
        },
        {
            "trigger": "uvunwrap(object_path, u, v, time, P, I)",
            "contents": "uvunwrap(${1:object_path}, ${2:u}, ${3:v}, ${4:time}, ${5:P}, ${6:I})"
        },
        {
            "trigger": "uvunwrap(object_path, u, v, time, P, I, mikkelsenUtan, mikkelsenVtan)",
            "contents": "uvunwrap(${1:object_path}, ${2:u}, ${3:v}, ${4:time}, ${5:P}, ${6:I}, ${7:mikkelsenUtan}, ${8:mikkelsenVtan})"
        },
        {
            "trigger": "variance(variable, mean, sample_size)",
            "contents": "variance(${1:variable}, ${2:mean}, ${3:sample_size})"
        },
        {
            "trigger": "velocityname()",
            "contents": "velocityname()"
        },
        {
            "trigger": "vertex(geometry, attribute_name, linear_vertex_index)",
            "contents": "vertex(${1:geometry}, ${2:attribute_name}, ${3:linear_vertex_index})"
        },
        {
            "trigger": "vertex(geometry, attribute_name, prim_num, vertex_num)",
            "contents": "vertex(${1:geometry}, ${2:attribute_name}, ${3:prim_num}, ${4:vertex_num})"
        },
        {
            "trigger": "vertexattrib(geometry, attribute_name, linear_vertex_index, success)",
            "contents": "vertexattrib(${1:geometry}, ${2:attribute_name}, ${3:linear_vertex_index}, ${4:success})"
        },
        {
            "trigger": "vertexattribsize(geometry, attribute_name)",
            "contents": "vertexattribsize(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "vertexattribtype(geometry, attribute_name)",
            "contents": "vertexattribtype(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "vertexattribtypeinfo(geometry, attribute_name)",
            "contents": "vertexattribtypeinfo(${1:geometry}, ${2:attribute_name})"
        },
        {
            "trigger": "vertexhedge(geometry, vertex)",
            "contents": "vertexhedge(${1:geometry}, ${2:vertex})"
        },
        {
            "trigger": "vertexindex(geometry, primnum, vertex)",
            "contents": "vertexindex(${1:geometry}, ${2:primnum}, ${3:vertex})"
        },
        {
            "trigger": "vertexnext(geometry, linearvertex)",
            "contents": "vertexnext(${1:geometry}, ${2:linearvertex})"
        },
        {
            "trigger": "vertexpoint(geometry, linearvertex)",
            "contents": "vertexpoint(${1:geometry}, ${2:linearvertex})"
        },
        {
            "trigger": "vertexprev(geometry, linearvertex)",
            "contents": "vertexprev(${1:geometry}, ${2:linearvertex})"
        },
        {
            "trigger": "vertexprim(geometry, linearvertex)",
            "contents": "vertexprim(${1:geometry}, ${2:linearvertex})"
        },
        {
            "trigger": "vertexprimindex(geometry, linearindex)",
            "contents": "vertexprimindex(${1:geometry}, ${2:linearindex})"
        },
        {
            "trigger": "vnoise(position, jitter, seed, f1, f2, pos1, pos2)",
            "contents": "vnoise(${1:position}, ${2:jitter}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:pos1}, ${7:pos2})"
        },
        {
            "trigger": "vnoise(position, jitter, seed, f1, f2, pos1, pos2, period)",
            "contents": "vnoise(${1:position}, ${2:jitter}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:pos1}, ${7:pos2}, ${8:period})"
        },
        {
            "trigger": "vnoise(posx, posy, jittx, jitty, seed, f1, f2, pos1x, pos1y, pos2x, pos2y)",
            "contents": "vnoise(${1:posx}, ${2:posy}, ${3:jittx}, ${4:jitty}, ${5:seed}, ${6:f1}, ${7:f2}, ${8:pos1x}, ${9:pos1y}, ${10:pos2x}, ${11:pos2y})"
        },
        {
            "trigger": "vnoise(posx, posy, jittx, jitty, seed, f1, f2, pos1x, pos1y, pos2x, pos2, periodx, periody)",
            "contents": "vnoise(${1:posx}, ${2:posy}, ${3:jittx}, ${4:jitty}, ${5:seed}, ${6:f1}, ${7:f2}, ${8:pos1x}, ${9:pos1y}, ${10:pos2x}, ${11:pos2}, ${12:periodx}, ${13:periody})"
        },
        {
            "trigger": "vnoise(position, jitter, seed, f1, f2, pos1, pos2, periodx, periody, periodz)",
            "contents": "vnoise(${1:position}, ${2:jitter}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:pos1}, ${7:pos2}, ${8:periodx}, ${9:periody}, ${10:periodz})"
        },
        {
            "trigger": "vnoise(position, jitter, seed, f1, f2, pos1, pos2, periodx, periody, periodz, periodw)",
            "contents": "vnoise(${1:position}, ${2:jitter}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:pos1}, ${7:pos2}, ${8:periodx}, ${9:periody}, ${10:periodz}, ${11:periodw})"
        },
        {
            "trigger": "volume(pos, ...)",
            "contents": "volume(${1:pos}, ${2:...})"
        },
        {
            "trigger": "volumegradient(geometry, primnum, pos)",
            "contents": "volumegradient(${1:geometry}, ${2:primnum}, ${3:pos})"
        },
        {
            "trigger": "volumegradient(geometry, volumename, pos)",
            "contents": "volumegradient(${1:geometry}, ${2:volumename}, ${3:pos})"
        },
        {
            "trigger": "volumeindex(geometry, primnum, voxel)",
            "contents": "volumeindex(${1:geometry}, ${2:primnum}, ${3:voxel})"
        },
        {
            "trigger": "volumeindex(geometry, volumename, voxel)",
            "contents": "volumeindex(${1:geometry}, ${2:volumename}, ${3:voxel})"
        },
        {
            "trigger": "volumeindexactive(geometry, primnum, voxel)",
            "contents": "volumeindexactive(${1:geometry}, ${2:primnum}, ${3:voxel})"
        },
        {
            "trigger": "volumeindexactive(geometry, volumename, voxel)",
            "contents": "volumeindexactive(${1:geometry}, ${2:volumename}, ${3:voxel})"
        },
        {
            "trigger": "volumeindexorigin(geometry, primnum)",
            "contents": "volumeindexorigin(${1:geometry}, ${2:primnum})"
        },
        {
            "trigger": "volumeindexorigin(geometry, volumename)",
            "contents": "volumeindexorigin(${1:geometry}, ${2:volumename})"
        },
        {
            "trigger": "volumeindextopos(geometry, primnum, voxel)",
            "contents": "volumeindextopos(${1:geometry}, ${2:primnum}, ${3:voxel})"
        },
        {
            "trigger": "volumeindextopos(geometry, volumename, voxel)",
            "contents": "volumeindextopos(${1:geometry}, ${2:volumename}, ${3:voxel})"
        },
        {
            "trigger": "volumeindexv(geometry, primnum, voxel)",
            "contents": "volumeindexv(${1:geometry}, ${2:primnum}, ${3:voxel})"
        },
        {
            "trigger": "volumeindexv(geometry, volumename, voxel)",
            "contents": "volumeindexv(${1:geometry}, ${2:volumename}, ${3:voxel})"
        },
        {
            "trigger": "volumepostoindex(geometry, primnum, position)",
            "contents": "volumepostoindex(${1:geometry}, ${2:primnum}, ${3:position})"
        },
        {
            "trigger": "volumepostoindex(geometry, volumename, position)",
            "contents": "volumepostoindex(${1:geometry}, ${2:volumename}, ${3:position})"
        },
        {
            "trigger": "volumeres(geometry, primnum)",
            "contents": "volumeres(${1:geometry}, ${2:primnum})"
        },
        {
            "trigger": "volumeres(geometry, volumename)",
            "contents": "volumeres(${1:geometry}, ${2:volumename})"
        },
        {
            "trigger": "volumesample(geometry, primnum, pos)",
            "contents": "volumesample(${1:geometry}, ${2:primnum}, ${3:pos})"
        },
        {
            "trigger": "volumesample(geometry, volumename, pos)",
            "contents": "volumesample(${1:geometry}, ${2:volumename}, ${3:pos})"
        },
        {
            "trigger": "volumesamplev(geometry, primnum, pos)",
            "contents": "volumesamplev(${1:geometry}, ${2:primnum}, ${3:pos})"
        },
        {
            "trigger": "volumesamplev(geometry, volumename, pos)",
            "contents": "volumesamplev(${1:geometry}, ${2:volumename}, ${3:pos})"
        },
        {
            "trigger": "volumevoxeldiameter(geometry, primnum)",
            "contents": "volumevoxeldiameter(${1:geometry}, ${2:primnum})"
        },
        {
            "trigger": "volumevoxeldiameter(geometry, primname)",
            "contents": "volumevoxeldiameter(${1:geometry}, ${2:primname})"
        },
        {
            "trigger": "vtransform(v, transform)",
            "contents": "vtransform(${1:v}, ${2:transform})"
        },
        {
            "trigger": "vtransform(tospace, v)",
            "contents": "vtransform(${1:tospace}, ${2:v})"
        },
        {
            "trigger": "vtransform(fromspace, tospace, v)",
            "contents": "vtransform(${1:fromspace}, ${2:tospace}, ${3:v})"
        },
        {
            "trigger": "warning(format, ...)",
            "contents": "warning(${1:format}, ${2:...})"
        },
        {
            "trigger": "wireblinn(tangent, exponent, ...)",
            "contents": "wireblinn(${1:tangent}, ${2:exponent}, ${3:...})"
        },
        {
            "trigger": "wirediffuse(tangent, ...)",
            "contents": "wirediffuse(${1:tangent}, ${2:...})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2, f3, f4)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2, peiod)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:peiod})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2, f4, f4, period)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f4}, ${6:f4}, ${7:period})"
        },
        {
            "trigger": "wnoise(posx, posy, seed, f1, f2)",
            "contents": "wnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2})"
        },
        {
            "trigger": "wnoise(posx, posy, seed, f1, f2, f3, f4)",
            "contents": "wnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:f3}, ${7:f4})"
        },
        {
            "trigger": "wnoise(posx, posy, seed, f1, f2, periodx, periody)",
            "contents": "wnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:periodx}, ${7:periody})"
        },
        {
            "trigger": "wnoise(posx, posy, seed, f1, f2, f3, f4, periodx, periody)",
            "contents": "wnoise(${1:posx}, ${2:posy}, ${3:seed}, ${4:f1}, ${5:f2}, ${6:f3}, ${7:f4}, ${8:periodx}, ${9:periody})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2, periodx, periody)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:periodx}, ${6:periody})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2, f3, f4, periodx, periody)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4}, ${7:periodx}, ${8:periody})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2, periodx, periody, periodx)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:periodx}, ${6:periody}, ${7:periodx})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2, f3, f4, periodx, periody, periodz)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4}, ${7:periodx}, ${8:periody}, ${9:periodz})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2, periodx, periody, periodz, periodw)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:periodx}, ${6:periody}, ${7:periodz}, ${8:periodw})"
        },
        {
            "trigger": "wnoise(position, seed, f1, f2, f3, f4, periodx, periody, periodz, periodw)",
            "contents": "wnoise(${1:position}, ${2:seed}, ${3:f1}, ${4:f2}, ${5:f3}, ${6:f4}, ${7:periodx}, ${8:periody}, ${9:periodz}, ${10:periodw})"
        },
        {
            "trigger": "wo_nspace(v)",
            "contents": "wo_nspace(${1:v})"
        },
        {
            "trigger": "wo_space()",
            "contents": "wo_space()"
        },
        {
            "trigger": "wo_space(pos)",
            "contents": "wo_space(${1:pos})"
        },
        {
            "trigger": "wo_vspace(v)",
            "contents": "wo_vspace(${1:v})"
        },
        {
            "trigger": "writepixel(channel, ndc_x, ndc_y, clr)",
            "contents": "writepixel(${1:channel}, ${2:ndc_x}, ${3:ndc_y}, ${4:clr})"
        },
        {
            "trigger": "wt_nspace(v)",
            "contents": "wt_nspace(${1:v})"
        },
        {
            "trigger": "wt_space()",
            "contents": "wt_space()"
        },
        {
            "trigger": "wt_space(v)",
            "contents": "wt_space(${1:v})"
        },
        {
            "trigger": "wt_vspace(v)",
            "contents": "wt_vspace(${1:v})"
        },
        {
            "trigger": "xnoise(x)",
            "contents": "xnoise(${1:x})"
        },
        {
            "trigger": "xnoise(x, y)",
            "contents": "xnoise(${1:x}, ${2:y})"
        },
        {
            "trigger": "xnoise(xyz)",
            "contents": "xnoise(${1:xyz})"
        },
        {
            "trigger": "xnoise(xyzt)",
            "contents": "xnoise(${1:xyzt})"
        },
        {
            "trigger": "xnoised(x, v, dvdx)",
            "contents": "xnoised(${1:x}, ${2:v}, ${3:dvdx})"
        },
        {
            "trigger": "xnoised(x, y, v, dvdx, dvdy)",
            "contents": "xnoised(${1:x}, ${2:y}, ${3:v}, ${4:dvdx}, ${5:dvdy})"
        },
        {
            "trigger": "xnoised(xyz, v, dvdx, dvdy, dvdz)",
            "contents": "xnoised(${1:xyz}, ${2:v}, ${3:dvdx}, ${4:dvdy}, ${5:dvdz})"
        },
        {
            "trigger": "xnoised(xyzw, v, dvdx, dvdy, dvdz, dvdw)",
            "contents": "xnoised(${1:xyzw}, ${2:v}, ${3:dvdx}, ${4:dvdy}, ${5:dvdz}, ${6:dvdw})"
        },
        {
            "trigger": "xyzdist(geometry, origin)",
            "contents": "xyzdist(${1:geometry}, ${2:origin})"
        },
        {
            "trigger": "xyzdist(geometry, origin, prim, uv)",
            "contents": "xyzdist(${1:geometry}, ${2:origin}, ${3:prim}, ${4:uv})"
        },
        {
            "trigger": "xyzdist(geometry, origin, prim, uv, maxdist)",
            "contents": "xyzdist(${1:geometry}, ${2:origin}, ${3:prim}, ${4:uv}, ${5:maxdist})"
        },
        {
            "trigger": "xyzdist(geometry, primgroup, origin)",
            "contents": "xyzdist(${1:geometry}, ${2:primgroup}, ${3:origin})"
        },
        {
            "trigger": "xyzdist(geometry, primgroup, origin, prim, uv)",
            "contents": "xyzdist(${1:geometry}, ${2:primgroup}, ${3:origin}, ${4:prim}, ${5:uv})"
        },
        {
            "trigger": "xyzdist(geometry, primgroup, origin, prim, uv, maxdist)",
            "contents": "xyzdist(${1:geometry}, ${2:primgroup}, ${3:origin}, ${4:prim}, ${5:uv}, ${6:maxdist})"
        },
        {
            "trigger": "xyztorgb(xyz)",
            "contents": "xyztorgb(${1:xyz})"
        },
        {
            "trigger": "__uniform_mul(a, b)",
            "contents": "__uniform_mul(${1:a}, ${2:b})"
        },
        {
            "trigger": "__uniform_mul(m, a, b)",
            "contents": "__uniform_mul(${1:m}, ${2:a}, ${3:b})"
        },
        {
            "trigger": "__uniform_premul(a, b)",
            "contents": "__uniform_premul(${1:a}, ${2:b})"
        },
        {
            "trigger": "__uniform_premul(m, a, b)",
            "contents": "__uniform_premul(${1:m}, ${2:a}, ${3:b})"
        }
    ]
}